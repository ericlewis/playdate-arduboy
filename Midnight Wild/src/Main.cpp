//	Midnight Wild
//	Version 1.3, August 3rd, 2018
//
//	Programming, design, and music by Jonathan Holmes (crait)
//	Website: http://www.crait.net/
//	Twitter: @crait
//
//	Pixel art by Mario Vespa
//	Twitter: @greycove_
//
//	Controls:
//		A	- Jump
//		B	- Whip
//		L/R	- Move
//	Menu Controls:
//		A	- Start Game
//		B	- Enable/Disable Sound
//		Up	- Enable/Disable Screen Casting (USB)
//		Down- Swap Whip & Jump Buttons
//
//	Description:
//		Something's gone awry out West! Help Dusty Argile adventure
//		out and defeat the baddies who are causing a commotion and
//		stopping him from getting a good night's rest. Put them to
//		sleep with your handy lasso and rack up as many points as
//		you can, but watch out for falling barrels, cacti, whirling
//		tumbleweeds, snakes, and coyotes! Most of all, watch out
//		for the mad bull and crazy Texan twister!
//
//	1.3 - August 3, 2018
//		Saved some space for alternative board deployment
//		Added a license to the code
//	1.2 - August 3, 2018
//		Dusty runs out of the screen like a boss after winning a boss fight
//		Barrel patters are adjusted to be more fair when fighting the bull
//		Adjusted tumbleeweed patterns when fighting the tornado
//		Add black background to the tornado
//		Added a black background to the mesas in the background
//		Add black background to the bull
//		Mesas & moon no longer jump around when entering a boss fight
//		Adjusted the animation speed of the falling barrels
//		Updated greycove's name
//		Expanded greycove's portrait
//		Misc space-saving techniques
//	1.1 - April 28, 2018
//		Added ability to swap whip/jump buttons in the title screen
//		Adjusted the level's edge to allow the player to see further
//		Adjusted a few level layouts to make it smoother
//	1.0 - April 27, 2018
//		Initial release
//		Polish and gameplay balancing tweaks
//	0.5 - April 26, 2018
//		Preview release
//
//License:
//  Code is supplied for 2 purposes: 1) Ease of loading onto an Arduboy device for personal
//  play, and 2) Educational value in the case of studying the code and modifying for personal,
//  educational use. Even though the source code is available to the public, this software is
//  not 'open-source'. Re-releasing my code/game, re-distributing my code/game, or publicly
//  sharing a modified variation or derivative of my code/game is not allowed. The code has no
//  guarantee of support in the future. The code is also free of charge in order to play. This
//  code must never be sold. This game must never be sold. Distribution of my game/code for
//  commercial or financial gain is explicitly NOT allowed. Finally, someone creating a new
//  version of the game for a different platform with imagery, gameplay elements, or game
//  design element derived from this game must have explicit permission from me if it is
//	intended to be released or distributed to others. Mario Vespa retains full rights to the
//	imagery/pixel art within this game.

#include <Arduboy2.h>
#include <ArduboyPlaytune.h>

Arduboy2 arduboy;
ArduboyPlaytune tunes(arduboy.audio.enabled);

#include <EEPROM.h>

//System Values
#define FRAMERATE        45
#define SAVELOCATION    EEPROM_STORAGE_SPACE_START + 610
#define OFF            0
#define ON                1
#define BACK            0
#define FRONT            1
#define LEFT            0
#define RIGHT            1
#define BUFFER_SMALL    16
#define BUFFER_MED        32
#define BUFFER_BOSS        105
char frame = 0;
boolean casting = false;
boolean swap = false;
char jumpbutton = A_BUTTON;
char whipbutton = B_BUTTON;

void generatepart(char section);

char gettile(char x, char y);

bool checkcollision(char x, char y, char boundry);

bool checkunder();

bool checkright();

bool checkleft();

void checkfalling();

void enterbossfight();

//Images
const uint8_t numbers[] PROGMEM = {
        0x1f, 0x11, 0x1f, 0x12, 0x1f, 0x10, 0x19, 0x15, 0x12, 0x11, 0x15, 0x1f, 0x06, 0x04, 0x1f, 0x17, 0x15, 0x0d,
        0x1f, 0x15, 0x1d, 0x19, 0x05, 0x03, 0x1f, 0x15, 0x1f, 0x17, 0x15, 0x1f
};

const uint8_t me[] PROGMEM = {
        0x45, 0x8a, 0x15, 0xaa, 0x15, 0xaa, 0xd5, 0x6a, 0x34, 0x28, 0x21, 0x32, 0x1d, 0x0a, 0x0c, 0x06, 0x03, 0x02,
        0x07, 0x02, 0x23, 0x41, 0xa0, 0x41, 0x80, 0x40, 0x81, 0x40, 0x20, 0x80, 0x40, 0x80,
        0x40, 0x20, 0x08, 0xc7, 0x7d, 0xa2, 0x55, 0xa2, 0x51, 0xa8, 0x15, 0x88, 0x44, 0xa2, 0x51, 0xaa, 0x54, 0xa8,
        0x51, 0x82, 0x05, 0xff, 0x00, 0x00, 0x41, 0x80, 0x80, 0x00, 0x80, 0xe0, 0xf0, 0xf0,
        0xf0, 0xf0, 0xe0, 0x60, 0x60, 0x60, 0x68, 0xed, 0xe4, 0xe3, 0xe0, 0xe0, 0x61, 0x72, 0xe1, 0x02, 0xe1, 0x32,
        0x1a, 0xaf, 0x11, 0x88, 0x54, 0x8a, 0x45, 0x2a, 0x05, 0x92, 0x45, 0xa2, 0x41, 0xa0,
        0x55, 0xaa, 0x55, 0xaa, 0x55, 0xbf, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x3c, 0xfe, 0xff, 0xff, 0xff, 0x1d, 0xec,
        0x36, 0x37, 0xf7, 0xf7, 0xee, 0x1f, 0xff, 0x3f, 0xdf, 0x2e, 0x37, 0xf6, 0xee, 0x1c,
        0x03, 0x7e, 0x55, 0xca, 0xc5, 0xa2, 0x51, 0xa8, 0x54, 0xaa, 0x55, 0x2a, 0x15, 0x8a, 0x45, 0x22, 0x51, 0xa2,
        0x54, 0xa0, 0x55, 0xfe, 0xc3, 0xbc, 0x66, 0x40, 0x00, 0x38, 0xdf, 0x7f, 0xbf, 0xff,
        0xff, 0xfe, 0x7d, 0x7d, 0x7d, 0xfd, 0xfe, 0x3f, 0x7f, 0xff, 0xf0, 0x6d, 0x1d, 0xbd, 0xfe, 0xff, 0xe0, 0x83,
        0x3f, 0xc0, 0x7f, 0xa2, 0x55, 0xa2, 0x51, 0x28, 0x04, 0xa2, 0x51, 0xa8, 0x54, 0xaa,
        0x11, 0xa2, 0x15, 0xa2, 0xc5, 0x6a, 0x45, 0x63, 0x41, 0x6b, 0x5e, 0x78, 0x71, 0xa6, 0x4b, 0x8d, 0x97, 0x9c,
        0x38, 0x31, 0x23, 0x06, 0x46, 0x4d, 0x4d, 0x6d, 0x72, 0x7f, 0x6f, 0x1f, 0x37, 0x0f,
        0x1d, 0xcb, 0xe0, 0x7f, 0x55, 0x6a, 0x45, 0x40, 0xc0, 0x8a, 0xc5, 0x6a, 0xb5, 0xda, 0xed, 0xca, 0x3d, 0xce,
        0xf3, 0xfd, 0xfe, 0xf8, 0x87, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xbf, 0xbe, 0xbd,
        0xdb, 0x57, 0xa7, 0xcf, 0xb7, 0x8b, 0xfa, 0xf6, 0x76, 0xa6, 0xca, 0x76, 0xea, 0x9c, 0x5f, 0xdf, 0xc0, 0xfe,
        0xfe, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xb6, 0xb9, 0xfb, 0xf8, 0xf3, 0xf7, 0xff, 0xf8
};
const uint8_t greycove[] PROGMEM = {
        0xff, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xff, 0xff, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x40, 0x20,
        0x10, 0x08, 0x84, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x04, 0x04,
        0x08, 0x08, 0x10, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x9d, 0xff, 0x7f, 0xbf, 0xbf, 0xbf, 0xbf, 0xbe, 0xbe, 0xfe, 0xfe, 0xfc, 0xfc,
        0xb8, 0xb8, 0xb0, 0xb0, 0xc0, 0x00, 0xbf, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x08, 0x10, 0x1f,
        0x3e, 0x78, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xf6, 0xf6, 0xf0, 0xf8, 0xff, 0xff, 0xb7, 0xcf, 0xf8, 0xf6,
        0xf0, 0xf8, 0xff, 0x05, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x10, 0x10, 0x08, 0x14, 0x22, 0x41, 0x82,
        0x04, 0x09, 0x13, 0x13, 0x27, 0x27, 0x2f, 0x2f, 0xaf, 0x4e, 0x8d, 0x4d, 0xad, 0x2d,
        0x2e, 0x2f, 0x17, 0x23, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80,
        0x80, 0x80, 0x80, 0x80, 0xfe, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
        0x80, 0x80, 0x81, 0x81, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0xa9, 0x80, 0xff, 0x80, 0x81, 0x82, 0x82, 0x82,
        0x82, 0x82, 0x8d, 0xb0, 0xc0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xff
};
const uint8_t title_char_head[] PROGMEM = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xf8, 0xfc, 0xf4, 0xfc,
        0xec, 0xdc, 0xbc, 0x7c, 0xfc, 0xfc, 0xfc, 0xfc, 0x7c, 0xbc, 0xdc, 0xe4, 0xf8, 0xf0,
        0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc1, 0x0f, 0xff, 0xfe, 0x08,
        0x10, 0x1f, 0x27, 0x5f, 0xbf, 0x9f, 0x7f, 0x7f, 0x7f, 0xdf, 0xf7, 0x7f, 0xfe, 0xfe,
        0xfe, 0x7e, 0xff, 0xe3, 0xdf, 0x7f, 0x7f, 0x9f, 0x67, 0x1c, 0x03, 0x00, 0x01, 0x03, 0xfe, 0xfc, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01, 0x02, 0x07, 0x0f, 0xff, 0xdc, 0x18, 0x18, 0x98, 0x32, 0xb0,
        0x35, 0x31, 0x61, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x01, 0x21, 0xd0, 0xe8, 0x74,
        0xf4, 0xfc, 0xfc, 0xfa, 0xf7, 0x81
};
const uint8_t title_char_body[] PROGMEM = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x90, 0x09,
        0x2b, 0x07, 0x5c, 0xbf, 0x7f, 0xff, 0xfe, 0xfd, 0xfc, 0xfc, 0xbf, 0x7e, 0x7f, 0x7e,
        0x4f, 0xfe, 0xff, 0xfe, 0xfd, 0xfc, 0xe0, 0x1d, 0x06, 0x17, 0x0f, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf8,
        0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x32, 0xc4, 0x88, 0x88, 0x10,
        0x10, 0xd0, 0xe0, 0xf0, 0xf0, 0xee, 0xd1, 0xa3, 0x45, 0x8a, 0x14, 0x28, 0x50, 0xa0, 0x41, 0x82, 0x05, 0x09,
        0x13, 0x2b, 0x97, 0x27, 0x97, 0x27, 0x97, 0x27, 0x97, 0x2b, 0x13, 0x09, 0x04, 0x42,
        0x21, 0x00, 0x82, 0x60, 0x01, 0x7f, 0x7f, 0xbf, 0xbf, 0xbf, 0xdf, 0xdf, 0xee, 0xe4, 0x80, 0x00, 0x05, 0x09,
        0x09, 0x11, 0x10, 0x10, 0x10, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xfe, 0xfd, 0xfa, 0xf4, 0xe8, 0xd1, 0xa2, 0x45, 0x8a, 0x10, 0x28, 0x10, 0x48, 0x10, 0x48, 0x10, 0x48,
        0x10, 0x88, 0x44, 0xa2, 0xd1, 0xe8, 0xf4, 0xfa, 0xfd, 0xc0, 0x3f, 0xc0, 0x00, 0x1f,
        0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xef, 0xef, 0xef,
        0xef, 0xef, 0xef, 0xef, 0xef, 0xe7, 0x0d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xfe, 0xfd, 0xfd, 0xfa, 0xfa, 0x54, 0xf4, 0x04, 0x02, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0xc3, 0xbd, 0xbd,
        0xbf, 0xc2, 0xff, 0x0e, 0x01, 0x02, 0x02, 0x04, 0x05, 0x05, 0x05, 0x01, 0x00, 0x00
};
const uint8_t title_top[] PROGMEM = {
        0x78, 0x38, 0x1c, 0x1c, 0x0c, 0x0c, 0x0e, 0xfe, 0xfe, 0xcc, 0xe0, 0x70, 0xb8, 0xfc, 0xfe, 0xbe, 0xcc, 0x60,
        0xf0, 0xf8, 0xfc, 0x7c, 0x18, 0x00, 0x00, 0x00, 0x40, 0x60, 0x60, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x40, 0x60, 0x60, 0x20, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x00, 0x80, 0x80, 0x80, 0xc0, 0xe0, 0xa0, 0x80, 0x00, 0x00,
        0x70, 0x78, 0x3c, 0x1e, 0x0f, 0x07, 0x73, 0x39, 0x1c, 0x0e, 0x07, 0x03, 0x71, 0xfd,
        0xfe, 0x67, 0x63, 0x31, 0x30, 0x18, 0x3c, 0x7e, 0x6f, 0x67, 0x33, 0x38, 0x7c, 0x7e, 0x66, 0x63, 0x33, 0x7f,
        0x7f, 0x63, 0x20, 0x30, 0x70, 0x78, 0x3c, 0x1e, 0x6c, 0x76, 0x7b, 0x3f, 0x36, 0x18,
        0x3c, 0x7e, 0x6f, 0x67, 0x33, 0xb8, 0x3c, 0x66, 0xb3, 0xf3, 0xf9, 0x7d, 0x2f, 0x17, 0x38, 0x7c, 0x3e, 0x1f,
        0x0f, 0x77, 0x7a, 0x3f, 0x3f, 0x18, 0x7d, 0x7f, 0x67, 0x23, 0x21, 0x11, 0x01, 0x00
};
const uint8_t title_bot[] PROGMEM = {
        0x38, 0xc8, 0x28, 0xe8, 0xe8, 0x28, 0xc8, 0xf8, 0xf8, 0x08, 0xe8, 0x08, 0xf8, 0xf8, 0xc8, 0x28, 0xe8, 0xe8,
        0x28, 0xc8, 0xf8, 0x80, 0x38, 0x48, 0xa8, 0x68, 0xe8, 0x68, 0xa8, 0xc8, 0xf8, 0xf8,
        0x78, 0x00, 0x38, 0x48, 0xa8, 0x68, 0xe8, 0x60, 0xaf, 0xce, 0xf7, 0xfb, 0x79, 0x00, 0x00, 0x38, 0x48, 0xa8,
        0x68, 0xe8, 0x68, 0xa8, 0xa8, 0xa8, 0xa8, 0x28, 0x68, 0xe8, 0xd8, 0x38, 0xf0, 0xe0,
        0xc0, 0x00, 0x00, 0x01, 0x0e, 0x71, 0x8f, 0x7e, 0xf1, 0x0f, 0x00, 0x1f, 0x0f, 0x7f, 0xf0, 0x0f, 0x01, 0x0e,
        0x0f, 0xf1, 0xfe, 0x7f, 0x0f, 0x01, 0x00, 0x00, 0xff, 0x00, 0x6f, 0x00, 0xff, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x6f, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x80, 0x80, 0x80,
        0x00, 0xff, 0x00, 0x6f, 0x00, 0xff, 0xfe, 0xfe, 0x00, 0x01, 0xfe, 0x00, 0xdf, 0x1f,
        0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1c, 0x13, 0x10, 0x10, 0x18, 0x1e, 0x18, 0x13, 0x10,
        0x10, 0x10, 0x1f, 0x1f, 0x03, 0x00, 0x00, 0x00, 0x1c, 0x12, 0x11, 0x10, 0x10, 0x10,
        0x11, 0x13, 0x1f, 0x1f, 0x1e, 0x00, 0x1c, 0x12, 0x11, 0x10, 0x10, 0x10, 0x11, 0x13, 0x13, 0x13, 0x11, 0x10,
        0x1f, 0x01, 0x1e, 0x11, 0x10, 0x10, 0x10, 0x11, 0x12, 0x12, 0x12, 0x11, 0x10, 0x18,
        0x18, 0x0c, 0x0f, 0x07, 0x03, 0x00
};
const uint8_t title_start[] PROGMEM = {
        0x00, 0x00, 0x00, 0xc0, 0x38, 0x07, 0xc1, 0xb9, 0xc1, 0x07, 0x3f, 0xff, 0xf8, 0xc0, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x20, 0x30, 0x58, 0x58, 0x18, 0x18, 0x98, 0xf8, 0x78, 0x78, 0x30, 0x30, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0x70, 0x38, 0x18, 0x58, 0x58, 0x38, 0x30, 0x00, 0x00, 0x00,
        0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xb0, 0x8e, 0x81, 0x80, 0xb0, 0xcc, 0x04, 0xcc, 0xb0, 0x80, 0x81, 0x8f,
        0xbf, 0xfe, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xfc, 0xfe, 0x1f, 0x03, 0x78,
        0xfc, 0xce, 0x9e, 0x56, 0x3c, 0x10, 0x08, 0x00, 0x00, 0x60, 0xd0, 0xc3, 0xc3, 0xc6, 0xc6, 0xee, 0xec, 0x7c,
        0x38, 0x74, 0xfe, 0xce, 0xc7, 0x67, 0xf2, 0xd8, 0x4c, 0xe6, 0xfe, 0xde, 0x60, 0x78,
        0x0e, 0x7e, 0xfc, 0xc8, 0xe4, 0x7e, 0xde, 0xc7, 0x67, 0x02
};
const uint8_t castinglabel[] PROGMEM = {
        0x1f, 0x11, 0x11, 0x00, 0x1f, 0x05, 0x1f, 0x00, 0x17, 0x15, 0x1d, 0x00, 0x01, 0x1f, 0x01, 0x00, 0x11, 0x1f,
        0x11, 0x00, 0x1f, 0x02, 0x04, 0x1f, 0x00, 0x1f, 0x11, 0x19
};
const uint8_t blabel[] PROGMEM = {
        0x7c, 0x54, 0x28, 0x00, 0x28
};
const uint8_t swaplabel[] PROGMEM = {
        0x18, 0x1a, 0x02, 0x08, 0x0b, 0x03,
};
const uint8_t vol[2][8] PROGMEM = {
        {
                0x38, 0x38, 0x7c, 0x00, 0x28, 0x10, 0x28, 0x00
        },
        {
                0x38, 0x38, 0x7c, 0x00, 0x44, 0x38, 0x82, 0x7c
        }
};


const uint8_t moon[] PROGMEM = {
        0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03,
        0x07, 0x1f, 0xfe, 0xfe, 0xfc, 0xf8, 0xe0, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xc0,
        0xe0, 0xf8, 0x7f, 0x7f, 0x3f, 0x1f, 0x07, 0x00
};
const uint8_t mesa[2][128] PROGMEM = {
        {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xe8, 0xf8, 0x58, 0xb0, 0x00, 0x00, 0x78, 0xb4, 0xfc, 0xfc, 0xfc, 0xf4, 0xfc, 0xf4, 0x7c, 0xac, 0x7c, 0xfc, 0xf4, 0xfc, 0x6c, 0xbc, 0x54, 0xa8,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x55, 0xaa, 0x50, 0xa0, 0x57, 0x0a, 0x55, 0x03, 0x15, 0x03, 0x15, 0x82, 0x15, 0x02, 0x15, 0x82, 0x15, 0x02, 0x15, 0x82, 0x15, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0xbf, 0x5f, 0xbf, 0x56, 0xad, 0x52, 0xad, 0x02, 0xa5, 0x00, 0x05, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x40, 0x20, 0x5c, 0xab, 0x15, 0xaa, 0x15, 0xaa, 0x05, 0xaa, 0x00, 0x4a, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        },
        {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0xf8, 0xf8, 0x78, 0xe8, 0xf8, 0xe8, 0xf8, 0xf8, 0xfc, 0x7c, 0xfc, 0xfc, 0xf4, 0x7c, 0xac, 0x54, 0xa8, 0xfc, 0xb4, 0xec, 0xfc, 0x54, 0xa8,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xfb, 0xaf, 0x55, 0x2a, 0x55, 0x0a, 0x55, 0x02, 0x15, 0x02, 0x15, 0x82, 0x15, 0x02, 0x17, 0x83, 0x15, 0x02, 0x15, 0x82, 0x15, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x5b, 0xbe, 0x27, 0x8a, 0x40, 0xaa, 0x55, 0x0a, 0x40, 0x0a, 0x00, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x80, 0x40, 0xa0, 0x50, 0xa8, 0x14, 0xab, 0x15, 0x8a, 0x20, 0x48, 0x15, 0x40, 0x95, 0x00, 0x01, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        }
};
const uint8_t mesa_back[2][27] PROGMEM = {
        {
                0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe
        },
        {
                0xe0, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe
        }
};

const uint8_t cowboy[2][2][2][32] PROGMEM = {
        {
                //BACK
                {
                        //STANDING
                        {
                                //LEFT
                                0x70, 0xf0, 0xf0, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xf0, 0x70, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x78, 0x00
                        },
                        {
                                //RIGHT
                                0x70, 0xf0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xf0, 0xf0, 0x70, 0x00, 0x78, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00
                        }
                },
                {
                        //JUMPING
                        {
                                //LEFT
                                0x38, 0x78, 0x78, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf8, 0x78, 0x38, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7c, 0x78, 0x00
                        },
                        {
                                //RIGHT
                                0x38, 0x78, 0xf8, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x78, 0x78, 0x38, 0x00, 0x78, 0x7c, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00
                        }
                }
        },
        {
                //FRONT
                {
                        //STANDING
                        {
                                //LEFT
                                0x00, 0x20, 0x40, 0x40, 0x58, 0x4c, 0x5c, 0x4c, 0x5c, 0x58, 0x58, 0x50, 0x40, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xb3, 0xa4, 0x47, 0x47, 0x24, 0xa7, 0xb3, 0xc9, 0xb8, 0x30, 0x00, 0x00
                        },
                        {
                                //RIGHT
                                0x00, 0x20, 0x40, 0x40, 0x50, 0x58, 0x58, 0x5c, 0x4c, 0x5c, 0x4c, 0x58, 0x40, 0x40, 0x20, 0x00, 0x00, 0x00, 0x30, 0xb8, 0xc9, 0xb3, 0xa7, 0x24, 0x47, 0x47, 0xa4, 0xb3, 0xc0, 0x00, 0x00, 0x00
                        }
                },
                {
                        //JUMPING
                        {
                                //LEFT
                                0x00, 0x10, 0x20, 0x20, 0xac, 0x26, 0xae, 0xa6, 0x2e, 0xac, 0xac, 0xa8, 0x20, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xd2, 0x23, 0x23, 0x12, 0x53, 0xd9, 0x0c, 0x38, 0x30, 0x00, 0x00
                        },
                        {
                                //RIGHT
                                0x00, 0x10, 0x20, 0x20, 0xa8, 0xac, 0xac, 0x2e, 0xa6, 0xae, 0x26, 0xac, 0x20, 0x20, 0x10, 0x00, 0x00, 0x00, 0x30, 0x38, 0x0c, 0xd9, 0x53, 0x12, 0x23, 0x23, 0xd2, 0x59, 0x00, 0x00, 0x00, 0x00
                        }
                }
        },
};
const uint8_t whip[2][4][2][21] PROGMEM = {
        {
                //BACK
                {
                        //1
                        {
                                //LEFT
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x3e, 0x3e, 0x3e, 0x7e, 0x7e, 0x7e, 0x38
                        },
                        {
                                //RIGHT
                                0x38, 0x7e, 0x7e, 0x7e, 0x3e, 0x3e, 0x3e, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                        }
                },
                {
                        //2
                        {
                                //LEFT
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x38, 0x78, 0x78, 0x78, 0x78
                        },
                        {
                                //RIGHT
                                0x78, 0x78, 0x78, 0x78, 0x38, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                        }
                },
                {
                        //3
                        {
                                //LEFT
                                0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0x70
                        },
                        {
                                //RIGHT
                                0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
                        }
                },
                {
                        //4
                        {
                                //LEFT
                                0x00, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0x78, 0x38, 0x38, 0x3c, 0x1c, 0x1c, 0x1c, 0x3c, 0x3c, 0x38, 0x78, 0xf8, 0xf0, 0xf0, 0xf0
                        },
                        {
                                //RIGHT
                                0xf0, 0xf0, 0xf0, 0xf8, 0x78, 0x38, 0x3c, 0x3c, 0x1c, 0x1c, 0x1c, 0x3c, 0x38, 0x38, 0x78, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x00
                        }
                }
        },
        {
                //FRONT
                {
                        //1
                        {
                                //LEFT
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x14, 0x14, 0x14, 0x34, 0x10, 0x00
                        },
                        {
                                //RIGHT
                                0x00, 0x10, 0x34, 0x14, 0x14, 0x14, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                        }
                },
                {
                        //2
                        {
                                //LEFT
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x24, 0x24, 0x20, 0x24, 0x10, 0x10, 0x10, 0x30, 0x30, 0x00
                        },
                        {
                                //RIGHT
                                0x00, 0x30, 0x30, 0x10, 0x10, 0x10, 0x24, 0x20, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                        }
                },
                {
                        //3
                        {
                                //LEFT
                                0x00, 0x20, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x60, 0x60, 0x20, 0x00
                        },
                        {
                                //RIGHT
                                0x00, 0x20, 0x60, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x00
                        }
                },
                {
                        //4
                        {
                                //LEFT
                                0x00, 0x00, 0x20, 0x00, 0x40, 0x20, 0x00, 0x10, 0x10, 0x00, 0x08, 0x08, 0x08, 0x08, 0x10, 0x10, 0x10, 0x20, 0x60, 0x60, 0x00
                        },
                        {
                                //RIGHT
                                0x00, 0x60, 0x60, 0x20, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x00, 0x10, 0x10, 0x00, 0x20, 0x40, 0x00, 0x20, 0x00, 0x00
                        }
                }
        }
};
const uint8_t hat[] PROGMEM = {
        0x10, 0x20, 0x20, 0x28, 0x2c, 0x2e, 0x2e, 0x2e, 0x2c, 0x20, 0x20, 0x10, 0x00, 0x0a, 0x04, 0x0a
};
const uint8_t border[4][32] PROGMEM = {
        {
                0x00, 0x3a, 0x48, 0x2e, 0x32, 0x7a, 0x64, 0x00, 0x0c, 0x12, 0x02, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x06, 0xf9, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        },
        {
                0x04, 0x04, 0x04, 0x04, 0x04, 0x02, 0x12, 0x0c, 0x00, 0x64, 0x7a, 0x32, 0x2e, 0x48, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0xf9, 0x06, 0x00
        },
        {
                0x00, 0x60, 0x9f, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x12, 0x74, 0x4c, 0x5e, 0x26, 0x00, 0x30, 0x48, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20
        },
        {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80, 0x9f, 0x60, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x48, 0x30, 0x00, 0x26, 0x5e, 0x4c, 0x74, 0x12, 0x5c, 0x00
        }
};

#define LABEL_TOP_Y        16
#define LABEL_SUB_Y        38
const uint8_t highscorelabel[] PROGMEM = {
        0x40, 0x60, 0xb0, 0x30, 0x30, 0xb0, 0xf0, 0xf0, 0xf8, 0x7e, 0x7f, 0x7f, 0xf6, 0xe0, 0xe0, 0x70, 0x38, 0x1c,
        0x8e, 0x86, 0xa0, 0x30, 0x30, 0x10, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00,
        0x00, 0x80, 0xc0, 0xe0, 0x70, 0xb8, 0x9c, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf8,
        0x9c, 0x8e, 0x86, 0x16, 0x16, 0x0e, 0x0c, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
        0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x38, 0x3c,
        0x1e, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x1e, 0x3f, 0x3f, 0x19, 0x18, 0x0c, 0x1e,
        0x3f, 0x37, 0x33, 0x19, 0xdc, 0xbe, 0xd3, 0xf9, 0x79, 0x3c, 0x1e, 0x17, 0x0b, 0x1c, 0x3e, 0x1f, 0x0f, 0x07,
        0x3b, 0x3d, 0x1f, 0x1f, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x34, 0x30,
        0x30, 0x31, 0x31, 0x3b, 0x3b, 0x1f, 0x0e, 0x1c, 0x3f, 0x37, 0x31, 0x18, 0x0c, 0x1e, 0x3f, 0x33, 0x27, 0x15,
        0x0f, 0x06, 0x07, 0x3f, 0x3e, 0x30, 0x1e, 0x3f, 0x3f, 0x29, 0x27, 0x17
};
const uint8_t newhighscorelabel[] PROGMEM = {
        0x3c, 0x1c, 0x0e, 0x0e, 0x06, 0x06, 0x87, 0xff, 0xff, 0xe6, 0x70, 0x38, 0xdc, 0xfe, 0xff, 0x1f, 0x06, 0x00,
        0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x40, 0x80, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x40, 0x60, 0xb0, 0x30, 0x30, 0xb0, 0xf0, 0xf0, 0xf8, 0x7e, 0x7f, 0x7f, 0xf6, 0xe0,
        0xe0, 0x70, 0x38, 0x1c, 0x8e, 0x86, 0xa0, 0x30, 0x30, 0x10, 0x80, 0x80, 0xc0, 0xc0,
        0xc0, 0x80, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0xb8, 0x9c, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xf0, 0xf8, 0x9c, 0x8e, 0x86, 0x16, 0x16, 0x0e, 0x0c, 0x00, 0x80, 0x80,
        0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80,
        0x00, 0x00, 0x00, 0x38, 0x3c, 0x1e, 0x1f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x1e, 0x3f,
        0x3f, 0x18, 0x18, 0x0c, 0x1e, 0x3f, 0x3f, 0x29, 0x27, 0x17, 0x18, 0x1f, 0x3f, 0x38, 0x1e, 0x30, 0x3f, 0x1f,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x3c, 0x1e, 0x0f, 0x07, 0x03, 0x01, 0x00,
        0x00, 0x1e, 0x3f, 0x3f, 0x19, 0x18, 0x0c, 0x1e, 0x3f, 0x37, 0x33, 0x19, 0xdc, 0xbe, 0xd3, 0xf9, 0x79, 0x3c,
        0x1e, 0x17, 0x0b, 0x1c, 0x3e, 0x1f, 0x0f, 0x07, 0x3b, 0x3d, 0x1f, 0x1f, 0x0c, 0x06,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x34, 0x30, 0x30, 0x31, 0x31, 0x3b, 0x3b, 0x1f, 0x0e, 0x1c, 0x3f, 0x37,
        0x31, 0x18, 0x0c, 0x1e, 0x3f, 0x33, 0x27, 0x15, 0x0f, 0x06, 0x07, 0x3f, 0x3e, 0x30,
        0x1e, 0x3f, 0x3f, 0x29, 0x27, 0x17
};
const uint8_t levellabel[] PROGMEM = {
        0x38, 0x38, 0x1c, 0x1c, 0x0c, 0x0c, 0x0e, 0x8e, 0xde, 0xfc, 0xfc, 0x7e, 0x3f, 0x37, 0x3b, 0x1f, 0x0e, 0x00,
        0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00,
        0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0xe0, 0x70, 0xb0, 0xf0, 0x60, 0x1c, 0x3e, 0x37, 0x3b, 0x3d, 0x1e, 0x0f,
        0x17, 0x3b, 0x3d, 0x38, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x1e, 0x3f, 0x3f, 0x29, 0x27,
        0x17, 0x18, 0x1e, 0x3f, 0x30, 0x18, 0x0f, 0x07, 0x00, 0x1e, 0x3f, 0x3f, 0x29, 0x27, 0x37, 0x18, 0x1f, 0x3f,
        0x33, 0x11, 0x08, 0x00
};
const uint8_t gameoverlabel[] PROGMEM = {
        0xf0, 0xfc, 0x1e, 0x0f, 0x87, 0x83, 0x03, 0x03, 0x83, 0xa7, 0xbe, 0x3c, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0,
        0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0xc0, 0xc0, 0x80, 0xc0, 0xc0, 0x80, 0x00, 0x00,
        0x80, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xfc, 0x1e, 0x0f, 0x17,
        0x13, 0x1b, 0x1b, 0x09, 0xec, 0xf6, 0x03, 0x00, 0x80, 0x00, 0x40, 0xc0, 0x80, 0x00,
        0x00, 0x80, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x03, 0xc7, 0xac, 0xd8,
        0xf9, 0x7b, 0x3b, 0x1b, 0x0d, 0x07, 0x0b, 0x0c, 0x1e, 0x1b, 0x19, 0x1c, 0x1f, 0x0f,
        0x1c, 0x1e, 0x0f, 0x07, 0x1b, 0x1d, 0x06, 0x1f, 0x1d, 0x1e, 0x0f, 0x0d, 0x06, 0x0f, 0x1f, 0x1f, 0x14, 0x13,
        0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x18, 0x18,
        0x18, 0x18, 0x18, 0x0c, 0x07, 0x09, 0x0c, 0x0f, 0x1f, 0x18, 0x0c, 0x07, 0x03, 0x00, 0x0f, 0x1f, 0x1f, 0x14,
        0x13, 0x1b, 0x18, 0x0c, 0x0f, 0x01, 0x0f, 0x1f, 0x19, 0x08
};
const uint8_t scorelabel[] PROGMEM = {
        0x17, 0x15, 0x1d, 0x00, 0x1f, 0x11, 0x11, 0x00, 0x1f, 0x11, 0x1f, 0x00, 0x1f, 0x05, 0x1b, 0x00, 0x1f, 0x15,
        0x11, 0x00, 0x0a
};

const uint8_t heart[2][6][10] PROGMEM = {
        {
                //BACK
                {0x3e, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3e, 0x00},
                {0x3e, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3e, 0x00},
                {0x3e, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3e, 0x00},
                {0x3e, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3e, 0x00},

                {0x1e, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x00},
                {0x00, 0x7e, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1e}
        },
        {
                //FRONT
                {0x00, 0x1c, 0x2e, 0x5e, 0xbc, 0x7e, 0x3e, 0x1c, 0x00, 0x00},
                {0x00, 0x1c, 0x2e, 0x5e, 0xbc, 0x7e, 0x3e, 0x1c, 0x00, 0x00},
                {0x00, 0x1c, 0x2e, 0x5e, 0xbc, 0x7e, 0x3e, 0x1c, 0x00, 0x00},
                {0x00, 0x1c, 0x2e, 0x5e, 0xbc, 0x7e, 0x3e, 0x1c, 0x00, 0x00},

                {0x00, 0x0c, 0x1e, 0x2e, 0x5c, 0xbe, 0x7e, 0x3c, 0x00, 0x00},
                {0x00, 0x00, 0x3c, 0x4e, 0xbe, 0x7c, 0x3e, 0x1e, 0x0c, 0x00}
        }
};
const uint8_t snake[2][2][32] PROGMEM = {
        {
                //BACK
                {
                        0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc3, 0xf3, 0xf3, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0x7c
                },
                {
                        0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x07, 0xc7, 0xc7, 0xf7, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x1f
                }
        },
        {
                //FRONT
                {
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x81, 0xa1, 0xa1, 0xa1, 0xa8, 0xad, 0xa7, 0x80, 0xa8, 0x54, 0x38, 0x00
                },
                {
                        0x00, 0x60, 0x30, 0xf0, 0xa0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x83, 0x81, 0xa3, 0xa6, 0xac, 0xa8, 0xa0, 0xa0, 0x8a, 0x95, 0x0e, 0x00
                }
        }
};
const uint8_t coyote[2][2][2][32] PROGMEM = {
        {
                //BACK
                {
                        //STANDING
                        {
                                //LEFT
                                0x80, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x00, 0x80, 0xe0, 0xe0, 0x07, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef
                        },
                        {
                                //RIGHT
                                0xe0, 0xe0, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x80, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x07
                        }
                },
                {
                        //JUMPING
                        {
                                //LEFT
                                0xe0, 0xf0, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x80, 0xe0, 0xe0, 0xe0, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7
                        },
                        {
                                //RIGHT
                                0xe0, 0xe0, 0xe0, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf0, 0xe0, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f
                        }
                }
        },
        {
                //FRONT
                {
                        //STANDING
                        {
                                //LEFT
                                0x00, 0x00, 0xdc, 0x32, 0xfe, 0xf8, 0x38, 0xd8, 0xf4, 0xe2, 0x7e, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x03, 0x05, 0x05, 0xf7, 0x0b, 0x0b, 0xfd, 0x1d, 0x0e, 0xce, 0x1e, 0x3c, 0x78, 0xc7, 0x03
                        },
                        {
                                //RIGHT
                                0xc0, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xe2, 0xf4, 0xd8, 0x38, 0xf8, 0xfe, 0x32, 0xdc, 0x00, 0x00, 0x03, 0xc7, 0x78, 0x3c, 0x1e, 0xce, 0x0e, 0x1d, 0xfd, 0x0b, 0x0b, 0xf7, 0x05, 0x05, 0x03, 0x00
                        }
                },
                {
                        //JUMPING
                        {
                                //LEFT
                                0x00, 0xc0, 0xa0, 0xfc, 0xda, 0xee, 0xf8, 0xf4, 0xe2, 0xfe, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x08, 0x0a, 0x0a, 0x12, 0x13, 0x1b, 0x2d, 0x2d, 0x5e, 0x1e, 0x3c, 0x70, 0x67, 0x43, 0x00
                        },
                        {
                                //RIGHT
                                0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xe2, 0xf4, 0xf8, 0xee, 0xda, 0xfc, 0xa0, 0xc0, 0x00, 0x00, 0x43, 0x67, 0x70, 0x3c, 0x1e, 0x5e, 0x2d, 0x2d, 0x1b, 0x13, 0x12, 0x0a, 0x0a, 0x08, 0x00
                        }
                }
        }
};
const uint8_t barrel[2][2][32] PROGMEM = {
        {
                //BACK
                {
                        0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f
                },
                {
                        0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f
                }
        },
        {
                //FRONT
                {
                        0x00, 0xf0, 0x18, 0x18, 0xf4, 0xfc, 0x0c, 0x0c, 0x0c, 0x0c, 0xfc, 0xf4, 0x18, 0x18, 0xf0, 0x00, 0x00, 0x1f, 0x31, 0x31, 0x7f, 0x7f, 0x61, 0x61, 0x61, 0x61, 0x7f, 0x7f, 0x31, 0x31, 0x1f, 0x00
                },
                {
                        0x00, 0xf0, 0x48, 0x48, 0xf4, 0xfc, 0x24, 0x24, 0x24, 0x24, 0xfc, 0xf4, 0x48, 0x48, 0xf0, 0x00, 0x00, 0x1f, 0x24, 0x24, 0x5f, 0x7f, 0x48, 0x48, 0x48, 0x48, 0x7f, 0x5f, 0x24, 0x24, 0x1f, 0x00
                }
        }
};
const uint8_t tumbleweed[2][4][32] PROGMEM = {
        {
                //BACK
                {
                        0xe0, 0xf0, 0xf0, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0x7c, 0x00, 0x03, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x77
                },
                {
                        0xf0, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xfc, 0x03, 0x1f, 0x1f, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x0f
                },
                {
                        0xee, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xc0, 0x00, 0x3e, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x0f, 0x0f, 0x07
                },
                {
                        0xf0, 0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xf8, 0xf8, 0xf8, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f
                }
        },
        {
                //FRONT
                {
                        0x00, 0x40, 0xa0, 0x40, 0xe4, 0x9c, 0xc8, 0x2a, 0xd2, 0x5a, 0xea, 0x3c, 0x80, 0x44, 0x38, 0x00, 0x00, 0x00, 0x01, 0x12, 0x2a, 0x55, 0x56, 0x37, 0x1a, 0x5b, 0x56, 0x3f, 0x49, 0x15, 0x22, 0x00
                },
                {
                        0x00, 0xe0, 0x14, 0x72, 0xd2, 0x32, 0xe4, 0xa8, 0x5c, 0xf2, 0x34, 0xd8, 0xf4, 0x12, 0x68, 0x00, 0x00, 0x01, 0x0c, 0x07, 0x04, 0x29, 0x5a, 0x2e, 0x25, 0x1b, 0x07, 0x08, 0x17, 0x09, 0x06, 0x00
                },
                {
                        0x00, 0x44, 0xa8, 0x92, 0xfc, 0x6a, 0xda, 0x58, 0xec, 0x6a, 0xaa, 0x54, 0x48, 0x80, 0x00, 0x00, 0x00, 0x1c, 0x22, 0x01, 0x3c, 0x57, 0x5a, 0x4b, 0x54, 0x13, 0x39, 0x27, 0x02, 0x05, 0x02, 0x00
                },
                {
                        0x00, 0x60, 0x90, 0xe8, 0x10, 0xe0, 0xd8, 0xa4, 0x74, 0x5a, 0x94, 0x20, 0xe0, 0x30, 0x80, 0x00, 0x00, 0x16, 0x48, 0x2f, 0x1b, 0x2c, 0x4f, 0x3a, 0x15, 0x27, 0x4c, 0x4b, 0x4e, 0x28, 0x07, 0x00
                }
        }
};
const uint8_t boss_bull_legs[2][32] PROGMEM = {
        {
                //Stand
                0x06, 0x38, 0xc0, 0x00, 0x02, 0x04, 0x88, 0x70, 0x10, 0x20, 0x24, 0x38, 0x60, 0x80, 0x00, 0x00, 0x00, 0xf0, 0x8f, 0x48, 0x80, 0x8e, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x8f, 0x48, 0x80
        },
        {
                //Jump
                0x3f, 0x40, 0x80, 0x00, 0x91, 0x62, 0x94, 0x08, 0x10, 0x10, 0x24, 0xf8, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x0f, 0x08, 0x0c, 0x04, 0x03, 0xf0, 0x88, 0x4f, 0x88, 0x88, 0xfe, 0x01, 0x00
        }
};
const uint8_t boss_bull_hit[] PROGMEM = {
        0x00, 0xd6, 0xab, 0xe7, 0xe5, 0xe4, 0xa4, 0xe4, 0xc4, 0x04, 0x00, 0x04, 0x0e, 0xde, 0x0e, 0x00, 0x00, 0x80,
        0x61, 0x19, 0x04, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00
};
const uint8_t boss_bull_stand[] PROGMEM = {
        0x00, 0x3c, 0x7e, 0xb8, 0x50, 0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0x14, 0x04, 0x72, 0xf8, 0xfe, 0x7d, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x6f, 0xb1, 0xf2, 0x70, 0xf0,
        0xb0, 0xf2, 0x61, 0x13, 0x08, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


const uint8_t boss_bull_legs_back[2][34] PROGMEM = {
        {
                //Stand
                0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x01, 0x00, 0x00, 0xf1, 0xff, 0xff, 0xff, 0xff
        },
        {
                //Jump
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0x07, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07
        }
};
const uint8_t boss_bull_hit_back[] PROGMEM = {
        0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x83, 0xe7,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
const uint8_t boss_bull_stand_back[] PROGMEM = {
        0xfc, 0xfe, 0xfe, 0xfe, 0xf8, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
        0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
        0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03
};


const uint8_t boss_tornado[4][32] PROGMEM = {
        {
                //Bottom 1 (BL)
                0x00, 0x01, 0x1d, 0xe6, 0x6a, 0x2b, 0x2b, 0xab, 0xb3, 0xb3, 0xb3, 0xb1, 0xb2, 0xb2, 0xd2, 0x2d, 0x00, 0x00, 0x04, 0x03, 0x07, 0x29, 0x5b, 0x9b, 0xeb, 0xab, 0x17, 0x0d, 0x05, 0x02, 0x00, 0x00
        },
        {
                //Bottom 2 (BR)
                0x2d, 0xd2, 0xb2, 0xb2, 0xb1, 0xb3, 0xb3, 0xb3, 0xab, 0x2b, 0x2b, 0x6a, 0xe6, 0x1d, 0x01, 0x00, 0x00, 0x00, 0x02, 0x05, 0x0d, 0x17, 0xab, 0xeb, 0x9b, 0x5b, 0x29, 0x07, 0x03, 0x04, 0x00, 0x00
        },
        {
                //Stack 1 (TL)
                0x3a, 0xda, 0xa7, 0xa7, 0xc7, 0xaa, 0xea, 0xea, 0xbb, 0xbb, 0xb3, 0xb3, 0xaa, 0x8a, 0x06, 0x01, 0x89, 0xce, 0xb6, 0xb6, 0xb6, 0xa6, 0xae, 0xaa, 0xa3, 0x35, 0x3d, 0xb9, 0x7f, 0x54, 0xe8, 0x00
        },
        {
                //Stack 2 (TR)
                0x01, 0x06, 0x8a, 0xaa, 0xb3, 0xb3, 0xbb, 0xbb, 0xea, 0xea, 0xaa, 0xc7, 0xa7, 0xa7, 0xda, 0x3a, 0x00, 0xe8, 0x54, 0x7f, 0xb9, 0x3d, 0x35, 0xa3, 0xaa, 0xae, 0xa6, 0xb6, 0xb6, 0xb6, 0xce, 0x89
        },
};
const uint8_t boss_tornado_back[4][36] PROGMEM = {
        {
                //Bottom 1 (BL)
                0x00, 0x03, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x0e, 0x0f, 0x0f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x1f, 0x0f, 0x07, 0x01, 0x00
        },
        {
                //Bottom 2 (BR)
                0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x03, 0x00, 0x00, 0x01, 0x07, 0x0f, 0x1f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x0f, 0x0e, 0x00, 0x00
        },
        {
                //Stack 1 (TL)
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0x0f, 0x03, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00
        },
        {
                //Stack 2 (TR)
                0x03, 0x0f, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf
        },
};
const uint8_t cactus[2][32] PROGMEM = {
        {
                //BACK
                0x00, 0x80, 0xe0, 0xe0, 0xe0, 0xe0, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0x00, 0x00, 0x0f, 0x3f, 0x3f, 0x3f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00
        },
        {
                //FRONT
                0x00, 0x00, 0x00, 0xc0, 0x80, 0xc0, 0x00, 0xa8, 0xfc, 0x06, 0xfc, 0xfe, 0xfc, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x05, 0x17, 0x0f, 0x1f, 0x0e, 0x5e, 0xff, 0x00, 0xff, 0xff, 0xff, 0xaa, 0x00, 0x00
        }
};
const uint8_t pop[2][2][8] PROGMEM = {
        {
                //BACK
                {0xe7, 0xff, 0xff, 0x7e, 0x7e, 0xff, 0xff, 0xe7},
                {0xe7, 0xe7, 0xe7, 0x00, 0x00, 0xe7, 0xe7, 0xe7}
        },
        {
                //FRONT
                {0x00, 0x42, 0x24, 0x18, 0x18, 0x24, 0x42, 0x00},
                {0x81, 0x42, 0x00, 0x00, 0x00, 0x00, 0x42, 0x81}
        }
};

const uint8_t tiles[2][56][8] PROGMEM = {
        {
                //BACK
                //SOLID
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //C__TL
                {0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //C__TM
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //C__TR
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe},
                //G__TL
                {0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //G_TM1
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //G_TM2
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //G__TR
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc},
                //S__F0
                {0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,},
                //S__F1
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__F2
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //TRASH
                {},
                //S__F4
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__F5
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3},
                //B__TL
                {0xf8, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //B__TR
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8},
                //S__R0
                {0x8e, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__R1
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__R2
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__R3
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__R4
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__R5
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8e},
                //OTHER
                {0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa},
                //TRASH
                {},
                //C__ML
                {0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //C__MR
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00},
                //C_BL1
                {0x00, 0x00, 0x01, 0x01, 0xcf, 0xff, 0xff, 0xff},
                //C_BR1
                {0xff, 0xff, 0xff, 0xcf, 0x01, 0x01, 0x00, 0x00},
                //C_BL2
                {0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff},
                //C_BR2
                {0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00},
                //G__ML
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //G__MR
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //B__BL
                {0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //B__BR		33
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f},
                //TRASH		34
                {},
                //TRASH		35
                {},
                //TRASH		36
                {},
                //TRASH		37
                {},
                //S__00
                {0x03, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__01
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__02
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__03
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__04
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__05
                {0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x03},
                //S__10
                {0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__11
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__12
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__13
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__14
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__15
                {0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00},
                //S__20
                {0x80, 0xc0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__21
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__22
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__23
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__24
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__25
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0x80}
        },
        {
                //FRONT
                //SOLID
                {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
                //C__TL
                {0x00, 0x7c, 0xfe, 0x9e, 0x0e, 0x0e, 0x0e, 0x1e},
                //C__TM
                {0x3e, 0x3c, 0x1e, 0x0e, 0x0e, 0x0e, 0x1e, 0x3e},
                //C__TR
                {0x1e, 0x0e, 0x0e, 0x0e, 0x9e, 0xfe, 0x7c, 0x00},
                //G__TL
                {0x00, 0x58, 0xac, 0x1e, 0x3e, 0x1e, 0x3e, 0x3e},
                //G_TM1
                {0xbe, 0x5a, 0xe6, 0xf2, 0xf6, 0xf2, 0xf6, 0xe6},
                //G_TM2
                {0xda, 0xae, 0x1e, 0x3e, 0x9e, 0x3e, 0xbe, 0x3e},
                //G__TR
                {0xbe, 0x5a, 0xe6, 0xf2, 0xf6, 0xfc, 0xb8, 0x00},
                //S__F0
                {0x00, 0x81, 0x42, 0x7e, 0x42, 0x7e, 0x42, 0x3e},
                //S__F1
                {0x82, 0xae, 0xa2, 0xae, 0xa2, 0xaa, 0xaa, 0xab},
                //S__F2
                {0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa},
                //TRASH
                {},
                //S__F4
                {0xab, 0xaa, 0xaa, 0xa2, 0xae, 0xa2, 0xae, 0x82},
                //S__F5
                {0x3e, 0x42, 0x7e, 0x42, 0x7e, 0x42, 0x81, 0x00},
                //B__TL
                {0x00, 0xf0, 0x2c, 0x32, 0xf2, 0x3e, 0x32, 0x32},
                //B__TR
                {0x32, 0x32, 0x3e, 0xf2, 0x32, 0x2c, 0xf0, 0x00},
                //S__R0
                {0x00, 0x04, 0x8a, 0xfa, 0x8a, 0x8a, 0x8a, 0x8a},
                //S__R1
                {0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0xca, 0x2a},
                //S__R2
                {0x2a, 0xaa, 0x2a, 0xaa, 0xaa, 0xaa, 0x2a, 0xaa},
                //S__R3
                {0x2a, 0x2a, 0xaa, 0xaa, 0x2a, 0x2a, 0xaa, 0xaa},
                //S__R4
                {0x2a, 0xca, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a},
                //S__R5
                {0x8a, 0x8a, 0x8a, 0x8a, 0xfa, 0x8a, 0x04, 0x00},
                //OTHER
                {0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55},
                //TRASH
                {},
                //C__ML
                {0x00, 0x00, 0x7f, 0xc1, 0x60, 0xe0, 0x90, 0x00},
                //C__MR
                {0x00, 0x90, 0xe0, 0x60, 0xc1, 0x7f, 0x00, 0x00},
                //C_BL1
                {0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xff, 0x78},
                //C_BR1
                {0x78, 0xff, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00},
                //C_BL2
                {0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0},
                //C_BR2
                {0xe0, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00},
                //G__ML
                {0x00, 0x9d, 0x28, 0x12, 0x05, 0x03, 0x07, 0x02},
                //G__MR
                {0x00, 0x01, 0x00, 0x01, 0x0b, 0x19, 0xae, 0x00},
                //B__BL
                {0x00, 0x1f, 0x68, 0x98, 0x9f, 0xf8, 0x98, 0x98},
                //B__BR		33
                {0x98, 0x98, 0xf8, 0x9f, 0x98, 0x68, 0x1f, 0x00},
                //TRASH		34
                {},
                //TRASH		35
                {},
                //TRASH		36
                {},
                //TRASH		37
                {},
                //S__00
                {0x00, 0x01, 0x02, 0x02, 0xfe, 0x02, 0x7a, 0x3a},
                //S__01
                {0x9a, 0xca, 0xe2, 0xf2, 0xfa, 0xfa, 0xef, 0xd0},
                //S__02
                {0xdb, 0xd6, 0xd0, 0xd0, 0xdf, 0xd0, 0xd7, 0xd8},
                //S__03
                {0xd7, 0xd0, 0xdf, 0xd2, 0xdd, 0xd0, 0xdf, 0xda},
                //S__04
                {0xd0, 0xef, 0xfa, 0xfa, 0xf2, 0xe2, 0xca, 0x9a},
                //S__05
                {0x3a, 0x7a, 0x02, 0xfe, 0x02, 0x02, 0x01, 0x00},
                //S__10
                {0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xfe, 0xff},
                //S__11
                {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07},
                //S__12
                {0xfb, 0x8b, 0x0b, 0x0b, 0x8b, 0x8b, 0x8b, 0x0b},
                //S__13
                {0x0b, 0x8b, 0x8b, 0x8b, 0x0b, 0x0b, 0x8b, 0xfb},
                //S__14
                {0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
                //S__15
                {0xff, 0xfe, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00},
                //S__20
                {0x00, 0x00, 0x80, 0x80, 0xff, 0x80, 0xb9, 0xd5},
                //S__21
                {0xed, 0xd5, 0xb9, 0x81, 0xb9, 0xd5, 0xed, 0x00},
                //S__22
                {0xff, 0xb5, 0xa1, 0xa1, 0xa0, 0xa0, 0xa0, 0x9f},
                //S__23
                {0x9f, 0xa0, 0xa0, 0xa0, 0xa1, 0xa1, 0xb5, 0xff},
                //S__24
                {0x00, 0xed, 0xd5, 0xb9, 0x81, 0xb9, 0xd5, 0xed},
                //S__25
                {0xd5, 0xb9, 0x80, 0xff, 0x80, 0x80, 0x00, 0x00}
        }
};


//Level Data
#define SOLID    0
#define C__TL    1
#define C__TM    2
#define C__TR    3
#define G__TL    4
#define G_TM1    5
#define G_TM2    6
#define G__TR    7
#define S__F0    8
#define S__F1    9
#define S__F2    10
//				11
#define S__F4    12
#define S__F5    13
#define B__TL    14
#define B__TR    15
#define S__R0    16
#define S__R1    17
#define S__R2    18
#define S__R3    19
#define S__R4    20
#define S__R5    21
//				22
#define BOUND_PLATFORM    22
#define OTHER    23
#define C__ML    24
#define C__MR    25
#define C_BL1    26
#define C_BR1    27
#define C_BL2    28
#define C_BR2    29
#define G__ML    30
#define G__MR    31
#define B__BL    32
#define B__BR    33
//				34
//				35
//				36
//				37
#define BOUND_WALL        38
#define S__00    38
#define S__01    39
#define S__02    40
#define S__03    41
#define S__04    42
#define S__05    43
#define S__10    44
#define S__11    45
#define S__12    46
#define S__13    47
#define S__14    48
#define S__15    49
#define S__20    50
#define S__21    51
#define S__22    52
#define S__23    53
#define S__24    54
#define S__25    55

#define BOUND_DRAW    65
#define BLANK        70

#define BOUND_OTHER    80
#define HEART        82
#define CACTU        83
#define SNAKE        84
#define TUMBL        85
#define BARRL        86
#define COYOS        87
#define BULLS        88
#define TORNA        89

#define LOWEST        -1
#define LOW1        0
#define LOW2        1
#define MED            2
#define TALL        3
#define PARTS        5
#define PART_WIDTH    10

uint8_t currentlevel[8][PART_WIDTH * 3] = {
        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
        {G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2}
};

const uint8_t levelparts[4][PARTS][8][PART_WIDTH] PROGMEM = {
        {
                //LOW1
                {
                        {BLANK, BLANK, BLANK, BARRL, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BARRL, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BARRL},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BARRL, BLANK, BARRL, TUMBL, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, TUMBL, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, HEART, BLANK, BLANK, BLANK, TUMBL},
                        {BLANK, COYOS, CACTU, COYOS, SNAKE, COYOS, CACTU, TUMBL, SNAKE, BLANK},
                        {G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2}
                },
                {
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BARRL, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, TUMBL, BLANK},
                        {BLANK, BLANK, BLANK, TUMBL, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, HEART, BARRL, TUMBL, BARRL, BLANK, BARRL, BLANK},
                        {BLANK, COYOS, CACTU, SNAKE, BLANK, CACTU, BLANK, BLANK, CACTU, TUMBL},
                        {G__TL, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G__TR},
                        {G__ML, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, G__MR}
                },
                {
                        {BLANK, BLANK, BLANK, BLANK, BARRL, BLANK, BARRL, BLANK, BARRL, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BARRL, BLANK, BARRL, BLANK, BLANK, BLANK, BLANK, BLANK, TUMBL, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, TUMBL, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, TUMBL, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {SNAKE, COYOS, CACTU, COYOS, BLANK, BLANK, HEART, COYOS, TUMBL, BLANK},
                        {G_TM1, G_TM2, G_TM1, G_TM2, G__TR, BLANK, BLANK, G__TL, G_TM1, G_TM2}
                },
                {
                        {BLANK, BLANK, BLANK, BARRL, BLANK, BARRL, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BARRL, BLANK, BARRL, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, TUMBL},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, TUMBL, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, TUMBL, BLANK, BLANK, BLANK, BLANK, HEART, BLANK},
                        {CACTU, COYOS, BLANK, BLANK, BLANK, BLANK, BLANK, COYOS, TUMBL, BLANK},
                        {G_TM1, G_TM2, G__TR, BLANK, BLANK, BLANK, BLANK, G__TL, G_TM1, G_TM2}
                },
                {
                        {BARRL, BLANK, BARRL, BLANK, BARRL, BLANK, BARRL, BLANK, BARRL, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, TUMBL, BLANK, BLANK, BLANK, HEART, BLANK, TUMBL},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, CACTU, BLANK, BLANK, BLANK},
                        {SNAKE, CACTU, COYOS, BLANK, G__TL, G_TM1, G_TM2, G__TR, SNAKE, BLANK},
                        {G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2}
                }
        },
        {
                //LOW2
                {
                        {BLANK, BARRL, BLANK, BARRL, BLANK, BLANK, BARRL, BLANK, BARRL, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, COYOS, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, B__TL, B__TR, BLANK, HEART, BLANK},
                        {BLANK, BLANK, TUMBL, BLANK, SNAKE, B__BL, B__BR, BLANK, BLANK, TUMBL},
                        {BLANK, BLANK, BLANK, BLANK, B__TL, B__TR, B__TL, B__TR, BLANK, BLANK},
                        {BLANK, COYOS, CACTU, BLANK, B__BL, B__BR, B__BL, B__BR, TUMBL, BLANK},
                        {G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2}
                },
                {
                        {BLANK, BLANK, BLANK, BLANK, BARRL, BLANK, BARRL, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, TUMBL},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, COYOS, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, B__TL, B__TR, BLANK, BLANK, BLANK, BLANK, BLANK, TUMBL},
                        {BLANK, BLANK, B__BL, B__BR, CACTU, SNAKE, COYOS, HEART, BLANK, TUMBL},
                        {G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2}
                },
                {
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BARRL, BLANK, BARRL, BLANK},
                        {BLANK, BLANK, COYOS, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, S__R0, S__R1, S__R2, S__R3, S__R4, S__R5, BLANK, BLANK},
                        {BLANK, BLANK, S__00, S__01, S__02, S__03, S__04, S__05, BLANK, BLANK},
                        {BLANK, TUMBL, S__10, S__11, S__12, S__13, S__14, S__15, HEART, TUMBL},
                        {BLANK, BLANK, S__20, S__21, S__22, S__23, S__24, S__25, BLANK, BLANK},
                        {COYOS, SNAKE, S__F0, S__F1, S__F2, S__F2, S__F4, S__F5, COYOS, BLANK},
                        {G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2}
                },
                {
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BARRL, BLANK, BARRL, BLANK, BARRL, BLANK, BLANK, BARRL, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, TUMBL, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, TUMBL},
                        {BLANK, CACTU, COYOS, SNAKE, HEART, SNAKE, TUMBL, SNAKE, COYOS, BLANK},
                        {G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2}
                },
                {
                        {BARRL, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BARRL, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, SNAKE, BLANK, BLANK, BLANK, HEART, BLANK, BLANK, BLANK, TUMBL},
                        {BLANK, B__TL, B__TR, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {SNAKE, B__BL, B__BR, BLANK, CACTU, BLANK, COYOS, CACTU, COYOS, BLANK},
                        {G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2}
                }
        },
        {
                //MED
                {
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BARRL, BLANK, BLANK, BLANK, BARRL, BLANK, BLANK, COYOS, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, TUMBL, B__TL, B__TR},
                        {SNAKE, COYOS, CACTU, COYOS, HEART, SNAKE, CACTU, SNAKE, B__BL, B__BR},
                        {C__TL, C__TM, C__TM, C__TM, C__TM, C__TM, C__TM, C__TM, C__TM, C__TR},
                        {C__ML, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, C__MR},
                        {C_BL1, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, C_BR1},
                        {G__TR, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, G__TL}
                },
                {
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BARRL, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, TUMBL},
                        {SNAKE, BLANK, COYOS, BLANK, COYOS, CACTU, SNAKE, COYOS, HEART, BLANK},
                        {C__TL, C__TM, C__TM, C__TM, C__TM, C__TM, C__TM, C__TM, C__TM, C__TR},
                        {C__ML, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, C__MR},
                        {C_BL1, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, C_BR1},
                        {G_TM1, G_TM2, G__TR, SOLID, SOLID, SOLID, SOLID, G__TL, G_TM1, G_TM2}
                },
                {
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, TUMBL},
                        {BLANK, BLANK, BARRL, BLANK, COYOS, BLANK, COYOS, SNAKE, COYOS, BLANK},
                        {BLANK, HEART, BLANK, BLANK, S__R0, S__R1, S__R2, S__R3, S__R4, S__R5},
                        {COYOS, SNAKE, CACTU, BLANK, S__00, S__01, S__02, S__03, S__04, S__05},
                        {C__TL, C__TM, C__TM, C__TR, S__10, S__11, S__12, S__13, S__14, S__15},
                        {C__ML, SOLID, SOLID, C__MR, S__20, S__21, S__22, S__23, S__24, S__25},
                        {C_BL2, SOLID, SOLID, C_BR2, S__F0, S__F1, S__F2, S__F2, S__F4, S__F5},
                        {G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2}
                },
                {
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BARRL, BLANK, BARRL, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, HEART, BLANK, BLANK, BLANK, C__TL, C__TM, C__TR},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, COYOS, C__ML, SOLID, C__MR},
                        {COYOS, BLANK, BLANK, BLANK, BLANK, TUMBL, B__TL, B__TR, SOLID, C_BR1},
                        {G__TL, G__TR, BLANK, BLANK, BLANK, SNAKE, B__BL, B__BR, SOLID, C_BR2},
                        {G__ML, G__MR, BLANK, BLANK, BLANK, G__TL, G_TM1, G_TM2, G_TM1, G_TM2}
                },
                {
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, BLANK, BARRL, HEART, BLANK, BARRL, BLANK, BARRL, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {SNAKE, BLANK, COYOS, BLANK, CACTU, BLANK, COYOS, CACTU, TUMBL, BLANK},
                        {C__TL, C__TM, C__TM, C__TM, C__TM, C__TM, C__TM, C__TM, C__TM, C__TR},
                        {C__ML, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, C__MR},
                        {C_BL1, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, C_BR1},
                        {G__TR, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, G__TL}
                }
        },
        {
                //TALL
                {
                        {SNAKE, BLANK, BLANK, COYOS, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {C__TL, C__TM, C__TM, C__TR, BLANK, HEART, BLANK, BLANK, BLANK, BLANK},
                        {C__ML, SOLID, SOLID, C__MR, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {C_BL1, SOLID, SOLID, C_BR1, BLANK, SNAKE, CACTU, BLANK, COYOS, TUMBL},
                        {C_BL2, SOLID, SOLID, C__TM, C__TM, C__TM, C__TM, C__TM, C__TM, C__TR},
                        {C_BL1, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, C__MR},
                        {C_BL2, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, C_BR1},
                        {G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2}
                },
                {
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {BLANK, BLANK, COYOS, COYOS, HEART, SNAKE, BLANK, COYOS, SNAKE, BLANK},
                        {C__TL, C__TM, C__TM, C__TM, C__TM, C__TM, C__TM, C__TM, C__TM, C__TR},
                        {C__ML, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, C__MR},
                        {C_BL1, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, C_BR1},
                        {C_BL2, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, C_BR2},
                        {C_BL1, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, C_BR1},
                        {G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2}
                },
                {
                        {BLANK, BLANK, BLANK, BLANK, HEART, BLANK, BLANK, BLANK, BLANK, BLANK},
                        {SNAKE, SNAKE, BLANK, BLANK, BLANK, TUMBL, BLANK, COYOS, SNAKE, BLANK},
                        {C__TL, C__TM, C__TR, BLANK, BLANK, BLANK, C__TL, C__TM, C__TM, C__TR},
                        {C__ML, SOLID, C__MR, BLANK, BLANK, BLANK, C__ML, SOLID, SOLID, C__MR},
                        {C_BL1, SOLID, C_BR1, BLANK, BLANK, BLANK, C_BL1, SOLID, SOLID, C_BR1},
                        {C_BL2, SOLID, C_BR2, BLANK, BLANK, BLANK, C_BL2, SOLID, SOLID, C_BR2},
                        {C_BL1, SOLID, C_BR1, BLANK, BLANK, BLANK, C_BL1, SOLID, SOLID, C_BR1},
                        {G__TR, SOLID, C_BR2, BLANK, BLANK, BLANK, C_BL2, G__TL, G_TM1, G_TM2}
                },
                {
                        {BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, B__TL, B__TR},
                        {BLANK, COYOS, HEART, CACTU, SNAKE, COYOS, SNAKE, BLANK, B__BL, B__BR},
                        {C__TL, C__TM, C__TM, C__TM, C__TM, C__TR, B__TL, B__TR, B__TL, B__TR},
                        {C__ML, SOLID, SOLID, SOLID, SOLID, C__MR, B__BL, B__BR, B__BL, B__BR},
                        {C_BL1, SOLID, SOLID, SOLID, SOLID, C__TM, C__TM, C__TM, C__TM, C__TR},
                        {C_BL2, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, C__MR},
                        {C_BL1, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, C_BR1},
                        {G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2, G_TM1, G_TM2}
                },
                {
                        {BLANK, BLANK, BLANK, BLANK, BLANK, COYOS, BLANK, BLANK, COYOS, BLANK},
                        {BLANK, BLANK, BLANK, BLANK, BLANK, C__TL, C__TM, C__TM, C__TM, C__TR},
                        {HEART, BLANK, BLANK, BLANK, BLANK, C__ML, SOLID, SOLID, SOLID, C__MR},
                        {BLANK, SNAKE, CACTU, BLANK, BLANK, C_BL1, SOLID, SOLID, SOLID, C_BR1},
                        {C__TL, C__TM, C__TM, C__TM, C__TM, C__TM, C__TM, C__TR, SOLID, C_BR1},
                        {C__ML, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, C__MR, SOLID, C_BR2},
                        {C_BL1, SOLID, SOLID, SOLID, SOLID, SOLID, SOLID, C_BR1, SOLID, C_BR1},
                        {G_TM1, G_TM2, G__TR, SOLID, SOLID, G__TL, G_TM1, G_TM2, G_TM1, G_TM2}
                }
        }
};

//Game Objects
#define OBJECT_COUNT    12
#define OBJECT_TYPE        0
#define OBJECT_STATE    1
#define OBJECT_DIR        2
#define OBJECT_X        3
#define OBJECT_Y        4

#define OBJECT_BLANK    0
#define OBJECT_HEART    HEART
#define OBJECT_CACTUS    CACTU
#define OBJECT_SNAKE    SNAKE
#define OBJECT_BARREL    BARRL
#define OBJECT_TUMBLE    TUMBL
#define OBJECT_COYOTE    COYOS
#define OBJECT_POP        120

#define COYOTE_JUMPMAX    10
#define COYOTE_STANDING    0
#define COYOTE_JUMPING    COYOTE_JUMPMAX
#define COYOTE_FALLING    COYOTE_JUMPMAX + 1

#define TIME_BULL        120
#define    TIME_TORNADO    150
#define    TIME_BLINK        20
#define    TIME_JUMP        26

#define NEW_STATE        0
#define NEW_X            0
#define NEW_Y            0

uint8_t enemies[OBJECT_COUNT][5] = {
        //{ TYPE, STATE, X, Y }
        {OBJECT_BLANK, NEW_STATE, LEFT, NEW_X, NEW_Y},
        {OBJECT_BLANK, NEW_STATE, LEFT, NEW_X, NEW_Y},
        {OBJECT_BLANK, NEW_STATE, LEFT, NEW_X, NEW_Y},
        {OBJECT_BLANK, NEW_STATE, LEFT, NEW_X, NEW_Y},
        {OBJECT_BLANK, NEW_STATE, LEFT, NEW_X, NEW_Y},
        {OBJECT_BLANK, NEW_STATE, LEFT, NEW_X, NEW_Y},
        {OBJECT_BLANK, NEW_STATE, LEFT, NEW_X, NEW_Y},
        {OBJECT_BLANK, NEW_STATE, LEFT, NEW_X, NEW_Y},
        {OBJECT_BLANK, NEW_STATE, LEFT, NEW_X, NEW_Y},
        {OBJECT_BLANK, NEW_STATE, LEFT, NEW_X, NEW_Y},
        {OBJECT_BLANK, NEW_STATE, LEFT, NEW_X, NEW_Y},
        {OBJECT_BLANK, NEW_STATE, LEFT, NEW_X, NEW_Y}
};

//Gameplay Values
#define STATE_PROGRAMMING    0
#define STATE_ART            1
#define STATE_TITLE            2
#define STATE_HIGHSCORE        3
#define STATE_STARTGAME        10
#define STATE_LEVELINTRO    11
#define STATE_GAME            12
#define STATE_DIED            13
#define STATE_GAMEEND        14
#define STATE_NEWHIGHSCORE    20
#define STATE_GAMEOVER        21
#define LEVEL_EDGE            62
#define PLAYER_X_OFFSET        4
#define WHIP_Y_OFFSET        7
#define WHIP_X_OFFSET        5
int menustate = STATE_PROGRAMMING;
int level = 1;
int levellength = 1;
int sectionheight = LOWEST;
int score = 0;
int highscore = 0;

//Player Values
#define PLAYERSIZE            16
#define WHIPWIDTH            8
#define WHIPBOX                5
#define STARTLIVES            3
#define JUMPMAX                10
#define FALLCURVEMAX        8
#define JUMPCURVEMAX        8
#define RUNCURVEMAX            8
#define WHIPMAX                16
#define HURTMAX                20
#define MAXHEALTH            5
#define STARTX                6
#define STARTY                0 - PLAYERSIZE
#define MAXY                100
#define PLAYER_STANDING        0
#define PLAYER_JUMPING        10
#define PLAYER_FALLING        20
#define PLAYER_KNOCKBACK    30
#define PLAYER_THROWBACK    40
#define PLAYER_DEAD            50
int playerstate = PLAYER_FALLING;
int playerdirection = RIGHT;
int lives = STARTLIVES + 1;
int health = MAXHEALTH;
int jumptimer = JUMPMAX;
int falltimer = 0;
int runtimer = 0;
const uint8_t jumpcurve[JUMPCURVEMAX + 1] = {3, 3, 3, 2, 2, 2, 2, 1, 1};
const uint8_t fallcurve[FALLCURVEMAX + 1] = {3, 2, 2, 2, 1, 1, 1, 1, 1};
const uint8_t runcurve[RUNCURVEMAX + 1] = {1, 1, 1, 1, 1, 2, 2, 2, 2};
int hurttimer = 0;
int whiptimer = 0;
int deathcounter = 0;
int16_t playerx = 0;
int16_t playery = 0;
int16_t whipx = 0;
int16_t whipy = 0;
int distance = 0;
int offset = 0;
uint8_t movingright = 0;
uint8_t edge = LEVEL_EDGE;

//Enemy Values
#define BOSS_START_Y    24
#define BOSS_MAXHEALTH    16
uint8_t bosstimer = 0;
bool bossosc = false;
int16_t bossx = 0;
int16_t bossy = 0;
int bosshurt = 0;
int bosshealth = -1;
bool bosstype = true;

//Environmental Values
#define MOONY        9
#define MOONSIZE    16
#define MESAY        19
#define MESASIZE    32
#define MESABACKWIDTH    27
#define MESABACKHEIGHT    8
bool mesatype = 0;
char mesadistance = 119;
char moondistance = 90;
char screenshake = 0;

//Sound Functions
const byte musicfight[] PROGMEM = {
        0x90, 65, 0x91, 30, 0, 136, 0x92, 64, 0x80, 0, 136, 0x90, 59, 0x82, 0, 136, 0x92, 58, 0x80, 0x81, 0, 136, 0x90,
        51, 0x91, 29,
        0x82, 0, 136, 0x92, 50, 0x93, 27, 0x80, 0x81, 0, 136, 0x90, 52, 0x82, 0x83, 0, 136, 0x91, 28, 0x90, 51, 0, 136,
        0x90, 46, 0x81,
        0, 136, 0x91, 45, 0x92, 28, 0x80, 0, 136, 0x90, 46, 0x81, 0, 136, 0x91, 47, 0x80, 0x82, 0, 136, 0x90, 27, 0x91,
        46, 0, 136,
        0x92, 47, 0x81, 0, 136, 0x91, 46, 0x82, 0, 136, 0x92, 47, 0x80, 0x81, 0, 136, 0x90, 51, 0x91, 30, 0x82, 0, 136,
        0x92, 50, 0x80,
        0, 136, 0x90, 51, 0x82, 0, 136, 0x92, 50, 0x80, 0x81, 0, 136, 0x90, 29, 0x91, 51, 0x82, 0, 136, 0x90, 27, 0x91,
        50, 0, 136,
        0x92, 51, 0x80, 0x81, 0, 136, 0x90, 50, 0x91, 28, 0x82, 0, 136, 0x91, 46, 0x80, 0, 136, 0x90, 45, 0x92, 28,
        0x81, 0, 136, 0x91, 46,
        0x80, 0, 136, 0x90, 47, 0x81, 0x82, 0, 136, 0x91, 30, 0x90, 46, 0, 136, 0x92, 47, 0x80, 0, 136, 0x90, 46, 0x82,
        0, 136, 0x92, 48,
        0x80, 0x81, 0, 136, 0x90, 53, 0x91, 30, 0x82, 0, 136, 0x92, 52, 0x80, 0, 136, 0x90, 53, 0x82, 0, 136, 0x92, 52,
        0x80, 0x81, 0, 136,
        0x90, 29, 0x91, 53, 0x82, 0, 136, 0x90, 27, 0x91, 52, 0, 136, 0x92, 53, 0x80, 0x81, 0, 136, 0x90, 52, 0x91, 28,
        0x82, 0, 136,
        0x91, 44, 0x80, 0, 136, 0x90, 43, 0x92, 28, 0x81, 0, 136, 0x91, 44, 0x80, 0, 136, 0x90, 45, 0x81, 0x82, 0, 136,
        0x91, 26, 0x90, 44,
        0, 136, 0x92, 45, 0x80, 0, 136, 0x90, 44, 0x82, 0, 136, 0x92, 46, 0x80, 0x81, 0, 136, 0x90, 50, 0x91, 29, 0x82,
        0, 136, 0x92, 49,
        0x80, 0, 136, 0x90, 50, 0x82, 0, 136, 0x92, 49, 0x80, 0x81, 0, 136, 0x90, 50, 0x91, 28, 0x82, 0, 136, 0x90, 26,
        0x91, 49, 0, 136,
        0x92, 50, 0x80, 0x81, 0, 136, 0x90, 49, 0x91, 27, 0x82, 0, 136, 0x91, 45, 0x80, 0, 136, 0x90, 44, 0x92, 27,
        0x81, 0, 136, 0x91, 45,
        0x80, 0, 136, 0x90, 46, 0x81, 0x82, 0, 136, 0x91, 30, 0x90, 45, 0, 136, 0x92, 46, 0x80, 0, 136, 0x90, 45, 0x82,
        0, 136, 0x92, 47,
        0x80, 0x81, 0, 136, 0x82, 0xf0
};

const byte musicbackground[] PROGMEM = {
        0x90, 33, 0, 214, 0x80, 0, 214, 0x90, 33, 0, 214, 0x91, 40, 0x80, 0, 214, 0x90, 45, 0x81, 1, 172, 0x80, 0, 214,
        0x90, 33,
        0, 214, 0x80, 0, 214, 0x90, 33, 0, 214, 0x91, 33, 0x80, 0x81, 0, 214, 0x90, 40, 0, 214, 0x91, 45, 0x80, 0, 214,
        0x81, 0, 214,
        0x90, 40, 0, 214, 0x80, 0, 214, 0x90, 31, 0, 214, 0x80, 0, 214, 0x90, 31, 0, 214, 0x91, 38, 0x80, 0, 214, 0x90,
        43, 0x81,
        1, 172, 0x80, 0, 214, 0x90, 31, 0, 214, 0x80, 0, 214, 0x90, 31, 0, 214, 0x91, 31, 0x80, 0x81, 0, 214, 0x90, 38,
        0, 214,
        0x91, 43, 0x80, 0, 214, 0x81, 0, 214, 0x90, 38, 0, 214, 0x80, 0, 214, 0x90, 31, 0, 214, 0x91, 41, 0x80, 0, 214,
        0x90, 31,
        0x81, 0, 214, 0x91, 36, 0x80, 0, 214, 0x90, 41, 0x81, 0, 214, 0x80, 0, 214, 0x90, 36, 0, 214, 0x80, 0, 214,
        0x90, 38, 0, 214,
        0x91, 43, 0x80, 0, 214, 0x81, 0, 214, 0x90, 38, 0, 214, 0x91, 43, 0x80, 0, 214, 0x90, 36, 0x81, 0, 214, 0x91,
        38, 0x80, 0, 214,
        0x90, 39, 0x81, 0, 214, 0x80, 0xf0
};

const byte musicgameover[] PROGMEM = {
        0x90, 86, 0, 214, 0x91, 85, 0x80, 0, 214, 0x90, 84, 0x81, 0, 214, 0x91, 85, 0x80, 0, 214, 0x90, 74, 0x81, 0,
        214, 0x91, 73,
        0x80, 0, 214, 0x90, 72, 0x81, 0, 214, 0x91, 73, 0x80, 0, 214, 0x90, 62, 0x81, 1, 172, 0x91, 61, 0x80, 1, 172,
        0x90, 59, 0x81,
        0, 214, 0x80, 0, 214, 0x90, 58, 1, 172, 0x80, 0xf0
};

const byte musichighscore[] PROGMEM = {
        0x90, 78, 0, 111, 0x91, 79, 0x80, 0, 111, 0x90, 82, 0x81, 0, 111, 0x80, 0, 111, 0x90, 81, 0, 111, 0x91, 82,
        0x80, 0, 111,
        0x90, 85, 0x81, 0, 111, 0x80, 0, 111, 0x90, 86, 0, 111, 0x80, 0, 111, 0x90, 89, 0, 222, 0x91, 87, 0x80, 0, 111,
        0x90, 90,
        0x81, 0, 222, 0x91, 92, 0x80, 0, 111, 0x81, 0xf0
};

#define SOUND_SHORT    100
#define SOUND_MED    175
#define SOUND_LONG    250
#define SOUND_MENU    400
#define SOUND_NEW    700
#define SOUND_JUMP    650
#define SOUND_WHIP    500
#define SOUND_HEART    600
#define SOUND_DEATH    300
#define SOUND_HURT    360
#define SOUND_BOSS    200
#define SOUND_STOMP    100
#define SOUND_COYO    550
#define SOUND_KILL    700
uint16_t currentsong = static_cast<uint8_t>(*musicbackground);

void sound(int pitch, long duration) {
    if (arduboy.audio.enabled()) {
        tunes.tone(pitch, duration);
    }
}

void drawsprite(uint16_t x, uint16_t y, const uint8_t *bitmap, uint8_t w, uint8_t h, uint8_t mode) {
    if (screenshake > 0) {
        y += frame % 3 - 1;
    }
    arduboy.drawBitmap(x, y, bitmap, w, h, mode);
}

void clearobjects() {
    int i = 0;
    while (i < OBJECT_COUNT) {
        enemies[i][OBJECT_TYPE] = OBJECT_BLANK;
        enemies[i][OBJECT_STATE] = NEW_STATE;
        i++;
    }
}

void drawborder() {
    arduboy.drawBitmap(0, 0, border[0], 16, 16, WHITE);
    arduboy.drawBitmap(WIDTH - 16, 0, border[1], 16, 16, WHITE);
    arduboy.drawBitmap(0, HEIGHT - 16, border[2], 16, 16, WHITE);
    arduboy.drawBitmap(WIDTH - 16, HEIGHT - 16, border[3], 16, 16, WHITE);

    arduboy.drawFastVLine(2, 16, 32);
    arduboy.drawFastVLine(WIDTH - 3, 16, 32);

    arduboy.drawFastHLine(16, 2, 96);
    arduboy.drawFastHLine(16, HEIGHT - 3, 96);
}

void loopmusic() {
    if (!tunes.playing()) {
        tunes.playScore(&currentsong);
    }
}

//Draw Gameplay Functions
void drawbackground() {
    if (moondistance < 0 - MESASIZE) {
        moondistance = WIDTH - 1;
    }
    if (mesadistance < 0 - MESASIZE) {
        mesadistance = WIDTH - 1;
        mesatype = !mesatype;
    }
    arduboy.drawBitmap(moondistance, MOONY, moon, MOONSIZE, MOONSIZE, WHITE);

    arduboy.drawBitmap(mesadistance + 6, MESAY + 1, mesa_back[mesatype], MESABACKWIDTH, MESABACKHEIGHT, BLACK);
    arduboy.drawBitmap(mesadistance, MESAY, mesa[mesatype], MESASIZE, MESASIZE, WHITE);
}

void drawlevel() {
    for (int y = 0; y < 8; y++) {
        for (int x = 0; x < PART_WIDTH * 3; x++) {
            if (currentlevel[y][x] < BOUND_DRAW) {
                drawsprite(x * 8 - offset, y * 8, tiles[BACK][currentlevel[y][x]], 8, 8, BLACK);
                drawsprite(x * 8 - offset, y * 8, tiles[FRONT][currentlevel[y][x]], 8, 8, WHITE);
            }
        }
    }
}

void drawui() {
    //Draw Lives
    arduboy.drawBitmap(0, 0, hat, 16, 8, WHITE);
    arduboy.setCursor(17, 0);
     arduboy.print(lives);

    //DRAW BLACK BEHIND HAT AND SCORE

    //Draw boss health
    if (bosshealth > 0) {
        for (char i = 0; i < bosshealth; i++) {
            arduboy.drawBitmap(WIDTH - 4 - i * 4, 58, tiles[BACK][SOLID], 4, 8, BLACK);
            arduboy.drawBitmap(WIDTH - 4 + 1 - i * 4, 59, tiles[BACK][SOLID], 3, 8, WHITE);
        }
    }

    //Draw Score
    arduboy.drawBitmap(0, 58, tiles[BACK][G_TM1], 22, 8, BLACK);
    arduboy.drawBitmap(0, 59, scorelabel, 21, 8, WHITE);
    char buffer[10];
    ltoa(score, buffer, 10);
    char charlength = strlen(buffer);
    for (int i = 0; i < charlength; i++) {
        arduboy.drawBitmap(22 + i * 4, 58, tiles[BACK][SOLID], 4, 8, BLACK);
        arduboy.drawBitmap(22 + i * 4, 59, numbers + (int) (buffer[i] - 48) * 3, 3, 8, WHITE);
    }

    //Draw Hearts
    for (int i = 0; i < health; i++) {
        arduboy.drawBitmap(i * 9 + 23, 0, heart[BACK][0], 9, 8, BLACK);
        arduboy.drawBitmap(i * 9 + 23, 0, heart[FRONT][0], 8, 8, WHITE);
    }

    if (screenshake > 0) {
        screenshake--;
    }
}

void drawplayer() {
    bool draw = true;
    if (playerstate == PLAYER_KNOCKBACK || playerstate == PLAYER_DEAD) {
        draw = frame % 5;
    }
    if (draw) {
        if (playerstate == PLAYER_STANDING) {
            arduboy.drawBitmap(playerx - PLAYER_X_OFFSET, playery,
                               cowboy[BACK][runtimer > 0 ? (frame / 10) % 2 : 0][playerdirection], 16, 16, BLACK);
            arduboy.drawBitmap(playerx - PLAYER_X_OFFSET, playery,
                               cowboy[FRONT][runtimer > 0 ? (frame / 10) % 2 : 0][playerdirection], 16, 16, WHITE);
        } else {
            arduboy.drawBitmap(playerx - PLAYER_X_OFFSET, playery, cowboy[BACK][1][playerdirection], 16, 16, BLACK);
            arduboy.drawBitmap(playerx - PLAYER_X_OFFSET, playery, cowboy[FRONT][1][playerdirection], 16, 16, WHITE);
        }

        if (whiptimer > 0) {
            if (playerdirection) {
                //RIGHT
                arduboy.drawBitmap(playerx + PLAYERSIZE - PLAYER_X_OFFSET - WHIP_X_OFFSET, playery + WHIP_Y_OFFSET,
                                   whip[BACK][3 - whiptimer / (WHIPMAX / 4)][RIGHT], 21, 8, BLACK);
                arduboy.drawBitmap(playerx + PLAYERSIZE - PLAYER_X_OFFSET - WHIP_X_OFFSET, playery + WHIP_Y_OFFSET,
                                   whip[FRONT][3 - whiptimer / (WHIPMAX / 4)][RIGHT], 21, 8, WHITE);
                whipx = (WHIPWIDTH - whiptimer) + playerx + PLAYERSIZE;
                whipy = playery + WHIP_Y_OFFSET + 2;
            } else {
                //LEFT
                arduboy.drawBitmap(playerx - WHIPWIDTH - PLAYER_X_OFFSET - WHIP_X_OFFSET - 4, playery + WHIP_Y_OFFSET,
                                   whip[BACK][3 - whiptimer / (WHIPMAX / 4)][LEFT], 21, 8, BLACK);
                arduboy.drawBitmap(playerx - WHIPWIDTH - PLAYER_X_OFFSET - WHIP_X_OFFSET - 4, playery + WHIP_Y_OFFSET,
                                   whip[FRONT][3 - whiptimer / (WHIPMAX / 4)][LEFT], 21, 8, WHITE);
                whipx = whiptimer + playerx - PLAYERSIZE - 10;
                whipy = playery + WHIP_Y_OFFSET + 2;
            }
        }
    }
}

//Draw Menu Functions
void drawprogramming() {
    arduboy.drawBitmap(8, 8, me, 48, 48, WHITE);
    arduboy.setCursor(75, 8);
    arduboy.print("Jonathan");
    arduboy.setCursor(87, 18);
    arduboy.print("Holmes");
    arduboy.setCursor(86, 38);
    arduboy.print("@crait");
    arduboy.setCursor(68, 49);
    arduboy.print("crait.net");
}

void drawart() {
    arduboy.drawBitmap(8, 8, greycove, 48, 48, WHITE);
    arduboy.setCursor(68, 8);
    arduboy.print("Pixel Art");
    arduboy.setCursor(74, 18);
    arduboy.print("By Mario");
    arduboy.setCursor(92, 28);
    arduboy.print("Vespa");
    arduboy.setCursor(74, 47);
    arduboy.print("greycove");
}

void drawtitle() {
    arduboy.drawBitmap(4, 8, title_char_head, 40, 24, WHITE);
    arduboy.drawBitmap(-4, 32, title_char_body, 56, 31, WHITE);

    arduboy.drawBitmap(46, 1, title_top, 80, 16, WHITE);
    arduboy.drawBitmap(58, 17, title_bot, 66, 24, WHITE);

    if (frame > 30) {
        arduboy.drawBitmap(55, 40, title_start, 69, 16, WHITE);
    }

    if (casting) {
        arduboy.drawBitmap(53, 58, castinglabel, 28, 8, WHITE);
    }
    if (swap) {
        arduboy.drawBitmap(90, 58, swaplabel, 6, 8, WHITE);
    }

    arduboy.drawBitmap(112, 56, blabel, 5, 8, WHITE);
    arduboy.drawBitmap(120, 56, vol[arduboy.audio.enabled()], 8, 8, WHITE);
}

void drawnewhighscores() {
    drawborder();
    if (frame / 6 < 7) {
        arduboy.drawBitmap(7, LABEL_TOP_Y, newhighscorelabel, 115, 16, WHITE);
    }
    arduboy.setCursor(63 - (highscore < 10 ? 3 : (highscore < 100 ? 6 : 9)), LABEL_SUB_Y);
     arduboy.print(highscore);
}

void drawhighscores() {
    drawborder();
    arduboy.drawBitmap(25, LABEL_TOP_Y, highscorelabel, 79, 16, WHITE);
    arduboy.setCursor(63 - (highscore < 10 ? 3 : (highscore < 100 ? 6 : 9)), LABEL_SUB_Y);
     arduboy.print(highscore);
}

void drawgameover() {
    drawborder();
    arduboy.drawBitmap(25, LABEL_TOP_Y, gameoverlabel, 78, 16, WHITE);
    arduboy.setCursor(63 - 21 - (score < 10 ? 3 : (score < 100 ? 6 : 9)), LABEL_SUB_Y);
    arduboy.print("SCORE: ");
    arduboy.print(score);
}

void drawlevelintro() {
    drawborder();
    arduboy.drawBitmap(41, LABEL_TOP_Y, levellabel, 43, 16, WHITE);
    arduboy.setCursor(63 - (level < 10 ? 3 : 6), LABEL_SUB_Y);
    arduboy.print((int)level);
}

void hotswapparts() {
    for (int y = 0; y < 8; y++) {
        for (int x = PART_WIDTH; x < PART_WIDTH * 3; x++) {
            currentlevel[y][x - PART_WIDTH] = currentlevel[y][x];
        }
    }

    levellength--;
    if (levellength < 0) {
        generatepart(-1);
    } else {
        generatepart(2);
    }
    if (levellength == -3) {
        enterbossfight();
    }
}

void moveright() {
    runtimer += 1;
    if (runtimer > RUNCURVEMAX) {
        runtimer = RUNCURVEMAX;
    }
    if (distance < edge || bosshealth == 0) {
        playerx += runcurve[runtimer];
        distance += runcurve[runtimer];
    } else {
        moondistance -= (frame % 5 == 0);
        mesadistance -= (frame % 3 == 0);
        movingright = runcurve[runtimer];
        offset += runcurve[runtimer];
        if (offset >= PART_WIDTH * 8) {
            offset = offset - (PART_WIDTH * 8);
            hotswapparts();
        }
    }
}

void moveleft() {
    runtimer += 1;
    if (runtimer > RUNCURVEMAX) {
        runtimer = RUNCURVEMAX;
    }
    if (playerx > 1) {
        playerx -= runcurve[runtimer];
        distance -= runcurve[runtimer];
    }
}

void jumping() {
    if (jumptimer <= JUMPCURVEMAX) {
        playery -= jumpcurve[jumptimer];
    } else {
        playery -= jumpcurve[JUMPCURVEMAX];
    }
    jumptimer += 1;
    if (jumptimer >= JUMPMAX) {
        jumptimer = 0;
        playerstate = PLAYER_FALLING;
    }
}

void falling() {
    if (checkunder() && playery % 8 <= 4) {
        playerstate = PLAYER_STANDING;
        falltimer = FALLCURVEMAX;
        jumptimer = 0;
        playery -= (playery + PLAYERSIZE) % 8;
    } else {
        playery += fallcurve[falltimer];
        if (falltimer > 0) {
            falltimer -= 1;
        }
    }
}

void knockback() {
    whiptimer = 0;

    if ((HURTMAX - hurttimer) <= JUMPCURVEMAX) {
        playery -= jumpcurve[HURTMAX - hurttimer];
    } else {
        playery -= frame % 2;
    }
    if (hurttimer > 0) {
        hurttimer--;
    } else {
        playerstate = PLAYER_FALLING;
        hurttimer = 0;
    }
    if (playerstate == PLAYER_KNOCKBACK && frame % 5 < 4) {
        if (playerdirection == RIGHT) {
            if (!checkleft()) {
                moveleft();
            }
        } else {
            if (!checkright()) {
                moveright();
            }
        }
    }
    if (playerstate == PLAYER_THROWBACK) {
        moveleft();
        moveleft();
    }
}

//Object Handling
int spawn(int object, unsigned int x, unsigned int y) {
    int i = 0;
    while (i < OBJECT_COUNT) {
        if (enemies[i][OBJECT_TYPE] == OBJECT_BLANK) {
            enemies[i][OBJECT_TYPE] = object;
            enemies[i][OBJECT_STATE] = 0;
            enemies[i][OBJECT_X] = x;
            enemies[i][OBJECT_Y] = y;
            return i;
        }
        i++;
    }
    return i;
}

//Level Generation Functions
void generatepart(char section) {
    bool ending = false;
    int part = random(PARTS);
    if (sectionheight == LOWEST) {
        sectionheight = LOW1;
        part = 0;
    } else {
        if (sectionheight < MED) {
            sectionheight = random(LOW1, MED + 1);
        } else {
            sectionheight = random(LOW2, TALL + 1);
        }
        if (section < 0) {
            ending = true;
            part = 0;
            sectionheight = LOW1;
            section = 2;
        }
    }
    for (int y = 0; y < 8; y++) {
        for (int x = 0; x < PART_WIDTH; x++) {
            int tile = levelparts[sectionheight][part][y][x];
            if (tile > BOUND_OTHER) {
                if (tile == HEART) {
                    if (levellength % 7 == 2) {
                        spawn(tile, (x + section * PART_WIDTH) * 8 + BUFFER_MED, y * 8);
                    }
                    tile = BLANK;
                } else if (random(0, 115) < (level + 4)) {
                    char g = y * 8;
                    if (tile == BARRL) {
                        g = -12;
                    }
                    if (section > 0 && !ending) {
                        spawn(tile, (x + section * PART_WIDTH) * 8 + BUFFER_MED, g);
                    }
                    tile = BLANK;
                }
            }
            currentlevel[y][x + section * PART_WIDTH] = tile;
        }
    }
}

void generatelevel() {
    sectionheight = LOWEST;
    generatepart(0);
    generatepart(1);
    generatepart(2);
}

void drawbull() {
    drawsprite(BUFFER_BOSS + bossx - 1, bossy + 15, boss_bull_legs_back[bossosc], 17, 16, BLACK);
    drawsprite(BUFFER_BOSS + bossx, bossy + 16, boss_bull_legs[bossosc], 16, 16, WHITE);

    drawsprite(BUFFER_BOSS + bossx - 8, bossy - 1, boss_bull_stand_back, 24, 18, BLACK);
    drawsprite(BUFFER_BOSS + bossx - 8, bossy, boss_bull_stand, 24, 16, WHITE);
}

void drawbullhurt() {
    drawsprite(BUFFER_BOSS + bossx - 1, bossy + 15, boss_bull_legs_back[1], 17, 16, BLACK);
    drawsprite(BUFFER_BOSS + bossx, bossy + 16, boss_bull_legs[1], 16, 16, WHITE);

    drawsprite(BUFFER_BOSS + bossx, bossy - 1, boss_bull_hit_back, 16, 16, BLACK);
    drawsprite(BUFFER_BOSS + bossx, bossy, boss_bull_hit, 16, 16, WHITE);
}

void drawtornado() {
    drawsprite(BUFFER_BOSS + bossx - 1, bossy + 16, boss_tornado_back[(frame / 5) % 2], 18, 16, BLACK);
    drawsprite(BUFFER_BOSS + bossx + bossx % 2 - 1, bossy + 16 - 16, boss_tornado_back[(frame / 5) % 2 + 2], 18, 16,
               BLACK);
    drawsprite(BUFFER_BOSS + bossx + bossx % 4 - 1, bossy + 16 - 32, boss_tornado_back[(frame / 5 + 1) % 2 + 2], 18, 16,
               BLACK);
    drawsprite(BUFFER_BOSS + bossx + bossx % 6 - 1, bossy + 16 - 48, boss_tornado_back[(frame / 5) % 2 + 2], 18, 16,
               BLACK);

    drawsprite(BUFFER_BOSS + bossx, bossy + 16, boss_tornado[(frame / 5) % 2], 16, 16, WHITE);
    drawsprite(BUFFER_BOSS + bossx + bossx % 2, bossy + 16 - 16, boss_tornado[(frame / 5) % 2 + 2], 16, 16, WHITE);
    drawsprite(BUFFER_BOSS + bossx + bossx % 4, bossy + 16 - 32, boss_tornado[(frame / 5 + 1) % 2 + 2], 16, 16, WHITE);
    drawsprite(BUFFER_BOSS + bossx + bossx % 6, bossy + 16 - 48, boss_tornado[(frame / 5) % 2 + 2], 16, 16, WHITE);
}

void hearts(int i) {
    arduboy.drawBitmap(enemies[i][OBJECT_X] - BUFFER_MED - 1, enemies[i][OBJECT_Y] - 2, heart[BACK][(frame / 10) % 6],
                       10, 8, BLACK);
    arduboy.drawBitmap(enemies[i][OBJECT_X] - BUFFER_MED - 1, enemies[i][OBJECT_Y] - 2, heart[FRONT][(frame / 10) % 6],
                       10, 8, WHITE);
}

//Game Functions
void resetgame() {
    menustate = STATE_GAME;
    score = 0;
    level = 1;
    lives = STARTLIVES + 1;
}

void clearvars() {
    currentsong = static_cast<uint8_t>(*musicbackground);
    tunes.playScore(musicbackground);

    levellength = 7 + level;

    playerstate = PLAYER_FALLING;
    playerdirection = RIGHT;
    jumptimer = JUMPMAX;
    whiptimer = 0;
    hurttimer = 0;
    falltimer = 0;
    runtimer = 0;
    playerx = STARTX;
    playery = STARTY;
    distance = STARTX;
    edge = LEVEL_EDGE;
    deathcounter = 0;

    bosstimer = 0;
    bosshealth = -1;
    bossosc = false;

    screenshake = 0;
    generatelevel();
    offset = 0;

    clearobjects();
}

void newlife() {
    if (lives > 0) {
        lives--;

        clearvars();
        health = MAXHEALTH;

        menustate = STATE_LEVELINTRO;
    } else {
        menustate = STATE_GAMEEND;
    }

}

void nextlevel() {
    sound(SOUND_NEW, SOUND_BOSS);
    score += 25;
    bosstype = !bosstype;
    if (level < 99) {
        level += 1;
    }
    clearvars();
    menustate = STATE_LEVELINTRO;

}

void endgame() {
    if (score > highscore) {
        tunes.playScore(musichighscore);
        menustate = STATE_NEWHIGHSCORE;
        highscore = score;
        EEPROM.put(SAVELOCATION, highscore);
    } else {
        tunes.playScore(musicgameover);
        menustate = STATE_GAMEOVER;
    }
}

//Movement Functions
char gettile(char x, char y) {
    if (y < 0) {
        return BLANK;
    }
    if (y >= 64) {
        return BLANK;
    }
    return currentlevel[y / 8][(x + offset) / 8];
}

bool checkcollision(char x, char y, char boundry) {
    return (gettile(x, y) < boundry);
}

bool checkunder() {
    if (checkcollision(playerx, playery + PLAYERSIZE, BOUND_PLATFORM) ||
        checkcollision(playerx + (PLAYERSIZE / 2), playery + PLAYERSIZE, BOUND_PLATFORM)) {
        return true;
    } else {
        return false;
    }
}

bool checkright() {
    return (checkcollision(playerx + (PLAYERSIZE / 2) + runcurve[runtimer], playery + (PLAYERSIZE / 2), BOUND_WALL) ||
            playerx > 120);
}

bool checkleft() {
    return checkcollision(playerx - runcurve[runtimer], playery + (PLAYERSIZE / 2), BOUND_WALL);
}

void checkfalling() {
    if (checkunder() == false) {
        playerstate = PLAYER_FALLING;
    }
}

void gameinput() {
    if (bosshealth == 0) {
        return;
    } else if (playerstate == PLAYER_DEAD) {
        deathcounter++;
        if (deathcounter >= 50) {
            menustate = STATE_DIED;
        }
        return;
    } else {
        if (playerstate != PLAYER_KNOCKBACK && playerstate != PLAYER_THROWBACK) {
            if (arduboy.pressed(RIGHT_BUTTON)) {
                if (whiptimer == 0) {
                    playerdirection = RIGHT;
                }
                if (playerstate != PLAYER_KNOCKBACK && !checkright()) {
                    moveright();
                }
            } else if (arduboy.pressed(LEFT_BUTTON)) {
                if (whiptimer == 0) {
                    playerdirection = LEFT;
                }
                if (playerstate != PLAYER_KNOCKBACK && !checkleft()) {
                    moveleft();
                }
            } else {
                runtimer = 0;
            }

            if (arduboy.justPressed(jumpbutton) && playerstate == PLAYER_STANDING) {
                playerstate = PLAYER_JUMPING;
                sound(SOUND_JUMP, SOUND_MED);
            }
            if (arduboy.justPressed(whipbutton) && whiptimer == 0) {
                whiptimer = WHIPMAX;
                sound(SOUND_WHIP, SOUND_LONG);
            }
        }
        return;
    }
}

void playerphysics() {
    if (playery >= MAXY && bosshealth != 0) {
        health = -1;
        return;
    }
    if (whiptimer > 0) {
        whiptimer -= 1;
    } else {
        whipx = 0 - BUFFER_MED - WHIPWIDTH;
        whipy = 0;
    }
    switch (playerstate) {
        break;
        case PLAYER_STANDING:
            checkfalling();
            break;
        case PLAYER_JUMPING:
            jumping();
            break;
        case PLAYER_FALLING:
            falling();
            break;
        case PLAYER_KNOCKBACK:
        case PLAYER_THROWBACK:
            knockback();
            break;
    }
}

void burst(int i) {
    enemies[i][OBJECT_TYPE] = OBJECT_POP;
    enemies[i][OBJECT_STATE] = 0;
}

void coyotelogic(int i) {
    if ((enemies[i][OBJECT_X] - BUFFER_MED) < 130) {
        if (enemies[i][OBJECT_STATE] == COYOTE_STANDING) {
            enemies[i][OBJECT_DIR] = (enemies[i][OBJECT_X] - BUFFER_MED < playerx);
            if (random(0, 100 - (level / 2)) == 0) {
                sound(SOUND_COYO, SOUND_MED);
                enemies[i][OBJECT_STATE] += 1;
            }
        }
        if (enemies[i][OBJECT_STATE] > COYOTE_STANDING) {
            bool blocked = false;
            if (enemies[i][OBJECT_DIR]) {
                blocked = checkcollision(enemies[i][OBJECT_X] - BUFFER_MED + (PLAYERSIZE / 2) + 3, enemies[i][OBJECT_Y],
                                         BOUND_WALL);
            } else {
                blocked = checkcollision(enemies[i][OBJECT_X] - BUFFER_MED - 3, enemies[i][OBJECT_Y], BOUND_WALL);
            }
            if (!blocked) {
                if (enemies[i][OBJECT_STATE] < RUNCURVEMAX) {
                    enemies[i][OBJECT_X] += ((enemies[i][OBJECT_DIR] * 2) - 1) * runcurve[enemies[i][OBJECT_STATE] - 1];
                } else {
                    enemies[i][OBJECT_X] += ((enemies[i][OBJECT_DIR] * 2) - 1) * runcurve[RUNCURVEMAX - 1];
                }
            }
            if (enemies[i][OBJECT_STATE] < COYOTE_FALLING) {
                if (enemies[i][OBJECT_Y] > 5) {
                    if (enemies[i][OBJECT_STATE] < JUMPCURVEMAX) {
                        enemies[i][OBJECT_Y] -= jumpcurve[enemies[i][OBJECT_STATE] - 1];
                    } else {
                        enemies[i][OBJECT_Y] -= jumpcurve[JUMPCURVEMAX - 1];
                    }
                }
                enemies[i][OBJECT_STATE] += 1;
            } else {
                if (checkcollision(enemies[i][OBJECT_X] - BUFFER_MED, enemies[i][OBJECT_Y] + PLAYERSIZE / 2,
                                   BOUND_PLATFORM) ||
                    checkcollision(enemies[i][OBJECT_X] - BUFFER_MED + (PLAYERSIZE / 2),
                                   enemies[i][OBJECT_Y] + PLAYERSIZE / 2, BOUND_PLATFORM)) {
                    enemies[i][OBJECT_STATE] = COYOTE_STANDING;
                    enemies[i][OBJECT_Y] = enemies[i][OBJECT_Y] - (enemies[i][OBJECT_Y] % 8);
                } else {
                    enemies[i][OBJECT_Y] += 2;
                }
            }
        }
        drawsprite(enemies[i][OBJECT_X] - 3 - BUFFER_MED, enemies[i][OBJECT_Y] - 8,
                   coyote[BACK][enemies[i][OBJECT_STATE] != COYOTE_STANDING][enemies[i][OBJECT_DIR]], 16, 16, BLACK);
        drawsprite(enemies[i][OBJECT_X] - 3 - BUFFER_MED, enemies[i][OBJECT_Y] - 8,
                   coyote[FRONT][enemies[i][OBJECT_STATE] != COYOTE_STANDING][enemies[i][OBJECT_DIR]], 16, 16, WHITE);
    }
}

void bulllogic() {
    bosstimer -= 1;
    if (bosstimer <= level + 1 && bosstimer < OBJECT_COUNT) {
        spawn(OBJECT_BARREL, (random(0, BUFFER_BOSS / 16) + BUFFER_MED / 16) * 16,
              (random(-40, 0) / 8 * 8) - OBJECT_COUNT);
    }
    if (bosstimer == TIME_JUMP) {
        bossosc = true;
        bossy -= 4;
    }
    if (bossosc) {
        if (bosstimer > TIME_JUMP / 2) {
            bossy -= 4;
        } else {
            bossy += 4;
        }
    }

    if (bosstimer == 0) {
        bossosc = false;
        bossy = BOSS_START_Y;
        screenshake = 25;
        sound(SOUND_STOMP, SOUND_MED);

        int safepath = (random(0, (BUFFER_BOSS / 16) - 1) + BUFFER_MED / 16) * 16;
        int i = 0;
        while (i < OBJECT_COUNT) {
            if (enemies[i][OBJECT_X] == safepath) {
                enemies[i][OBJECT_TYPE] = OBJECT_BLANK;
            }
            i++;
        }
        bosstimer = TIME_BULL + TIME_JUMP - (level / 2) - random(0, 100);
    }
    if (bosshurt > 0) {
        if (bosshurt % 4 == 0) {
            drawbullhurt();
        }
    } else {
        drawbull();
    }

    if (bosshurt > 0) {
        bosshurt -= 1;
    }
}

void tornadologic() {
    bosstimer -= 1;
    if (bosstimer <= level + 2 && bosstimer < OBJECT_COUNT && frame % 2) {
        enemies[spawn(OBJECT_TUMBLE, BUFFER_BOSS + BUFFER_MED + bossx + random(0, 5),
                      random(1, 5) * 12)][OBJECT_STATE] = random(-1, 3);
    }
    if (bosstimer == 0) {
        bosstimer = TIME_TORNADO - (level / 2) - random(0, 90);
    }
    if (bosstimer % 20 == 0) {
        bossosc = !bossosc;
    }
    bossx += (bossosc * 2 - 1) * ((bosstimer / 10) % 2);
    if (BUFFER_BOSS + bossx > WIDTH - 5) {
        bossx = WIDTH - 5 - BUFFER_BOSS;
    }
    if (random(0, 90) == 0) {
        bossx -= 1;
    }

    if (bosshurt % 4 == 0) {
        drawtornado();
    }
    if (bosshurt > 0) {
        bosshurt -= 1;
    }
}

//Gameplay Function
void throwback() {
    playerstate = PLAYER_THROWBACK;
    playerdirection = RIGHT;
    hurttimer = HURTMAX;
}

void enterbossfight() {
    currentsong = static_cast<uint8_t>(*musicfight);
    tunes.playScore(musicfight);
    sound(SOUND_BOSS, SOUND_MED);

    edge = WIDTH - 1;
    bosshealth = 3 + level;
    if (bosshealth > BOSS_MAXHEALTH) {
        bosshealth = BOSS_MAXHEALTH;
    }
    bosshurt = 0;
    bossy = BOSS_START_Y;
    screenshake = 20;
    clearobjects();
    if (bosstype) {
        bosstimer = TIME_TORNADO - level;
        bossx = 0;
        bossosc = true;
    } else {
        bosstimer = TIME_BULL - level;
        bossx = 8;
    }
    throwback();
}

void playerhit() {
    if (hurttimer == 0) {
        sound(SOUND_HURT, SOUND_MED);
        playerstate = PLAYER_KNOCKBACK;
        hurttimer = HURTMAX;
        whiptimer = 0;
        health--;

        screenshake = 10;
    }
}

void handleboss() {
    if (bosshealth == 0) {
        moveright();
        if (bosshurt == 0) {
            nextlevel();
        } else {
            bosshurt--;
            bossy--;
            if (bosshurt % 4 == 0) {
                if (bosstype) {
                    drawtornado();
                } else {
                    drawbullhurt();
                }
            }
        }
    } else if (bosshealth > 0) {
        bool playertouching = false;
        bool whiptouching = false;

        playertouching = arduboy.collide(
                {playerx, static_cast<int16_t>(playery + 3), PLAYERSIZE - (2 * PLAYER_X_OFFSET), PLAYERSIZE - 3},
                {static_cast<int16_t>(BUFFER_BOSS + bossx), bossy, 16, 32});

        if (playertouching) {
            playerhit();
        } else {
            whiptouching = whiptimer > 0 && ((arduboy.collide({whipx, whipy, WHIPWIDTH, WHIPBOX},
                                                              {static_cast<int16_t>(BUFFER_BOSS + bossx), bossy, 16,
                                                               32}) || (!bosstype && arduboy.collide(
                    {whipx, whipy, WHIPWIDTH, WHIPBOX},
                    {static_cast<int16_t>(BUFFER_BOSS + bossx - 8), bossy, 8, 16}))));
            if (whiptouching) {
                bosstimer = 25;
                throwback();
                clearobjects();
                bosshurt = TIME_BLINK;
                bosshealth -= 1;
                screenshake = 20;
                sound(SOUND_BOSS, SOUND_LONG);
                if (bosshealth == 0) {
                    bosshurt = 5 * TIME_BLINK;
                }
            }
        }

        if (bosstype) {
            tornadologic();
        } else {
            bulllogic();
        }
    }
}

void handleobjects() {
    int i = 0;
    while (i < OBJECT_COUNT) {
        if (enemies[i][OBJECT_TYPE] == OBJECT_BLANK) {
            i++;
            continue;
        }
        enemies[i][OBJECT_X] -= movingright;
        if (enemies[i][OBJECT_X] < BUFFER_SMALL) {
            enemies[i][OBJECT_TYPE] = OBJECT_BLANK;
        }
        if (enemies[i][OBJECT_Y] > 70 && enemies[i][OBJECT_Y] < 255 - BUFFER_MED) {
            enemies[i][OBJECT_TYPE] = OBJECT_BLANK;
        }
        int16_t objecty = enemies[i][OBJECT_Y] - 6;
        if (enemies[i][OBJECT_TYPE] == OBJECT_HEART) {
            objecty += 5;
        }
        if (enemies[i][OBJECT_TYPE] == OBJECT_CACTUS) {
            objecty += 2;
        }

        bool playertouching = arduboy.collide(
                {
                        playerx,
                        static_cast<int16_t>(playery + 3),
                        PLAYERSIZE - (2 * PLAYER_X_OFFSET),
                        PLAYERSIZE - 3
                },
                {
                        static_cast<int16_t>(enemies[i][OBJECT_X] - BUFFER_MED),
                        objecty,
                        static_cast<uint8_t>(enemies[i][OBJECT_TYPE] == OBJECT_HEART ? 8 : 10),
                        static_cast<uint8_t>(enemies[i][OBJECT_TYPE] == OBJECT_HEART ? 8 : 11)
                }
        );
        bool whiptouching = false;
        if (!playertouching) {
            whiptouching = whiptimer > 0 && arduboy.collide(
                    {whipx, whipy, WHIPWIDTH, WHIPBOX},
                    {static_cast<int16_t>(enemies[i][OBJECT_X] - BUFFER_MED),
                     static_cast<int16_t>(2 + enemies[i][OBJECT_Y] - 8), 12, 12}
            );
        }

        if (enemies[i][OBJECT_TYPE] == OBJECT_HEART) {
            if (playertouching) {
                sound(SOUND_HEART, SOUND_MED);
                if (health < MAXHEALTH) {
                    health++;
                } else {
                    score += 5;
                }
                burst(i);
            }
            hearts(i);
        } else if (enemies[i][OBJECT_TYPE] == OBJECT_CACTUS) {
            if (playertouching) {
                playerhit();
            }
            drawsprite(enemies[i][OBJECT_X] - 5 - BUFFER_MED, enemies[i][OBJECT_Y] - 8, cactus[BACK], 16, 16, BLACK);
            drawsprite(enemies[i][OBJECT_X] - 5 - BUFFER_MED, enemies[i][OBJECT_Y] - 8, cactus[FRONT], 16, 16, WHITE);
        } else if (enemies[i][OBJECT_TYPE] == OBJECT_SNAKE) {
            if (playertouching) {
                playerhit();
            }
            if (whiptouching) {
                score += 3;
                sound(SOUND_KILL, SOUND_MED);
                burst(i);
            } else {
                if ((enemies[i][OBJECT_X] - BUFFER_MED) < 130) {
                    drawsprite(enemies[i][OBJECT_X] - BUFFER_MED - ((frame / 15) % 2), enemies[i][OBJECT_Y] - 8,
                               snake[BACK][(frame / 15) % 2], 16, 16, BLACK);
                    drawsprite(enemies[i][OBJECT_X] - BUFFER_MED - ((frame / 15) % 2), enemies[i][OBJECT_Y] - 8,
                               snake[FRONT][(frame / 15) % 2], 16, 16, WHITE);
                }
            }
        } else if (enemies[i][OBJECT_TYPE] == OBJECT_BARREL) {
            if (playertouching) {
                playerhit();
            }
            if (whiptouching) {
                if (bosshealth <= 0) {
                    score += 7;
                }
                sound(SOUND_KILL, SOUND_MED);
                burst(i);
            } else {
                if ((enemies[i][OBJECT_X] - BUFFER_MED) < (LEVEL_EDGE + PLAYERSIZE * 3)) {
                    enemies[i][OBJECT_Y] += 2;
                    drawsprite(enemies[i][OBJECT_X] - 3 - BUFFER_MED, enemies[i][OBJECT_Y] - 8,
                               barrel[BACK][(frame / 15) % 2], 16, 16, BLACK);
                    drawsprite(enemies[i][OBJECT_X] - 3 - BUFFER_MED, enemies[i][OBJECT_Y] - 8,
                               barrel[FRONT][(frame / 15) % 2], 16, 16, WHITE);
                }
            }
        } else if (enemies[i][OBJECT_TYPE] == OBJECT_TUMBLE) {
            if (playertouching) {
                playerhit();
            }
            if (whiptouching) {
                if (bosshealth <= 0) {
                    score += 5;
                }
                sound(SOUND_KILL, SOUND_MED);
                burst(i);
            } else {
                if ((enemies[i][OBJECT_X] - BUFFER_MED) < 130) {
                    enemies[i][OBJECT_X] -= 2;
                    if (frame % 2) {
                        enemies[i][OBJECT_Y] += enemies[i][OBJECT_STATE];
                    }
                    drawsprite(enemies[i][OBJECT_X] - 3 - BUFFER_MED, enemies[i][OBJECT_Y] - 8,
                               tumbleweed[BACK][frame / 15], 16, 16, BLACK);
                    drawsprite(enemies[i][OBJECT_X] - 3 - BUFFER_MED, enemies[i][OBJECT_Y] - 8,
                               tumbleweed[FRONT][frame / 15], 16, 16, WHITE);
                }
            }
        } else if (enemies[i][OBJECT_TYPE] == OBJECT_COYOTE) {
            if (playertouching) {
                playerhit();
            }
            if (whiptouching) {
                score += 9;
                sound(SOUND_KILL, SOUND_MED);
                burst(i);
            } else {
                coyotelogic(i);
            }
        } else if (enemies[i][OBJECT_TYPE] == OBJECT_POP) {
            arduboy.drawBitmap(enemies[i][OBJECT_X] - BUFFER_MED, enemies[i][OBJECT_Y] - 2,
                               pop[BACK][enemies[i][OBJECT_STATE] > 9], 8, 8, BLACK);
            arduboy.drawBitmap(enemies[i][OBJECT_X] - BUFFER_MED, enemies[i][OBJECT_Y] - 2,
                               pop[FRONT][enemies[i][OBJECT_STATE] > 9], 8, 8, WHITE);
            enemies[i][OBJECT_STATE]++;
            if (enemies[i][OBJECT_STATE] > 18) {
                enemies[i][OBJECT_TYPE] = OBJECT_BLANK;
            }
        }
        i++;
    }
}

void playerdeath() {
    if (health <= 0) {
        playerstate = PLAYER_DEAD;
        tunes.stopScore();
        sound(SOUND_DEATH, SOUND_LONG);
    }
}

void gamephysics() {
    playerphysics();
    handleobjects();
    handleboss();
    playerdeath();
}

//System Functions
void next(int tostate) {
    if (arduboy.justReleased(A_BUTTON)) {
        sound(SOUND_MENU, SOUND_SHORT);
        menustate = tostate;
    }
}

void cast() {
    if (arduboy.justReleased(UP_BUTTON)) {
        casting = !casting;
    }
}

void swapbuttons() {
    if (arduboy.justReleased(DOWN_BUTTON)) {
        swap = !swap;
        if (swap) {
            jumpbutton = B_BUTTON;
            whipbutton = A_BUTTON;
        } else {
            jumpbutton = A_BUTTON;
            whipbutton = B_BUTTON;
        }
    }
}

void mute() {
    if (arduboy.justReleased(B_BUTTON)) {
        if (arduboy.audio.enabled()) {
            arduboy.audio.off();
        } else {
            arduboy.audio.on();
        }
        arduboy.audio.saveOnOff();
    }
}

void gameplay() {
    gameinput();
    drawbackground();
    drawlevel();
    gamephysics();
    drawui();
    drawplayer();
    movingright = false;
}

void gameloop() {
    switch (menustate) {
        case STATE_PROGRAMMING:
            drawprogramming();
            loopmusic();
            next(STATE_ART);
            break;
        case STATE_ART:
            drawart();
            loopmusic();
            next(STATE_TITLE);
            break;
        case STATE_TITLE:
            drawtitle();
            cast();
            swapbuttons();
            mute();
            loopmusic();
            next(STATE_HIGHSCORE);
            break;
        case STATE_HIGHSCORE:
            drawhighscores();
            next(STATE_STARTGAME);
            break;
        case STATE_STARTGAME:
            resetgame();
        case STATE_DIED:
            newlife();
            break;
        case STATE_LEVELINTRO:
            drawlevelintro();
            next(STATE_GAME);
            loopmusic();
            break;
        case STATE_GAME:
            gameplay();
            loopmusic();
            break;
        case STATE_GAMEEND:
            arduboy.setCursor(0, 0);
            arduboy.print("GAME END");
            endgame();
            break;
        case STATE_NEWHIGHSCORE:
            drawnewhighscores();
            next(STATE_TITLE);
            break;
        case STATE_GAMEOVER:
            drawgameover();
            next(STATE_TITLE);
            break;
    }
}

void setup() {
    arduboy.begin();
    arduboy.setFrameRate(FRAMERATE);

    tunes.initChannel(PIN_SPEAKER_1);
#ifndef AB_DEVKIT
    tunes.initChannel(PIN_SPEAKER_2);
#else
    tunes.initChannel(PIN_SPEAKER_1);
    tunes.toneMutesScore(true);
#endif
    tunes.playScore(musichighscore);

    EEPROM.get(SAVELOCATION, highscore);
    if (highscore < 0) {
        highscore = 0;
        EEPROM.put(SAVELOCATION, highscore);
    }

    arduboy.initRandomSeed();
}

void loop() {
    tunes.updateCallback();
    if (!(arduboy.nextFrame())) {
        return;
    }

    arduboy.pollButtons();

    frame++;
    if (frame >= 60) {
        frame = 0;
    }

    arduboy.clear();
    gameloop();
    arduboy.display();
}