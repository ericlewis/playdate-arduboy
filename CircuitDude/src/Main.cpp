#include <Arduboy2.h>
#include <EEPROM.h>

Arduboy2 arduboy;
BeepPin1 beep;

#define SOUND_MENU_EXIT			215
#define SOUND_MENU_BACK			215
#define SOUND_MENU_TOGGLE		325
#define SOUND_MENU_PICK			325
#define SOUND_MENU_NEXT			425
#define SOUND_MENU_SCROLL		400

#define SOUND_EXPLOSION_1		600
#define SOUND_EXPLOSION_2		700
#define SOUND_EXPLOSION_3		400
#define SOUND_EXPLOSION_4		100

#define SOUND_FALL				50
#define SOUND_TELE				100
#define SOUND_CON				100
#define SOUND_CONB				310
#define SOUND_CAPB				350
#define SOUND_ROTB				425
#define SOUND_ROT				250
#define SOUND_TRAPO				140
#define SOUND_CHIPO				475
#define SOUND_LEVELCOMPLETE		700

#define SOUND_TINY				1
#define SOUND_SHORT				8
#define SOUND_MED				16
#define SOUND_LONG				35

void loadlevel(unsigned char l, boolean iscustom);
void change(unsigned char from, unsigned char to);
void swapall(unsigned char from, unsigned char to);
void checkcompletion();

const unsigned char explosionsounds[] PROGMEM = { 6, 7, 4, 1 };

void sound(int pitch, unsigned char duration) {
	if(arduboy.audio.enabled()) {
		beep.tone(beep.freq(pitch), duration);
	}
}

void clearserialbuffer() {
}

const unsigned char circuitdude[] PROGMEM = {
	0x00, 0x00, 0x80, 0xc0, 0x40, 0x60, 0xa0, 0xa0, 0xb0, 0xd0, 0xd8, 0xe8, 0xec, 0xe4, 0xf4, 0xf6, 0x1a, 0xe2, 0xfa, 0xfa, 0xfa, 0x36, 0x6, 0x3, 0x71, 0xfd, 0xfd, 0xfb, 0xf6, 0xec, 0xd8, 0x10, 0xd0, 0xd0, 0xb0, 0xb0, 0xa0, 0x60, 0x40, 0x40, 0xc0, 0x40, 0x40, 0x40, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xe0, 0xff, 0xff, 0xff, 0xf, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xf1, 0xe3, 0x7, 0xf, 0x7, 0x3, 0x00, 0x3, 0x3, 0x3, 0x3, 0xc1, 0x9d, 0x3c, 0x3c, 0x1e, 0xe, 0xee, 0xe0, 0xfd, 0x3, 0xfe, 0x00, 0xfc, 0x7, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x80, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x7, 0xf, 0xf, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf, 0xf, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0x3, 0xfc, 0x7, 0x40, 0x5f, 0x70, 0x67, 0x17, 0xb7, 0xb7, 0xd7, 0xd7, 0xdb, 0xdb, 0xbb, 0x7d, 0xfd, 0xfc, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc1, 0x83, 0x7, 0xe, 0xc, 0x8e, 0x87, 0xc3, 0xc0, 0xe0, 0xe0, 0xf0, 0xf8, 0x78, 0xbf, 0xdf, 0x61, 0x3e, 0x3, 0x00, 0x41, 0x5f, 0x5f, 0xdf, 0xee, 0xa0, 0x2f, 0x2f, 0x2f, 0xf7, 0x7, 0xe3, 0xf0, 0xfb, 0xfb, 0xfb, 0xfd, 0xfd, 0xfe, 0xfe, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3, 0xbd, 0xd0, 0xcf, 0xb9, 0x60, 0xc0, 0x80, 0x00, 0x00, 0xbf, 0x3f, 0x7f, 0xfa, 0xf6, 0xed, 0x83, 0x7f, 0xc0, 0xff, 0x80, 0x1f, 0x5f, 0x6f, 0xaf, 0xaf, 0xb7, 0xb7, 0x77, 0xf1, 0xee, 0xdf, 0xbf, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xbf, 0xc1, 0x7e, 0xd, 0x1b, 0x37, 0x67, 0x5b, 0xdc, 0xbd, 0x9d, 0xa3, 0x57, 0x67, 0x37, 0xf2, 0xb9, 0x9d, 0xa5, 0xb2, 0x7b, 0x79, 0x39, 0xa6, 0xde, 0x6f, 0x2e, 0x21, 0x27, 0x27, 0x2b, 0x2c, 0x2f, 0x2f, 0x2f, 0x2f, 0x36, 0x15, 0x13, 0x17, 0x17, 0x1b, 0x13, 0x11, 0x35, 0x2e, 0xee, 0x96, 0xba, 0xd9, 0xd9, 0xd3, 0xce, 0x98, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char leftarm[] PROGMEM = {
	0x00, 0xe0, 0x30, 0xd8, 0xe8, 0xe8, 0x6c, 0xe4, 0xd6, 0xba, 0x7a, 0xba, 0x9a, 0xc6, 0x3c, 0xe0, 0xba, 0xbb, 0xb9, 0xa4, 0x93, 0xa7, 0x8c, 0x9b, 0xbb, 0xd3, 0x80, 0xb7, 0xbb, 0xd9, 0x60, 0x3f
};

const unsigned char rightarm[] PROGMEM = {
	0xf0, 0x18, 0xec, 0xf6, 0xba, 0x3a, 0x7b, 0x71, 0x80, 0x37, 0x9b, 0xcd, 0xe5, 0xf5, 0xf8, 0xfd, 0x3f, 0x60, 0xcf, 0x9f, 0xbf, 0xbf, 0x6f, 0x5f
};

const unsigned char me[] PROGMEM = {
	0x45, 0x8a, 0x15, 0xaa, 0x15, 0xaa, 0xd5, 0x6a, 0x34, 0x28, 0x21, 0x32, 0x1d, 0x0a, 0x0c, 0x06, 0x03, 0x02, 0x07, 0x02, 0x23, 0x41, 0xa0, 0x41, 0x80, 0x40, 0x81, 0x40, 0x20, 0x80, 0x40, 0x80,
	0x40, 0x20, 0x08, 0xc7, 0x7d, 0xa2, 0x55, 0xa2, 0x51, 0xa8, 0x15, 0x88, 0x44, 0xa2, 0x51, 0xaa, 0x54, 0xa8, 0x51, 0x82, 0x05, 0xff, 0x00, 0x00, 0x41, 0x80, 0x80, 0x00, 0x80, 0xe0, 0xf0, 0xf0,
	0xf0, 0xf0, 0xe0, 0x60, 0x60, 0x60, 0x68, 0xed, 0xe4, 0xe3, 0xe0, 0xe0, 0x61, 0x72, 0xe1, 0x02, 0xe1, 0x32, 0x1a, 0xaf, 0x11, 0x88, 0x54, 0x8a, 0x45, 0x2a, 0x05, 0x92, 0x45, 0xa2, 0x41, 0xa0,
	0x55, 0xaa, 0x55, 0xaa, 0x55, 0xbf, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x3c, 0xfe, 0xff, 0xff, 0xff, 0x1d, 0xec, 0x36, 0x37, 0xf7, 0xf7, 0xee, 0x1f, 0xff, 0x3f, 0xdf, 0x2e, 0x37, 0xf6, 0xee, 0x1c,
	0x03, 0x7e, 0x55, 0xca, 0xc5, 0xa2, 0x51, 0xa8, 0x54, 0xaa, 0x55, 0x2a, 0x15, 0x8a, 0x45, 0x22, 0x51, 0xa2, 0x54, 0xa0, 0x55, 0xfe, 0xc3, 0xbc, 0x66, 0x40, 0x00, 0x38, 0xdf, 0x7f, 0xbf, 0xff,
	0xff, 0xfe, 0x7d, 0x7d, 0x7d, 0xfd, 0xfe, 0x3f, 0x7f, 0xff, 0xf0, 0x6d, 0x1d, 0xbd, 0xfe, 0xff, 0xe0, 0x83, 0x3f, 0xc0, 0x7f, 0xa2, 0x55, 0xa2, 0x51, 0x28, 0x04, 0xa2, 0x51, 0xa8, 0x54, 0xaa,
	0x11, 0xa2, 0x15, 0xa2, 0xc5, 0x6a, 0x45, 0x63, 0x41, 0x6b, 0x5e, 0x78, 0x71, 0xa6, 0x4b, 0x8d, 0x97, 0x9c, 0x38, 0x31, 0x23, 0x06, 0x46, 0x4d, 0x4d, 0x6d, 0x72, 0x7f, 0x6f, 0x1f, 0x37, 0x0f,
	0x1d, 0xcb, 0xe0, 0x7f, 0x55, 0x6a, 0x45, 0x40, 0xc0, 0x8a, 0xc5, 0x6a, 0xb5, 0xda, 0xed, 0xca, 0x3d, 0xce, 0xf3, 0xfd, 0xfe, 0xf8, 0x87, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xbf, 0xbe, 0xbd,
	0xdb, 0x57, 0xa7, 0xcf, 0xb7, 0x8b, 0xfa, 0xf6, 0x76, 0xa6, 0xca, 0x76, 0xea, 0x9c, 0x5f, 0xdf, 0xc0, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xb6, 0xb9, 0xfb, 0xf8, 0xf3, 0xf7, 0xff, 0xf8
};

const unsigned char jonathan[] PROGMEM = {
	0x20, 0x40, 0x41, 0x3f, 0x01, 0x00, 0x38, 0x44,
	0x44, 0x44, 0x38, 0x00, 0x7c, 0x08, 0x04, 0x04,
	0x78, 0x00, 0x20, 0x54, 0x54, 0x78, 0x40, 0x00,
	0x04, 0x04, 0x3f, 0x44, 0x24, 0x00, 0x7f, 0x08,
	0x04, 0x04, 0x78, 0x00, 0x20, 0x54, 0x54, 0x78,
	0x40, 0x00, 0x7c, 0x08, 0x04, 0x04, 0x78
};

const unsigned char holmes[] PROGMEM = {
	0x7f, 0x08, 0x08, 0x08, 0x7f, 0x00, 0x38, 0x44,
	0x44, 0x44, 0x38, 0x00, 0x00, 0x41, 0x7f, 0x40,
	0x00, 0x00, 0x7c, 0x04, 0x78, 0x04, 0x78, 0x00,
	0x38, 0x54, 0x54, 0x54, 0x18, 0x00, 0x48, 0x54,
	0x54, 0x54, 0x24
};

const unsigned char at[] PROGMEM = {
	0x3e, 0x41, 0x5d, 0x59, 0x4e
};

const unsigned char crait[] PROGMEM = {
	0x38, 0x44, 0x44, 0x44, 0x28, 0x00, 0x7c, 0x08,
	0x04, 0x04, 0x08, 0x00, 0x20, 0x54, 0x54, 0x78,
	0x40, 0x00, 0x00, 0x44, 0x7d, 0x40, 0x00, 0x00,
	0x04, 0x04, 0x3f, 0x44, 0x24
};

const unsigned char net[] PROGMEM = {
	0x60, 0x60, 0x00, 0x00, 0x7c, 0x08, 0x04, 0x04,
	0x78, 0x00, 0x38, 0x54, 0x54, 0x54, 0x18, 0x00,
	0x04, 0x04, 0x3f, 0x44, 0x24
};

const unsigned char also[] PROGMEM = {
	0x7f, 0x41, 0x75, 0x41, 0x7f, 0x41, 0x5f, 0x5f,
	0x7f, 0x59, 0x55, 0x4d, 0x7f, 0x41, 0x5d, 0x41,
	0x7f, 0x7f, 0x7f, 0x7f, 0x41, 0x75, 0x41, 0x7f,
	0x61, 0x5f, 0x61, 0x7f, 0x41, 0x75, 0x41, 0x7f,
	0x5d, 0x41, 0x5d, 0x7f, 0x41, 0x5f, 0x5f, 0x7f,
	0x41, 0x75, 0x41, 0x7f, 0x41, 0x55, 0x4b, 0x7f,
	0x41, 0x5f, 0x5f, 0x7f, 0x41, 0x55, 0x5d, 0x7f,
	0x7f, 0x7f, 0x7f, 0x41, 0x5d, 0x41, 0x7f, 0x41,
	0x7d, 0x41, 0x7f, 0x6b, 0x7f
};

const unsigned char circuit[] PROGMEM = {
	0xfc, 0xfe, 0xff, 0x07, 0xf7, 0x17, 0x07, 0x3f,
	0x3e, 0x3c, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00,
	0x00, 0xff, 0xff, 0xff, 0xc7, 0xd7, 0xd7, 0xc7,
	0xff, 0xfe, 0x7c, 0x00, 0x00, 0xfc, 0xfe, 0xff,
	0x07, 0x17, 0x17, 0x07, 0xbf, 0xbe, 0x3c, 0x00,
	0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xfe, 0x00,
	0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff,
	0x00, 0x00, 0x17, 0xf7, 0x07, 0xff, 0xff, 0xff,
	0x07, 0x07, 0x07, 0x1f, 0x1f, 0x1f, 0x10, 0x17,
	0x30, 0x70, 0x7e, 0x3e, 0x1e, 0x00, 0x00, 0x7f,
	0x7f, 0x7f, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x01,
	0x7d, 0x05, 0x01, 0x7f, 0x7f, 0x7f, 0x00, 0x00,
	0x1f, 0x3f, 0x7f, 0x70, 0x70, 0x70, 0x70, 0x7e,
	0x3e, 0x1e, 0x00, 0x00, 0x1f, 0x3f, 0x7f, 0x70,
	0x70, 0x77, 0x70, 0x7f, 0x3f, 0x1f, 0x00, 0x00,
	0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00,
	0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x00,
};

const unsigned char dude[] PROGMEM = {
	0xff, 0xff, 0xff, 0x07, 0xf7, 0x07, 0x07, 0xff,
	0xfe, 0xfc, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00,
	0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00,
	0xff, 0xff, 0xff, 0x07, 0x07, 0xf7, 0x07, 0xff,
	0xfe, 0xfc, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc7,
	0xd7, 0xd7, 0xc7, 0x07, 0x7f, 0x7f, 0x7f, 0x70,
	0x77, 0x74, 0x70, 0x7f, 0x3f, 0x1f, 0x00, 0x00,
	0x1f, 0x3f, 0x7f, 0x70, 0x77, 0x74, 0x70, 0x7f,
	0x3f, 0x1f, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x70,
	0x74, 0x77, 0x70, 0x7f, 0x3f, 0x1f, 0x00, 0x00,
	0x7f, 0x7f, 0x7f, 0x71, 0x75, 0x75, 0x71, 0x70,
};

const unsigned char ending_circle_1[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xe0,
	0xd0, 0x50, 0x00, 0x48, 0x40, 0xe0, 0xf0, 0xf0,
	0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc,
	0x7c, 0x7c, 0xfc, 0xbc, 0xbc, 0xfc, 0xf8, 0xe8,
	0x08, 0x10, 0x30, 0x30, 0x20, 0x40, 0x00, 0x80,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff,
	0xff, 0xfb, 0xf9, 0x18, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x03, 0x03, 0x01, 0x01, 0x80, 0x81, 0x01,
	0x60, 0x04, 0x0c, 0x18, 0xf0, 0xc0, 0x80, 0x01,
	0x03, 0xf7, 0xff, 0xef, 0xe7, 0xfe, 0xfc, 0xf8,
	0xf0, 0x13, 0x3e, 0x26, 0x00, 0x00, 0x00, 0x80,
	0x80, 0xa0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xe0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x3f, 0x0f, 0x07, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x41, 0x83, 0x07, 0x0f, 0x00, 0x00, 0x01, 0x01,
	0x41, 0x67, 0x87, 0x9f, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xf6, 0xe0, 0xc3, 0x3f, 0x0f, 0x07, 0x03,
	0x03, 0x0c, 0x20, 0x00, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdc,
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
	0x80, 0x00, 0x80, 0x01, 0x00, 0x80, 0xc0, 0xe0,
	0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xf0,
	0xe0, 0xc4, 0xcf, 0x9f, 0x0f, 0x27, 0x3f, 0x7f,
	0xf4, 0xe4, 0xc7, 0xcf, 0xdf, 0xdf, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xf0, 0xe0,
	0xc0, 0x80, 0x80, 0xc0, 0x00, 0x07, 0x3f, 0x7f,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xfe, 0xfc, 0xf8, 0x39, 0x1b, 0x03, 0x01,
	0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x0f, 0x1f, 0x3f, 0x3f,
	0x3f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x07, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0f,
	0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xfe, 0xfc, 0xf8, 0xe0, 0xe0, 0xc0, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0xfc, 0xff,
	0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x01, 0x03, 0x07, 0x0f, 0x0f, 0x0f, 0x1f,
	0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
	0x3f, 0x39, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x20, 0x20, 0x00, 0x10, 0x10, 0x08, 0x0c, 0x0e,
	0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char ending_circle_2[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x50, 0xf0, 
	0xf8, 0x78, 0x78, 0x38, 0x78, 0x73, 0x23, 0x8f, 
	0xff, 0xfe, 0x7f, 0x3f, 0xc0, 0x7c, 0x7c, 0xfc, 
	0xbc, 0xbc, 0xfc, 0xf8, 0xe8, 0x08, 0x10, 0x30, 
	0x30, 0x20, 0x40, 0x00, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x80, 0xe0, 0xf8, 0xfc, 0x1c, 0x0c, 
	0x06, 0x06, 0x02, 0x06, 0x86, 0xcc, 0xd8, 0x70, 
	0x70, 0x38, 0x9c, 0xdc, 0xc6, 0xf9, 0xfc, 0xfe, 
	0x3e, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x40, 0xe0, 0xfc, 0xc7, 0x80, 0x01, 
	0x01, 0x04, 0x06, 0x1f, 0xf9, 0xf0, 0xc0, 0x80, 
	0x01, 0x03, 0xf7, 0xff, 0xef, 0xe7, 0xfe, 0xfc, 
	0xf8, 0xf0, 0x13, 0x3e, 0x26, 0x00, 0x00, 0x00, 
	0x80, 0x82, 0xac, 0xd8, 0x18, 0x38, 0x60, 0xf0, 
	0xb0, 0x10, 0x10, 0x30, 0x20, 0xe0, 0x80, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0e, 0x1f, 0xdf, 0x7f, 0x33, 0x61, 0x43, 0x03, 
	0x02, 0x00, 0x00, 0x00, 0x3f, 0x7f, 0xf1, 0xcc, 
	0x9e, 0x3f, 0x7f, 0xff, 0xff, 0x0f, 0x03, 0x01, 
	0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x40, 0x10, 0x20, 0xc1, 0x63, 0x39, 0x0f, 
	0x00, 0x00, 0x00, 0xfc, 0x07, 0x41, 0x67, 0x87, 
	0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xfe, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xf6, 0xe0, 
	0xc3, 0x3f, 0x0f, 0x07, 0x03, 0x03, 0x0c, 0x20, 
	0x01, 0x1e, 0xf3, 0x81, 0x01, 0x03, 0x03, 0x06, 
	0x0c, 0x38, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfe, 0x1f, 0x01, 0x60, 0x80, 0x80, 0x00, 0x00, 
	0xfc, 0xfe, 0xff, 0xff, 0x07, 0xf3, 0xfb, 0xfb, 
	0xf3, 0xf7, 0xf7, 0xf4, 0xf5, 0xf5, 0xf1, 0xf1, 
	0xf5, 0xa1, 0x21, 0x29, 0x23, 0x62, 0x4a, 0x5a, 
	0xda, 0xca, 0x62, 0xc3, 0x41, 0x70, 0x98, 0xcc, 
	0xee, 0xfe, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 
	0xff, 0xff, 0xff, 0xfb, 0xff, 0xef, 0xff, 0xff, 
	0x7f, 0x3f, 0x1f, 0x4f, 0x23, 0x91, 0x99, 0x91, 
	0x99, 0x99, 0xb9, 0x19, 0x33, 0x76, 0xe4, 0xe4, 
	0xcd, 0xd8, 0x30, 0x03, 0x3e, 0x00, 0x00, 0x30, 
	0x3c, 0x0f, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
	0x07, 0x07, 0x0e, 0x3e, 0xfc, 0xf8, 0xf0, 0xc0, 
	0x01, 0x03, 0x06, 0x04, 0x08, 0x08, 0x11, 0x18, 
	0x1c, 0x0f, 0x1f, 0xbf, 0x00, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0x7f, 
	0x7f, 0xff, 0xff, 0xf8, 0xf0, 0x60, 0x44, 0x6f, 
	0xff, 0xef, 0xe7, 0xff, 0xff, 0x74, 0x64, 0x67, 
	0x6f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x7e, 
	0xfe, 0xfc, 0xfc, 0xfc, 0xf8, 0xf8, 0xf8, 0xf8, 
	0xf8, 0xfd, 0x7c, 0xfe, 0xfe, 0xff, 0xff, 0xff, 
	0xf0, 0x80, 0x01, 0x01, 0x03, 0x06, 0x0c, 0xf9, 
	0x07, 0x7d, 0xc1, 0x41, 0x00, 0x10, 0x20, 0x20, 
	0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x80, 0xc0, 0xe0, 0xff, 0xff, 0x3f, 0x1f, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1e, 0x3f, 0x63, 0xc6, 0x44, 0x49, 0xfb, 
	0x1b, 0xc3, 0xe3, 0xf3, 0xf3, 0xf9, 0xf8, 0xfc, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xfe, 0xfc, 
	0xf8, 0xf0, 0xe1, 0xe7, 0x6f, 0x0f, 0x07, 0x07, 
	0x07, 0xc6, 0x3f, 0x07, 0x03, 0xf0, 0x0c, 0x03, 
	0x07, 0x07, 0x07, 0x07, 0x07, 0x0f, 0x1f, 0x3f, 
	0x3f, 0x3f, 0x3d, 0x3e, 0xff, 0xdf, 0x3f, 0x7f, 
	0xff, 0xff, 0xff, 0xfe, 0xfc, 0x78, 0x38, 0x85, 
	0x80, 0xfc, 0x1f, 0x00, 0x00, 0x80, 0x80, 0xe0, 
	0xe0, 0xff, 0xf8, 0x06, 0x06, 0x07, 0x07, 0x07, 
	0x07, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0x06, 0x04, 0x07, 
	0x0e, 0x08, 0x13, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 
	0xff, 0xdf, 0xff, 0x7f, 0x7f, 0xbf, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0xf0, 0xe0, 0x80, 0xf0, 
	0x4f, 0x80, 0x7c, 0xf8, 0xe3, 0xec, 0x90, 0x20, 
	0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x80, 0xf0, 0xf4, 0xff, 0xff, 0x7f, 0x3c, 
	0x80, 0xc3, 0x67, 0x33, 0x38, 0x2e, 0x2b, 0x3b, 
	0x10, 0x11, 0x1d, 0x07, 0x03, 0x03, 0x03, 0x01, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x00, 0x02, 0x07, 0x0f, 0x2f, 0x4f, 
	0xdf, 0xdf, 0x1f, 0xbf, 0xbf, 0x3f, 0xbf, 0xbf, 
	0xa7, 0xb1, 0x16, 0x48, 0x63, 0x76, 0x1f, 0x2f, 
	0x5a, 0x54, 0x79, 0x32, 0x44, 0x58, 0x48, 0x6c, 
	0x6e, 0x67, 0x33, 0x19, 0x0d, 0x04, 0x00, 0x01, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char ending_label[] PROGMEM = {
	0x7f, 0x7d, 0x41, 0x7d, 0x7f, 0x41, 0x77, 0x41, 
	0x7f, 0x41, 0x55, 0x7f, 0x7f, 0x41, 0x55, 0x7f, 
	0x41, 0x7b, 0x77, 0x41, 0x7f, 0x41, 0x5d, 0x63, 
	0x7f
};

const unsigned char ending_table[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 
	0x40, 0x40, 0x20, 0x20, 0x10, 0x10, 0x88, 0xc8, 
	0x48, 0x28, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xb8, 
	0xb8, 0x98, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
	0x18, 0x18, 0x18, 0x18, 0x18, 0x98, 0xb8, 0xb8, 
	0xb8, 0xd8, 0x18, 0x18, 0x18, 0x18, 0x28, 0x48, 
	0xc8, 0x88, 0x18, 0x10, 0x30, 0x20, 0x60, 0x40, 
	0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xe0, 0xe0, 0x70, 0x70, 0x78, 0x68, 0x6c, 0x64, 
	0x64, 0x62, 0x62, 0x61, 0x61, 0x61, 0x60, 0x60, 
	0x60, 0x60, 0x60, 0x6c, 0x6e, 0x6f, 0x6d, 0x6c, 
	0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6d, 
	0x6d, 0x6d, 0x6f, 0x6f, 0x6f, 0x6f, 0x6f, 0x6f, 
	0x6f, 0x6f, 0x6f, 0x6f, 0x6f, 0x6f, 0x6d, 0x6d, 
	0x6d, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 
	0x6c, 0x6d, 0x6f, 0x6e, 0x6c, 0x60, 0x60, 0x60, 
	0x60, 0x60, 0x61, 0x61, 0x61, 0x63, 0x62, 0x66, 
	0x64, 0x6c, 0x68, 0x78, 0x70, 0x70, 0xe0, 0xe0
};

const unsigned char ending_laughing_face[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x80, 0xc0, 0x40, 0x40, 0x60, 0xb0, 0xd8, 
	0xe8, 0xd8, 0xd0, 0x90, 0x10, 0x50, 0x50, 0xd0, 
	0xd8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 
	0xe8, 0x68, 0xa8, 0xc8, 0xec, 0xf6, 0xfa, 0x7a, 
	0x32, 0x0e, 0x68, 0xe8, 0xd8, 0x30, 0xe0, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 
	0x38, 0xcc, 0xe6, 0x9b, 0x7d, 0xfd, 0xfe, 0xfe, 
	0x8f, 0x0f, 0x04, 0x00, 0x01, 0x01, 0x03, 0x07, 
	0xc7, 0x8f, 0x9f, 0x9e, 0x0e, 0x05, 0x01, 0x01, 
	0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x03, 0x07, 
	0x27, 0x73, 0xf9, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0x3f, 0xff, 0xfc, 0xe3, 0x1e, 0xf0, 0x00, 
	0x00, 0x00, 0x3e, 0xc3, 0x1c, 0x7f, 0xff, 0xff, 
	0xff, 0xfe, 0xf9, 0xe7, 0x9f, 0x7f, 0xfe, 0xf8, 
	0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0xe7, 
	0xe7, 0x72, 0x10, 0xf0, 0xc0, 0x80, 0x00, 0x00, 
	0x80, 0x80, 0x80, 0x00, 0x00, 0xc0, 0xc0, 0x80, 
	0xf8, 0x18, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x01, 
	0x9f, 0xff, 0xfe, 0xe1, 0x1f, 0xf0, 0x80, 0x00, 
	0x00, 0x03, 0x0c, 0x71, 0x87, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xfe, 0xf1, 0xcf, 0x3f, 0xff, 0xfc, 
	0xf0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 
	0x80, 0x03, 0x03, 0x06, 0x0f, 0x0f, 0x03, 0x03, 
	0x0f, 0x3c, 0x1f, 0x00, 0x01, 0x01, 0x80, 0xc0, 
	0xe0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0x7f, 
	0x9f, 0x47, 0xf0, 0x8f, 
};

const unsigned char ending_laughing_body[] PROGMEM = {
	0x01, 0x0e, 0xf0, 0x87, 0x3f, 0xdf, 0x6f, 0xb3, 
	0xdd, 0xde, 0xde, 0xbe, 0x7d, 0xfb, 0x77, 0xb7, 
	0xcf, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xfe, 0xfe, 0xfc, 0xfc, 0xfc, 0xf8, 0xf8, 0xfc, 
	0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xe7, 0x19, 0xde, 0x3f, 0x7f, 0x7e, 0x9d, 
	0xe1, 0xfb, 0xfa, 0xf6, 0xf4, 0xf4, 0x06, 0xfa, 
	0xfa, 0xfb, 0xa0, 0xb0, 0x98, 0xad, 0x76, 0xf8, 
	0xfb, 0xfb, 0xf7, 0xcf, 0x3f, 0x0f, 0x70, 0x3d, 
	0x3e, 0x3f, 0x3f, 0x3c, 0x03, 0x3f, 0x3f, 0x3f, 
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x38, 0x07, 0x3f, 
	0x02, 0x02, 0x02, 0x06, 0x05, 0x05, 0x05, 0x04, 
	0x05, 0x05, 0x05, 0x04
};

const unsigned char ending_laughing_arm[] PROGMEM = {
	0x9e, 0x6e, 0xf7, 0xfa, 0xf9, 0xfb, 0xf6, 0xf4, 
	0xf4, 0x04, 0xf6, 0xfa, 0xfb, 0x79, 0x7a, 0x37, 
	0x2f, 0x1f, 0x1f, 0x1f, 0x0c, 0x03, 0x00, 0x01, 
	0x01, 0x02, 0x02, 0x06, 0x05, 0x01, 0x01, 0x00, 
	0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char ending_laughing_right[] PROGMEM = {
	0x00, 0x00, 0x00, 0x80, 0xf0, 0x1c, 0x66, 0x7b, 
	0x7d, 0x3d, 0xbd, 0x9b, 0x46, 0x3c, 0x00, 0xf8, 
	0x0c, 0xf4, 0xf4, 0xf4, 0xec, 0xd8, 0x30, 0xe0, 
	0x00, 0xfe, 0x03, 0x7d, 0xbe, 0xdf, 0xef, 0xf7, 
	0xf7, 0xf7, 0xf0, 0x0f, 0xec, 0xf4, 0xf4, 0xf7, 
	0xe6, 0xd9, 0xff, 0xff, 0xff, 0x3f, 0xc0, 0xff, 
	0x00, 0x0f, 0x18, 0x37, 0x6f, 0x5f, 0xdf, 0xb7, 
	0xbb, 0xb9, 0xba, 0xbb, 0xbf, 0xbf, 0xbf, 0x8f, 
	0xb7, 0xbb, 0x9d, 0x9e, 0x6e, 0xf7, 0xfa, 0xf9
};

const unsigned char ending_laughing_left[] PROGMEM = {
	0x00, 0x00, 0xe0, 0x38, 0xce, 0xf3, 0xfd, 0xfd, 
	0x3d, 0xc3, 0xfe, 0x80, 0x00, 0xf0, 0x18, 0xe8, 
	0xe8, 0xe8, 0x18, 0xf0, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x60, 0xbe, 0xc3, 0xec, 0xf7, 0xee, 
	0xda, 0x36, 0xee, 0x1e, 0xfe, 0xfd, 0xf9, 0xfd, 
	0xf6, 0xe7, 0xd7, 0xb3, 0xbd, 0xbc, 0xdd, 0xcd, 
	0xc3, 0x3e, 0xe0, 0x00, 0xbf, 0x9e, 0x5d, 0x4b, 
	0x27, 0x13, 0x09, 0x04, 0x02, 0x02, 0x02, 0x06, 
	0x0d, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 
	0x0b, 0x0b, 0x09, 0x04, 0x03, 0x00
};

const unsigned char ending_smile_face[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x04, 
	0xf6, 0xea, 0xeb, 0xdd, 0x5d, 0x8d, 0xed, 0xed, 
	0xcb, 0xca, 0x9a, 0x9a, 0x1a, 0x5a, 0x5a, 0xda, 
	0xda, 0xda, 0xda, 0xda, 0xd6, 0xb4, 0xb4, 0xb4, 
	0xb4, 0xb4, 0x34, 0x34, 0x34, 0xb4, 0x94, 0xd4, 
	0x8c, 0x28, 0x68, 0x68, 0x68, 0x58, 0xb0, 0x60, 
	0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 
	0x03, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x02, 0x01, 
	0x01, 0x03, 0x03, 0xe7, 0xe7, 0xcf, 0x0f, 0x1f, 
	0x06, 0x00, 0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 
	0x01, 0x01, 0x0c, 0x1e, 0x9e, 0xdf, 0xcf, 0x0f, 
	0x07, 0x07, 0x03, 0x03, 0x80, 0xff, 0xff, 0xff, 
	0xfe, 0x0e, 0xe0, 0x3f, 0x00, 0x00, 0x00, 0x00, 
	0xf8, 0x0f, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x07, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 
	0x07, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 
	0xff, 0xff, 0x0f, 0xe0, 0x3f, 0x00, 0x80, 0x80, 
	0xc0, 0x40, 0x7f, 0x80, 0xbf, 0x7f, 0xff, 0xff, 
	0xff, 0xf0, 0xe0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0x03, 0x0c, 0x0c, 0x30, 0x30, 
	0x30, 0x30, 0x0c, 0x0c, 0x03, 0x03, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xff, 
	0xff, 0xff, 0xff, 0x0f, 0xe0, 0xbf, 0x80, 0x00
};

const unsigned char ending_smile_body[] PROGMEM = {
	0xf8, 0x0c, 0xf6, 0xf3, 0xf5, 0x76, 0xae, 0xdf, 
	0xdf, 0xdf, 0x1f, 0xcf, 0xee, 0xe5, 0x03, 0xf7, 
	0xfb, 0x03, 0xfb, 0xfb, 0xfb, 0xfc, 0x0c, 0xfc, 
	0xfc, 0xfe, 0x0e, 0xfe, 0xfe, 0xfe, 0x70, 0x80, 
	0x50, 0x18, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 
	0xff, 0xff, 0x1f, 0xc7, 0x73, 0x1b, 0xb5, 0xed, 
	0xde, 0xbf, 0x1e, 0x6e, 0xf5, 0xfb, 0xf6, 0x6c, 
	0x98, 0xb0, 0x60, 0xc0, 0x00, 0x07, 0x0c, 0x09, 
	0x0b, 0x19, 0x16, 0x17, 0x17, 0x17, 0x17, 0x13, 
	0x08, 0x0b, 0x09, 0x04, 0x06, 0x05, 0x04, 0x0d, 
	0x0b, 0x0b, 0x0b, 0x0c, 0x0b, 0x0b, 0x0b, 0x0c, 
	0x1b, 0x37, 0x2f, 0x2f, 0x2f, 0x2f, 0x2e, 0x31, 
	0x1f, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 
	0x3f, 0x23, 0x2d, 0x2d, 0x2e, 0x62, 0x5c, 0x5d, 
	0xce, 0xb6, 0xb6, 0xba, 0xdd, 0x5e, 0x5e, 0x6c, 
	0x33, 0x1e
};

const unsigned char ending_smile_body_back[] PROGMEM = {
	0x10, 0x19, 0x0e, 0x08, 0x0c, 0x07, 0x02, 0x04,
	0x07, 0x04, 0x08, 0x08, 0x08, 0x07, 0x08, 0x08,
	0x08, 0x07, 0x08, 0x10, 0x20, 0x21, 0x20, 0x21,
	0x23, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x39, 0x25, 0x24, 0x22, 0x3a,
	0x46, 0x45, 0x63, 0x92, 0x92, 0x8a, 0x45
};

const unsigned char saved[] PROGMEM = {
	0x7f, 0x59, 0x55, 0x4d, 0x7f, 0x41, 0x75, 0x41,
	0x7f, 0x61, 0x5f, 0x61, 0x7f, 0x41, 0x55, 0x5d,
	0x7f, 0x41, 0x5d, 0x63, 0x7f
};

const unsigned char level[] PROGMEM = {
	0x7f, 0x41, 0x5f, 0x5f, 0x7f, 0x41, 0x55, 0x5d,
	0x7f, 0x61, 0x5f, 0x61, 0x7f, 0x41, 0x55, 0x5d,
	0x7f, 0x41, 0x5f, 0x5f, 0x7f
};

const unsigned char lock[] PROGMEM = {
	0x7e, 0x79, 0x59, 0x79, 0x7e
};

const unsigned char arrowup[] PROGMEM = {
	0x08, 0x0c, 0x0e, 0x0f, 0x0e, 0x0c, 0x08
};

const unsigned char arrowdown[] PROGMEM = {
	0x01, 0x03, 0x07, 0x0f, 0x07, 0x03, 0x01
};

const unsigned char menulabels[9][21] PROGMEM = {
	//Play
	{
		0x7f, 0x41, 0x75, 0x71, 0x7f, 0x41, 0x5f, 0x5f,
		0x7f, 0x41, 0x75, 0x41, 0x7f, 0x79, 0x47, 0x79,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f
	},
	//Edit
	{
		0x7f, 0x41, 0x55, 0x5d, 0x7f, 0x41, 0x5d, 0x63,
		0x7f, 0x5d, 0x41, 0x5d, 0x7f, 0x7d, 0x41, 0x7d,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f
	},
	//About
	{
		0x7f, 0x41, 0x75, 0x41, 0x7f, 0x41, 0x55, 0x4b,
		0x7f, 0x41, 0x5d, 0x41, 0x7f, 0x41, 0x5f, 0x41,
		0x7f, 0x7d, 0x41, 0x7d, 0x7f
	},
	//Sound
	{
		0x7f, 0x59, 0x55, 0x4d, 0x7f, 0x41, 0x5d, 0x41,
		0x7f, 0x41, 0x5f, 0x41, 0x7f, 0x41, 0x7d, 0x41,
		0x7f, 0x41, 0x5d, 0x63, 0x7f
	},
	//Save
	{
		0x7f, 0x59, 0x55, 0x4d, 0x7f, 0x41, 0x75, 0x41,
		0x7f, 0x61, 0x5f, 0x61, 0x7f, 0x41, 0x55, 0x5d,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
	},
	//Exit
	{
		0x7f, 0x41, 0x55, 0x5d, 0x7f, 0x49, 0x77, 0x49,
		0x7f, 0x5d, 0x41, 0x5d, 0x7f, 0x7d, 0x41, 0x7d,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f
	},
	//Clear
	{
		0x7f, 0x41, 0x5d, 0x5d, 0x7f, 0x41, 0x5f, 0x5f,
		0x7f, 0x41, 0x55, 0x5d, 0x7f, 0x41, 0x75, 0x41,
		0x7f, 0x41, 0x75, 0x49, 0x7f
	},
	//Read
	{
		0x7f, 0x41, 0x75, 0x49, 0x7f, 0x41, 0x55, 0x5d,
		0x7f, 0x41, 0x75, 0x41, 0x7f, 0x41, 0x5d, 0x63,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f
	},
	//Send
	{
		0x7f, 0x59, 0x55, 0x4d, 0x7f, 0x41, 0x55, 0x5d,
		0x7f, 0x41, 0x7d, 0x41, 0x7f, 0x41, 0x5d, 0x63,
		0x7f, 0x7f, 0x7f, 0x7f, 0x7f
	}
};

const unsigned char usb[] PROGMEM = {
	0x7f, 0x7f, 0x63, 0x63, 0x77, 0x73, 0x65, 0x55,
	0x55, 0x77, 0x63, 0x77
};

const unsigned char soundlabel[] PROGMEM = {
	0x08, 0x1c, 0x00, 0x08, 0x22, 0x1c
};

const unsigned char numbers[10][3] PROGMEM = {
	{0x3e, 0x22, 0x3e },
	{0x24, 0x3e, 0x20 },
	{0x32, 0x2a, 0x24 },
	{0x22, 0x2a, 0x3e },
	{0xc, 0x8, 0x3e },
	{0x2e, 0x2a, 0x1a },
	{0x3e, 0x2a, 0x3a },
	{0x2, 0x2, 0x3e },
	{0x3e, 0x2a, 0x3e },
	{0x2e, 0x2a, 0x3e }
};

const unsigned char platforms[4][144] PROGMEM = {
	{ 0xf8, 0xfc, 0x6, 0xc3, 0xe1, 0xe1, 0xe1, 0xc1, 0x1, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xff, 0xff, 0x00, 0x00, 0x1, 0x1, 0x1, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xcf, 0x87, 0x87, 0xcf, 0xff, 0xff, 0xff, 0x1f, 0x3f, 0x60, 0xc0, 0x80, 0x80, 0x80, 0x80, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f },
	{ 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x80, 0xe, 0x11, 0x24, 0x2e, 0x3c, 0x79, 0xfe, 0xf8, 0xf0, 0xe0, 0xe0, 0xe0, 0xb0, 0x30, 0x7c, 0xfe, 0xff, 0xf0, 0xe6, 0x6f, 0x6f, 0x26, 0x30, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x3, 0x5, 0x9, 0xb, 0x9, 0x4, 0x3, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
	{ 0xfe, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xf2, 0xe6, 0xcc, 0x1c, 0x78, 0xf8, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x3c, 0x99, 0xc3, 0xe7, 0xc3, 0x99, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x7f, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x4f, 0x67, 0x33, 0x38, 0x1e, 0x1f, 0xf, 0x7, 0x7, 0x3, 0x3, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc, 0x9e, 0xfe, 0xfc, 0xf8, 0xfe, 0x3e, 0xc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0xe0, 0xf8, 0xfe, 0xff, 0xbf, 0x8f, 0x83, 0x8c, 0x3f, 0xfe, 0xf8, 0xc0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x3, 0x7, 0x67, 0xf7, 0x77, 0x37, 0x17, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x00, 0x3, 0xf, 0x3f, 0xff, 0xf7, 0x67, 0x7, 0x3 }
};

const unsigned char sidebar[] PROGMEM = {
	0xfe, 0x02, 0xaa, 0x82, 0xaa, 0x02, 0xe2, 0x36,
	0x24, 0x34, 0x24, 0x36, 0xe2, 0x02, 0xf2, 0x9e,
	0x0f, 0x98, 0xfb, 0x0a, 0xfb, 0x98, 0x09, 0x0b,
	0x09, 0x0b, 0x99, 0xfb, 0x09, 0xf8, 0x98, 0x0f,
	0xff, 0x11, 0x15, 0x11, 0x11, 0x11, 0x11, 0x11,
	0x11, 0x11, 0x11, 0x11, 0x11, 0x15, 0x11, 0xff,
	0xff, 0x10, 0xd0, 0x50, 0x50, 0x50, 0x50, 0xd0,
	0x10, 0xd0, 0x50, 0x50, 0x50, 0xd0, 0x10, 0xff,
	0xff, 0x00, 0xeb, 0xa2, 0x2a, 0xa2, 0xeb, 0xc1,
	0xdc, 0x01, 0xeb, 0x22, 0x3a, 0x8b, 0x88, 0xff,
	0xff, 0x00, 0xfe, 0x43, 0x5a, 0x5b, 0x42, 0xfe,
	0x00, 0x00, 0x9f, 0xc8, 0xc8, 0xdf, 0x00, 0xff,
	0x0f, 0x98, 0xfa, 0x08, 0xf8, 0x98, 0x08, 0x08,
	0x08, 0x08, 0x98, 0xf8, 0x08, 0xfa, 0x98, 0x0f
};

const unsigned char thermostat[] PROGMEM = {
	0x00, 0x00, 0xfe, 0x01, 0x01, 0xfe, 0x00, 0x00,
	0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00,
	0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00,
	0x18, 0x3c, 0x7f, 0x80, 0x80, 0x7f, 0x3c, 0x18
};

#define WAVE_WIDTH 27
const unsigned char wave[] PROGMEM = {
	0x88, 0x84, 0x84, 0x88, 0x90, 0xa0, 0xa0, 0x90,
	0x88, 0x84, 0x82, 0x81, 0x82, 0x84, 0x98, 0xa0,
	0xc0, 0xa0, 0x98, 0x84, 0x82, 0x84, 0x88, 0x90,
	0xa0, 0xa0, 0x90
};

const unsigned char lv[] PROGMEM = {
	0x7f, 0x41, 0x5f, 0x7f, 0x61, 0x5f, 0x61
};

const unsigned char transfering[] PROGMEM = {
	0x7f, 0x7d, 0x41, 0x7d, 0x7f, 0x41, 0x75, 0x4b,
	0x7f, 0x41, 0x75, 0x41, 0x7f, 0x41, 0x7d, 0x41,
	0x7f, 0x59, 0x55, 0x4d, 0x7f, 0x41, 0x75, 0x7d,
	0x7f, 0x41, 0x55, 0x5d, 0x7f, 0x41, 0x75, 0x4b,
	0x7f, 0x5d, 0x41, 0x5d, 0x7f, 0x41, 0x7d, 0x41,
	0x7f, 0x43, 0x5d, 0x4d, 0x7f
};

const unsigned char to[] PROGMEM = {
	0x7f, 0x7d, 0x41, 0x7d, 0x7f, 0x41, 0x5d, 0x41,
	0x7f, 0x7f, 0x7f, 0x7f
};

const unsigned char from[] PROGMEM = {
	0x7f, 0x41, 0x75, 0x7d, 0x7f, 0x41, 0x75, 0x4b,
	0x7f, 0x41, 0x5d, 0x41, 0x7f, 0x41, 0x73, 0x41,
	0x7f, 0x7f, 0x7f, 0x7f
};

const unsigned char pc[] PROGMEM = {
	0x7f, 0x41, 0x75, 0x71, 0x7f, 0x41, 0x5d, 0x5d,
	0x7f
};

#define MAIN_OFFSET	5

#define TRAP_C		0
#define CAP_O		1
#define CAP_B		2
#define ROT_B		3
#define CON_B		4
#define CHIP_O		5
#define TELE		6
#define TELE_2		7
#define TELE_3		8
#define BLANK		7
#define EXIT		9
#define EXIT_2		10
#define EXIT_3		11
#define TRAP_O		12
#define START		13
#define DUDE		13
#define DUDE_PUFF	14
#define DUDE_BACK	31

#define BLOCK		15
#define LED			16
#define CHIP_I		17
#define CAP_I		18
#define LED_ON		19

#define CON_U		20
#define CON_D		21
#define CON_L		22
#define CON_R		23
#define ROT_H		24
#define ROT_V		25
#define ROT_TL		26
#define ROT_TR		27
#define ROT_BL		28
#define ROT_BR		29

#define HOLD		30

const unsigned char blocks[][8] PROGMEM = {
	{ 0xff, 0x81, 0x81, 0xf1, 0x8f, 0x81, 0x81, 0xff },
	{ 0x2a, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x54 },
	{ 0x00, 0x14, 0x40, 0x1a, 0x58, 0x2, 0x28, 0x00 },
	{ 0x2, 0x2b, 0x42, 0x18, 0x18, 0x42, 0xd4, 0x40 },
	{ 0x18, 0x3c, 0x00, 0x18, 0x18, 0x00, 0x3c, 0x18 },
	{ 0x00, 0x54, 0x54, 0x00, 0x00, 0x54, 0x54, 0x00 },
	{ 0x3f, 0x7f, 0x4a, 0x46, 0x42, 0x42, 0x7e, 0x00 },
	{ 0x3f, 0x7f, 0x62, 0x52, 0x4a, 0x46, 0x7e, 0x00 },
	{ 0x3f, 0x7f, 0x42, 0x42, 0x62, 0x52, 0x7e, 0x00 },
	{ 0x00, 0x66, 0x42, 0x00, 0x00, 0x42, 0x66, 0x00 },
	{ 0x00, 0x00, 0x3c, 0x24, 0x24, 0x3c, 0x00, 0x00 },
	{ 0xc3, 0x81, 0x00, 0x00, 0x00, 0x00, 0x81, 0xc3 },
	{ 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f },
	{ 0x30, 0x9f, 0xe1, 0x4d, 0x4d, 0xe1, 0x9f, 0x30 },
	{ 0x3e, 0xbf, 0xef, 0x5d, 0x5d, 0xed, 0xbf, 0x3e },
	{ 0x00, 0x7e, 0x7e, 0x66, 0x66, 0x7e, 0x7e, 0x00 },
	{ 0x00, 0x7e, 0xd1, 0x41, 0x41, 0xc1, 0x7e, 0x00 },
	{ 0xda, 0x7f, 0x61, 0x61, 0x61, 0x61, 0x7f, 0xda },
	{ 0x7e, 0xa9, 0xd9, 0xa9, 0xd9, 0xa9, 0xd9, 0x7e },
	{ 0x00, 0x7e, 0xdf, 0x7f, 0x7f, 0xff, 0x7e, 0x00 },
	{ 0xff, 0xe7, 0xb3, 0x99, 0x99, 0xb3, 0xe7, 0xff },
	{ 0xff, 0xe7, 0xcd, 0x99, 0x99, 0xcd, 0xe7, 0xff },
	{ 0xff, 0xe7, 0xc3, 0x99, 0xbd, 0xe7, 0xc3, 0xff },
	{ 0xff, 0xc3, 0xe7, 0xbd, 0x99, 0xc3, 0xe7, 0xff },
	{ 0x81, 0x81, 0x81, 0x81, 0x91, 0x81, 0x81, 0x81 },
	{ 0xff, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0xff },
	{ 0xfc, 0x2, 0x1, 0x1, 0x11, 0x1, 0x1, 0x1 },
	{ 0x1, 0x1, 0x1, 0x1, 0x11, 0x1, 0x2, 0xfc },
	{ 0x3f, 0x40, 0x80, 0x80, 0x90, 0x80, 0x80, 0x80 },
	{ 0x80, 0x80, 0x80, 0x80, 0x90, 0x80, 0x40, 0x3f },
	{ 0x81, 0x42, 0x24, 0x18, 0x18, 0x24, 0x42, 0x81 },
	{ 0x38, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0xff, 0x38 }
};

const unsigned char explosion[8][8] PROGMEM = {
	{ 0x39, 0x9e, 0xe1, 0x4d, 0x4d, 0xe1, 0x9b, 0x34 },
	{ 0x3b, 0x94, 0xe1, 0x4d, 0x48, 0xe1, 0x99, 0x36 },
	{ 0x2a, 0x90, 0xc5, 0x5, 0x48, 0x81, 0xa8, 0x45 },
	{ 0x41, 0x84, 0xa0, 0x00, 0x00, 0x80, 0x82, 0x40 },
	{ 0x3f, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0xff, 0x38 },
	{ 0x3b, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0xff, 0x3f },
	{ 0x7f, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0xff, 0x7f },
	{ 0xe, 0xfe, 0xfe, 0x70, 0x40, 0xc7, 0xc7, 0x7 }
};

const unsigned char conveyors[16][8] PROGMEM = {
	{ 0xff, 0xe7, 0xb3, 0x99, 0x99, 0xb3, 0xe7, 0xff },
	{ 0xff, 0xb3, 0x99, 0xcd, 0xcd, 0x99, 0xb3, 0xff },
	{ 0xff, 0x99, 0xcd, 0xe7, 0xe7, 0xcd, 0x99, 0xff },
	{ 0xff, 0xcd, 0xe7, 0xb3, 0xb3, 0xe7, 0xcd, 0xff },
	{ 0xff, 0xe7, 0xcd, 0x99, 0x99, 0xcd, 0xe7, 0xff },
	{ 0xff, 0xcd, 0x99, 0xb3, 0xb3, 0x99, 0xcd, 0xff },
	{ 0xff, 0x99, 0xb3, 0xe7, 0xe7, 0xb3, 0x99, 0xff },
	{ 0xff, 0xb3, 0xe7, 0xcd, 0xcd, 0xe7, 0xb3, 0xff },
	{ 0xff, 0xe7, 0xc3, 0x99, 0xbd, 0xe7, 0xc3, 0xff },
	{ 0xff, 0xc3, 0x99, 0xbd, 0xe7, 0xc3, 0x99, 0xff },
	{ 0xff, 0x99, 0xbd, 0xe7, 0xc3, 0x99, 0xbd, 0xff },
	{ 0xff, 0xbd, 0xe7, 0xc3, 0x99, 0xbd, 0xe7, 0xff },
	{ 0xff, 0xc3, 0xe7, 0xbd, 0x99, 0xc3, 0xe7, 0xff },
	{ 0xff, 0x99, 0xc3, 0xe7, 0xbd, 0x99, 0xc3, 0xff },
	{ 0xff, 0xbd, 0x99, 0xc3, 0xe7, 0xbd, 0x99, 0xff },
	{ 0xff, 0xe7, 0xbd, 0x99, 0xc3, 0xe7, 0xbd, 0xff }
};

const unsigned char walls[6][4] PROGMEM = {
	{ 0x00, 0xe, 0xe, 0x6 },
	{ 0x6, 0xe, 0xe, 0x00 },
	{ 0x00, 0x7, 0x7, 0x6 },
	{ 0x6, 0x7, 0x7, 0x00 },
	{ 0x6, 0x6, 0x6, 0x6 },
	{ 0x00, 0xf, 0xf, 0x00 }
};

const signed char corners[4][2] = {
	{ -1, -1 }, { 1, -1 }, { -1, 1 }, { 1, 1 }
};

#define WALL_TL			0
#define WALL_TR			1
#define WALL_BL			2
#define WALL_BR			3
#define WALL_H			4
#define WALL_V			5

#define PROP_X			0
#define PROP_Y			1

#define SAVELOCATION	((EEPROM_STORAGE_SPACE_START + 90) + 6 * 70)
#define CUSTOMLOCATION	(EEPROM_STORAGE_SPACE_START + 90)
#define FRAMERATE		45

#define STATE_CREDITS	0
#define STATE_SYSTEMS	1
#define STATE_SOUND		9
#define STATE_TITLE		10
#define STATE_SELECT_GAME	23
#define STATE_SELECT_EDIT	24
#define STATE_SELECT	25
#define	STATE_EDIT_BUFFER	28
#define	STATE_EDIT_LOAD	29
#define	STATE_EDITOR	30
#define STATE_GAME		39
#define STATE_GAMEPLAY	40
#define STATE_ENDING_1	50
#define STATE_ENDING_2	51
#define STATE_ENDING_3	52
#define STATE_ENDING_4	53
#define STATE_ENDING_5	54

const unsigned char menudirection[] = {
	STATE_SELECT_GAME,
	STATE_SELECT_EDIT,
	STATE_CREDITS,
	STATE_SOUND
};

#define LEVELS			75
#define CUSTOMLEVELS	5
#define TEMP_MAX		33
#define TIME_EXPLOSION	32
#define TIME_TELE		32
#define TIME_MOVE		8
#define TIME_FALL		32

#define DIR_UP			0
#define DIR_DOWN		1
#define DIR_LEFT		2
#define DIR_RIGHT		3
#define DIR_STAY		4
#define DIR_TELE		10
#define DIR_FALL		11
#define DIR_SPAWNED		99

const unsigned char dirbuttons[4] PROGMEM = {
	UP_BUTTON,
	DOWN_BUTTON,
	LEFT_BUTTON,
	RIGHT_BUTTON
};

unsigned char animation = 0;
unsigned char wavex = 0;
boolean casting = false;

unsigned char gamestate = STATE_CREDITS;
unsigned char menuindex = 0;
#define MENU_PLAY	0
#define MENU_EDIT	1
#define MENU_ABOUT	2
#define MENU_SOUND	3

unsigned char buttonblock = 0;

unsigned char currentlevel = 0;
unsigned char menulevel = 0;
unsigned char maxlevel = 0;

#define EDIT_PICKING	0
#define EDIT_TILE		1
#define EDIT_MENU		2
#define EDIT_READING	3
#define EDIT_SENDING	4
unsigned char editx = 3;
unsigned char edity = 3;
unsigned char editstate = EDIT_MENU;
unsigned char edittile = 0;
unsigned char editmenu = 0;

const unsigned char edititems[7] PROGMEM = {
	1,	//Edit
	0,	//Play
	6,	//Clear
	7,	//Read
	8,	//Send
	4,	//Save
	5	//Exit
};

#define EDIT_EDIT	0
#define EDIT_PLAY	1
#define EDIT_CLEAR	2
#define EDIT_READ	3
#define EDIT_SEND	4
#define EDIT_SAVE	5
#define EDIT_EXIT	6

#define EDITOR_TILES	24
const unsigned char edittiles[EDITOR_TILES] PROGMEM = {
	BLOCK,
	BLANK,
	START,
	EXIT,
	CHIP_O,
	LED,
	CON_B,
	CON_U,
	CON_D,
	CON_L,
	CON_R,
	TRAP_C,
	TRAP_O,
	CAP_B,
	CAP_O,
	CAP_I,
	TELE,
	ROT_B,
	ROT_H,
	ROT_V,
	ROT_TL,
	ROT_TR,
	ROT_BL,
	ROT_BR
};

unsigned char temperature = 0;
boolean levelcomplete = false;
unsigned char posx = 0;
unsigned char posy = 0;
char aposx = 0;
char aposy = 0;
unsigned char movetimer = 0;
unsigned char state = DIR_SPAWNED;
unsigned char tele[2][2];

const unsigned char maps[LEVELS][70] PROGMEM = {
	{
		// Level 1
		123, 222, 247, 189, 239, 121, 206, 115, 156, 239, 121, 218, 115, 164, 239, 121, 206, 115, 156, 239, 121, 206, 115, 156, 239, 121, 202, 115, 148, 239, 121, 206, 115, 156, 239, 121, 206, 115, 156, 239, 121, 202, 115, 148, 239, 121, 206, 115, 156, 239, 121, 224, 115, 192, 239, 121, 206, 115, 156, 239, 121, 206, 115, 156, 239, 123, 222, 247, 189, 239
	}, {
		// Level 2
		123, 222, 247, 189, 239, 124, 14, 115, 156, 239, 121, 206, 114, 148, 239, 121, 218, 114, 148, 239, 121, 206, 114, 148, 239, 121, 206, 115, 156, 239, 124, 14, 115, 156, 239, 123, 222, 82, 149, 239, 123, 222, 82, 149, 239, 123, 222, 82, 149, 239, 124, 14, 115, 156, 239, 121, 206, 147, 156, 239, 124, 14, 115, 156, 239, 123, 222, 247, 189, 239
	}, {
		// Level 3
		123, 222, 247, 189, 239, 121, 78, 115, 156, 175, 121, 222, 242, 188, 239, 121, 223, 2, 156, 239, 121, 223, 2, 188, 239, 121, 222, 115, 188, 175, 121, 222, 118, 188, 175, 121, 222, 115, 156, 175, 121, 206, 116, 188, 175, 121, 222, 115, 188, 239, 121, 95, 7, 188, 231, 121, 223, 7, 192, 165, 121, 78, 115, 156, 165, 123, 222, 247, 189, 239
	}, {
		// Level 4
		123, 222, 247, 189, 239, 121, 206, 115, 156, 239, 121, 206, 211, 164, 239, 121, 206, 115, 156, 239, 121, 94, 247, 217, 239, 121, 222, 115, 216, 239, 121, 94, 115, 216, 239, 121, 222, 115, 216, 239, 121, 94, 247, 217, 239, 121, 206, 115, 156, 239, 121, 206, 115, 156, 239, 121, 222, 247, 188, 239, 124, 30, 247, 190, 15, 123, 222, 247, 189, 239
	}, {
		// Level 5
		41, 74, 247, 188, 165, 41, 74, 247, 188, 165, 41, 203, 90, 212, 231, 125, 158, 247, 190, 239, 125, 158, 247, 190, 239, 125, 158, 247, 190, 239, 41, 233, 74, 29, 165, 123, 222, 247, 190, 239, 123, 222, 247, 190, 239, 123, 222, 247, 190, 239, 129, 222, 247, 192, 229, 73, 233, 74, 28, 229, 129, 222, 247, 192, 229, 123, 222, 247, 189, 239
	}, {
		// Level 6
		124, 15, 3, 192, 239, 121, 206, 115, 156, 239, 123, 222, 247, 189, 239, 123, 202, 87, 148, 175, 123, 238, 82, 148, 175, 123, 238, 91, 148, 175, 123, 238, 91, 182, 239, 73, 206, 122, 82, 143, 123, 238, 251, 62, 207, 121, 110, 91, 22, 197, 121, 78, 83, 148, 229, 121, 78, 83, 148, 229, 121, 74, 82, 148, 165, 123, 222, 247, 189, 239
	}, {
		// Level 7
		41, 74, 247, 156, 231, 43, 203, 83, 221, 231, 41, 74, 242, 157, 246, 57, 206, 242, 148, 165, 57, 207, 70, 212, 244, 57, 206, 242, 148, 165, 41, 74, 242, 157, 247, 43, 203, 83, 217, 231, 41, 74, 243, 156, 231, 123, 222, 251, 189, 239, 57, 206, 115, 156, 231, 60, 14, 115, 158, 7, 60, 14, 116, 158, 7, 57, 206, 115, 156, 231
	}, {
		// Level 8
		123, 222, 247, 189, 239, 124, 14, 115, 158, 15, 121, 218, 115, 157, 47, 124, 14, 115, 158, 15, 123, 223, 119, 189, 239, 123, 223, 119, 189, 239, 123, 223, 119, 189, 239, 123, 223, 119, 189, 239, 121, 74, 114, 148, 175, 121, 94, 119, 188, 175, 121, 94, 71, 188, 175, 121, 94, 119, 188, 175, 121, 74, 114, 148, 175, 123, 222, 247, 189, 239
	}, {
		// Level 9
		57, 206, 247, 156, 231, 59, 78, 82, 157, 39, 57, 206, 247, 156, 231, 123, 238, 247, 190, 239, 57, 206, 243, 148, 165, 41, 74, 243, 149, 229, 41, 75, 83, 149, 229, 41, 74, 243, 149, 229, 57, 206, 243, 148, 165, 123, 238, 247, 190, 239, 41, 78, 119, 156, 231, 41, 74, 87, 156, 135, 41, 74, 90, 156, 231, 41, 74, 87, 156, 231
	}, {
		// Level 10
		123, 222, 247, 189, 239, 121, 233, 74, 82, 140, 121, 30, 247, 190, 199, 121, 222, 147, 212, 231, 125, 158, 247, 188, 231, 125, 142, 114, 148, 231, 125, 158, 119, 188, 231, 121, 222, 119, 192, 231, 121, 222, 87, 156, 231, 121, 222, 87, 157, 167, 121, 232, 122, 28, 231, 125, 222, 87, 192, 231, 125, 78, 90, 214, 207, 123, 222, 247, 189, 239
	}, {
		// Level 11
		41, 94, 119, 156, 231, 41, 94, 119, 157, 167, 41, 78, 112, 29, 39, 41, 78, 119, 156, 231, 123, 222, 7, 188, 15, 41, 94, 119, 188, 239, 41, 74, 119, 188, 239, 41, 74, 119, 190, 207, 123, 222, 7, 190, 207, 57, 206, 115, 190, 207, 57, 74, 83, 130, 207, 57, 74, 83, 190, 207, 57, 74, 83, 190, 207, 57, 206, 115, 190, 207
	}, {
		// Level 12
		145, 222, 119, 156, 231, 145, 222, 112, 29, 39, 145, 222, 119, 156, 231, 123, 222, 119, 189, 239, 125, 206, 83, 209, 239, 121, 222, 119, 157, 239, 121, 78, 3, 149, 239, 121, 222, 119, 157, 239, 121, 206, 115, 217, 239, 123, 222, 7, 189, 239, 145, 222, 119, 156, 231, 145, 222, 112, 29, 167, 145, 222, 119, 156, 231, 145, 222, 247, 156, 231
	}, {
		// Level 13
		123, 222, 247, 189, 239, 121, 206, 114, 148, 239, 121, 196, 114, 148, 239, 121, 206, 114, 148, 239, 123, 228, 247, 188, 239, 121, 206, 119, 188, 239, 129, 224, 119, 189, 175, 129, 210, 119, 188, 239, 121, 206, 119, 188, 239, 123, 228, 247, 188, 239, 121, 206, 114, 148, 239, 121, 206, 114, 148, 239, 121, 206, 114, 148, 239, 123, 222, 247, 189, 239
	}, {
		// Level 14
		123, 222, 247, 156, 231, 121, 74, 82, 149, 242, 121, 68, 18, 149, 229, 121, 74, 82, 149, 229, 120, 94, 247, 189, 242, 57, 222, 81, 20, 167, 105, 222, 82, 148, 167, 73, 222, 80, 148, 167, 57, 222, 82, 156, 231, 120, 94, 25, 61, 242, 125, 138, 82, 149, 229, 125, 158, 23, 149, 229, 125, 138, 82, 149, 242, 125, 138, 82, 148, 167
	}, {
		// Level 15
		75, 206, 114, 148, 231, 11, 206, 114, 148, 231, 11, 196, 242, 148, 231, 57, 206, 247, 188, 47, 57, 238, 242, 148, 165, 57, 238, 114, 148, 165, 57, 235, 90, 136, 162, 8, 66, 114, 148, 165, 123, 194, 242, 148, 165, 123, 196, 247, 189, 239, 41, 79, 35, 156, 231, 41, 79, 35, 180, 226, 41, 79, 35, 156, 231, 123, 222, 247, 189, 239
	}, {
		// Level 16
		123, 222, 247, 189, 239, 61, 40, 32, 208, 231, 43, 222, 247, 188, 165, 43, 224, 115, 190, 65, 43, 206, 211, 156, 229, 43, 206, 147, 156, 229, 43, 224, 115, 190, 65, 43, 222, 247, 188, 165, 57, 78, 82, 148, 231, 43, 236, 247, 188, 239, 43, 236, 42, 20, 229, 43, 222, 247, 188, 239, 57, 232, 42, 20, 229, 35, 222, 247, 189, 239
	}, {
		// Level 17
		123, 222, 247, 150, 69, 57, 206, 119, 148, 69, 41, 94, 7, 150, 69, 41, 94, 7, 150, 69, 41, 94, 7, 150, 69, 57, 222, 115, 148, 165, 11, 222, 243, 190, 79, 57, 223, 3, 188, 175, 105, 222, 147, 188, 175, 57, 223, 3, 156, 231, 121, 222, 247, 189, 231, 121, 194, 82, 148, 39, 125, 222, 82, 149, 246, 17, 228, 82, 150, 71
	}, {
		// Level 18
		17, 232, 114, 148, 165, 57, 222, 82, 148, 165, 187, 222, 247, 188, 165, 57, 222, 67, 188, 165, 41, 106, 211, 156, 50, 57, 222, 35, 188, 165, 179, 222, 247, 188, 165, 57, 222, 82, 148, 165, 33, 234, 114, 190, 82, 179, 222, 247, 188, 165, 9, 74, 83, 208, 231, 41, 74, 82, 188, 165, 3, 222, 247, 190, 82, 57, 210, 113, 28, 231
	}, {
		// Level 19
		123, 222, 250, 214, 183, 121, 74, 91, 20, 183, 121, 74, 251, 20, 183, 121, 74, 247, 148, 183, 121, 192, 115, 128, 244, 125, 159, 119, 190, 207, 121, 207, 71, 188, 239, 121, 206, 247, 156, 239, 121, 74, 247, 148, 175, 121, 74, 247, 148, 175, 121, 74, 247, 148, 175, 121, 74, 115, 148, 175, 121, 206, 115, 156, 239, 123, 222, 212, 189, 239
	}, {
		// Level 20
		41, 74, 82, 189, 239, 41, 74, 82, 190, 16, 121, 94, 240, 60, 237, 121, 30, 243, 156, 233, 121, 94, 115, 156, 231, 121, 94, 119, 189, 239, 121, 206, 119, 189, 239, 121, 206, 119, 189, 239, 123, 206, 119, 189, 239, 41, 74, 82, 148, 165, 41, 74, 82, 150, 165, 41, 74, 90, 216, 165, 41, 74, 82, 148, 165, 41, 74, 82, 148, 165
	}, {
		// Level 21
		129, 206, 115, 132, 33, 57, 210, 35, 132, 33, 129, 218, 115, 132, 33, 57, 206, 115, 132, 33, 187, 223, 39, 190, 207, 17, 75, 34, 150, 207, 57, 74, 82, 150, 207, 11, 222, 242, 150, 207, 41, 74, 242, 150, 207, 17, 75, 81, 22, 207, 148, 138, 242, 150, 207, 148, 138, 247, 190, 207, 17, 75, 34, 156, 239, 41, 75, 34, 189, 239
	}, {
		// Level 22
		57, 206, 243, 157, 231, 59, 79, 147, 159, 37, 57, 206, 243, 157, 231, 123, 222, 243, 157, 229, 129, 206, 115, 157, 231, 129, 210, 115, 157, 229, 129, 206, 115, 157, 231, 123, 222, 115, 157, 229, 57, 222, 243, 189, 231, 41, 206, 124, 156, 229, 57, 222, 243, 189, 239, 41, 222, 115, 157, 239, 57, 206, 115, 157, 239, 129, 224, 120, 29, 239
	}, {
		// Level 23
		129, 206, 115, 156, 231, 129, 198, 118, 157, 39, 129, 206, 115, 156, 231, 129, 206, 115, 156, 231, 123, 223, 151, 189, 239, 123, 206, 115, 189, 239, 123, 206, 115, 189, 239, 123, 206, 115, 189, 239, 123, 206, 115, 189, 239, 123, 223, 135, 189, 239, 129, 206, 115, 148, 165, 129, 206, 115, 151, 37, 129, 198, 115, 148, 165, 129, 206, 115, 148, 165
	}, {
		// Level 24
		123, 222, 247, 157, 169, 120, 202, 83, 156, 231, 121, 94, 247, 221, 229, 121, 94, 247, 221, 229, 121, 74, 83, 157, 229, 123, 222, 252, 61, 248, 41, 74, 243, 188, 231, 41, 74, 243, 188, 239, 40, 203, 83, 224, 239, 40, 138, 83, 188, 239, 125, 222, 252, 60, 239, 41, 74, 83, 188, 239, 40, 138, 83, 200, 239, 41, 94, 247, 189, 239
	}, {
		// Level 25
		123, 222, 247, 190, 16, 123, 222, 247, 190, 16, 129, 248, 126, 112, 233, 129, 241, 222, 244, 231, 129, 240, 119, 189, 239, 123, 240, 247, 157, 239, 121, 206, 115, 232, 239, 123, 222, 247, 156, 239, 121, 74, 126, 156, 239, 121, 74, 115, 189, 239, 121, 90, 82, 190, 16, 121, 74, 82, 190, 16, 123, 222, 247, 190, 16, 123, 222, 247, 190, 16
	}, {
		// Level 26
		123, 222, 247, 189, 239, 63, 56, 83, 243, 143, 110, 250, 115, 239, 175, 123, 222, 82, 156, 239, 121, 222, 91, 188, 239, 122, 94, 82, 188, 239, 121, 222, 83, 188, 239, 121, 222, 93, 188, 239, 121, 222, 247, 188, 239, 121, 202, 82, 148, 239, 121, 202, 83, 148, 239, 121, 222, 251, 60, 239, 121, 202, 91, 20, 239, 123, 222, 247, 189, 239
	}, {
		// Level 27
		57, 68, 83, 156, 231, 57, 70, 87, 189, 231, 57, 74, 87, 189, 231, 147, 222, 115, 158, 135, 59, 222, 251, 61, 231, 75, 202, 251, 60, 167, 59, 206, 241, 60, 175, 107, 206, 251, 60, 175, 57, 207, 91, 80, 175, 62, 56, 247, 188, 239, 126, 48, 247, 190, 239, 126, 48, 247, 188, 239, 121, 78, 112, 156, 175, 123, 222, 247, 189, 239
	}, {
		// Level 28
		123, 222, 253, 103, 60, 57, 206, 115, 210, 152, 43, 202, 242, 190, 216, 45, 107, 90, 214, 216, 43, 202, 242, 190, 216, 43, 202, 242, 190, 216, 105, 206, 115, 164, 231, 43, 202, 242, 190, 248, 43, 202, 242, 190, 248, 45, 107, 90, 214, 248, 43, 202, 242, 190, 248, 43, 202, 242, 190, 248, 57, 206, 115, 210, 152, 123, 222, 253, 231, 61
	}, {
		// Level 29
		59, 222, 242, 148, 165, 62, 51, 130, 148, 165, 59, 206, 242, 148, 165, 75, 207, 66, 148, 165, 123, 206, 247, 217, 239, 57, 206, 114, 148, 167, 57, 206, 115, 156, 231, 57, 224, 247, 190, 7, 57, 222, 247, 189, 231, 57, 222, 247, 189, 231, 59, 78, 82, 148, 165, 57, 222, 82, 148, 165, 57, 222, 91, 148, 183, 63, 79, 74, 14, 148
	}, {
		// Level 30
		57, 206, 247, 189, 239, 60, 14, 247, 189, 239, 57, 206, 242, 148, 167, 123, 222, 242, 148, 165, 123, 222, 242, 150, 5, 105, 206, 114, 148, 165, 57, 206, 82, 148, 169, 59, 222, 82, 149, 239, 57, 206, 114, 149, 239, 41, 119, 156, 245, 239, 44, 14, 240, 21, 239, 41, 74, 247, 189, 239, 123, 222, 247, 156, 231, 123, 222, 247, 158, 7
	}, {
		// Level 31
		123, 206, 115, 188, 229, 131, 206, 125, 228, 229, 105, 206, 115, 188, 229, 131, 202, 82, 188, 229, 123, 202, 82, 188, 229, 46, 142, 115, 188, 229, 46, 14, 115, 188, 101, 123, 222, 241, 61, 239, 41, 197, 35, 200, 165, 126, 94, 249, 31, 37, 121, 206, 115, 156, 239, 120, 94, 247, 189, 239, 129, 206, 82, 157, 47, 129, 206, 82, 156, 239
	}, {
		// Level 32
		45, 232, 115, 214, 229, 45, 222, 51, 190, 229, 45, 222, 252, 62, 231, 45, 232, 83, 210, 150, 45, 222, 115, 190, 214, 45, 222, 115, 190, 214, 57, 242, 118, 228, 231, 45, 222, 115, 190, 215, 45, 222, 115, 190, 215, 45, 106, 114, 214, 215, 45, 159, 135, 190, 199, 45, 158, 115, 190, 197, 61, 158, 115, 190, 197, 77, 168, 115, 214, 197
	}, {
		// Level 33
		123, 222, 247, 189, 239, 121, 206, 119, 156, 239, 121, 204, 122, 156, 239, 121, 206, 119, 156, 239, 121, 74, 87, 156, 239, 121, 74, 87, 156, 239, 123, 222, 247, 164, 239, 123, 222, 247, 180, 239, 121, 74, 87, 156, 239, 121, 74, 87, 156, 239, 121, 206, 119, 156, 239, 121, 204, 122, 28, 239, 121, 206, 119, 156, 239, 123, 222, 247, 189, 239
	}, {
		// Level 34
		41, 94, 247, 189, 239, 41, 138, 82, 149, 175, 121, 94, 247, 189, 239, 121, 94, 247, 189, 239, 121, 94, 247, 148, 165, 121, 94, 247, 148, 165, 121, 142, 115, 156, 133, 121, 94, 247, 148, 165, 121, 94, 247, 148, 229, 121, 94, 247, 188, 239, 125, 107, 90, 214, 175, 121, 74, 87, 188, 239, 121, 74, 87, 189, 47, 123, 222, 247, 189, 239
	}, {
		// Level 35
		57, 223, 122, 82, 143, 73, 223, 119, 190, 207, 105, 206, 103, 188, 79, 57, 223, 119, 190, 207, 120, 95, 90, 214, 207, 57, 222, 247, 188, 239, 57, 222, 247, 188, 239, 57, 222, 115, 188, 239, 57, 222, 247, 188, 239, 57, 222, 247, 188, 239, 57, 206, 82, 156, 239, 123, 222, 82, 189, 239, 41, 74, 82, 189, 239, 49, 74, 82, 189, 239
	}, {
		// Level 36
		51, 222, 247, 189, 239, 169, 76, 82, 148, 39, 59, 222, 247, 189, 231, 56, 74, 82, 150, 167, 59, 222, 247, 189, 231, 57, 74, 82, 148, 167, 59, 222, 82, 189, 231, 59, 94, 82, 189, 39, 59, 222, 82, 189, 231, 57, 228, 82, 200, 231, 59, 222, 82, 189, 231, 59, 222, 247, 189, 231, 59, 222, 82, 189, 231, 165, 40, 65, 82, 148
	}, {
		// Level 37
		41, 74, 87, 148, 197, 41, 74, 87, 148, 165, 41, 74, 89, 20, 165, 41, 74, 89, 28, 231, 41, 74, 87, 157, 167, 41, 74, 87, 156, 231, 75, 222, 247, 190, 239, 123, 225, 7, 188, 165, 35, 222, 247, 188, 165, 57, 78, 39, 188, 165, 41, 74, 247, 188, 165, 41, 138, 247, 188, 165, 41, 74, 82, 148, 165, 41, 74, 82, 148, 165
	}, {
		// Level 38
		123, 222, 247, 189, 239, 123, 222, 82, 149, 239, 123, 222, 88, 80, 175, 123, 222, 82, 152, 175, 123, 222, 242, 189, 239, 123, 202, 82, 148, 175, 123, 202, 82, 152, 175, 75, 75, 82, 148, 175, 59, 202, 92, 148, 175, 59, 222, 242, 149, 239, 59, 222, 242, 149, 239, 59, 222, 243, 189, 239, 57, 206, 115, 189, 239, 123, 222, 247, 189, 239
	}, {
		// Level 39
		123, 222, 114, 148, 165, 123, 222, 114, 148, 197, 121, 206, 114, 148, 165, 125, 158, 82, 149, 239, 125, 158, 83, 149, 239, 125, 158, 82, 149, 239, 125, 159, 119, 189, 239, 41, 202, 115, 148, 165, 43, 222, 243, 189, 237, 41, 206, 83, 149, 233, 123, 202, 247, 148, 165, 41, 74, 82, 188, 229, 41, 76, 82, 156, 229, 41, 74, 82, 188, 229
	}, {
		// Level 40
		105, 74, 87, 148, 165, 41, 74, 115, 152, 165, 41, 74, 119, 148, 165, 43, 223, 39, 148, 165, 195, 222, 87, 148, 165, 195, 223, 39, 221, 247, 195, 202, 82, 157, 247, 57, 138, 34, 157, 247, 195, 202, 82, 157, 247, 195, 222, 247, 129, 247, 56, 82, 247, 157, 247, 41, 100, 243, 148, 165, 41, 74, 125, 103, 165, 41, 75, 158, 148, 165
	}, {
		// Level 41
		123, 222, 247, 189, 239, 123, 78, 84, 148, 239, 125, 174, 247, 190, 207, 169, 206, 82, 156, 244, 179, 238, 247, 190, 246, 179, 206, 82, 148, 246, 179, 222, 251, 189, 246, 177, 78, 83, 148, 246, 179, 238, 247, 189, 239, 177, 78, 83, 148, 247, 179, 238, 251, 61, 247, 177, 78, 91, 20, 244, 177, 78, 122, 156, 239, 123, 222, 247, 189, 239
	}, {
		// Level 42
		57, 206, 115, 148, 165, 187, 222, 243, 148, 164, 187, 207, 67, 148, 165, 187, 200, 247, 189, 239, 45, 78, 242, 29, 47, 59, 202, 243, 156, 239, 45, 15, 67, 180, 239, 187, 206, 243, 156, 239, 187, 238, 247, 190, 207, 61, 15, 66, 148, 229, 187, 238, 247, 190, 207, 59, 206, 242, 148, 231, 59, 206, 243, 189, 229, 61, 79, 83, 148, 165
	}, {
		// Level 43
		123, 222, 247, 189, 239, 57, 206, 116, 156, 175, 43, 222, 249, 62, 239, 45, 106, 82, 157, 175, 43, 238, 87, 190, 239, 179, 238, 87, 148, 229, 179, 238, 87, 220, 150, 180, 142, 119, 221, 246, 179, 238, 247, 221, 246, 179, 238, 82, 148, 231, 179, 202, 247, 190, 207, 177, 78, 18, 148, 231, 177, 78, 242, 149, 229, 33, 78, 18, 148, 162
	}, {
		// Level 44
		130, 90, 115, 148, 37, 123, 222, 249, 20, 165, 123, 222, 242, 134, 66, 121, 206, 121, 22, 69, 121, 206, 247, 189, 239, 209, 116, 87, 189, 239, 25, 74, 103, 188, 231, 46, 241, 215, 188, 231, 222, 116, 87, 189, 239, 123, 222, 247, 189, 239, 123, 203, 82, 149, 239, 123, 205, 66, 213, 239, 123, 202, 75, 213, 239, 123, 222, 87, 149, 239
	}, {
		// Level 45
		57, 206, 115, 240, 252, 179, 223, 119, 157, 231, 176, 143, 119, 157, 242, 178, 90, 124, 157, 229, 176, 207, 119, 157, 229, 179, 223, 119, 156, 165, 57, 78, 119, 221, 229, 179, 206, 119, 157, 229, 179, 202, 87, 157, 242, 179, 222, 247, 157, 231, 59, 206, 115, 157, 231, 61, 14, 115, 156, 167, 59, 222, 247, 201, 231, 56, 74, 83, 156, 167
	}, {
		// Level 46
		20, 164, 16, 132, 226, 43, 202, 82, 188, 167, 11, 202, 82, 189, 242, 9, 78, 115, 156, 178, 9, 78, 118, 156, 178, 145, 78, 115, 156, 161, 147, 222, 82, 189, 225, 57, 94, 82, 188, 167, 57, 229, 41, 72, 231, 197, 222, 115, 191, 22, 192, 158, 147, 191, 3, 197, 222, 115, 191, 22, 57, 243, 156, 228, 231, 43, 222, 82, 189, 229
	}, {
		// Level 47
		41, 78, 82, 156, 165, 187, 236, 247, 221, 229, 43, 207, 35, 158, 135, 43, 206, 242, 149, 231, 72, 78, 247, 157, 231, 59, 202, 87, 149, 231, 217, 202, 87, 158, 167, 59, 222, 119, 157, 237, 59, 222, 115, 157, 231, 59, 222, 87, 149, 231, 43, 222, 42, 29, 231, 61, 41, 71, 157, 231, 179, 222, 247, 217, 231, 41, 74, 82, 156, 231
	}, {
		// Level 48
		57, 203, 131, 148, 231, 59, 222, 247, 189, 231, 61, 10, 34, 141, 229, 43, 202, 82, 149, 231, 59, 202, 82, 149, 231, 59, 202, 82, 149, 231, 147, 202, 81, 21, 225, 75, 202, 210, 149, 231, 59, 202, 82, 141, 231, 59, 202, 82, 149, 231, 59, 198, 82, 149, 229, 43, 202, 34, 150, 167, 59, 222, 247, 189, 231, 57, 202, 124, 20, 231
	}, {
		// Level 49
		123, 222, 247, 189, 239, 121, 206, 115, 156, 239, 121, 207, 189, 156, 239, 121, 245, 156, 232, 239, 121, 244, 82, 232, 239, 121, 245, 156, 232, 239, 121, 207, 189, 156, 239, 129, 206, 115, 156, 240, 63, 123, 206, 232, 231, 63, 48, 92, 116, 227, 63, 112, 92, 112, 237, 63, 112, 92, 116, 233, 63, 119, 222, 116, 231, 57, 206, 115, 156, 231
	}, {
		// Level 50
		105, 206, 115, 156, 4, 59, 222, 247, 189, 224, 59, 196, 71, 164, 231, 59, 202, 87, 189, 231, 60, 142, 112, 158, 71, 187, 223, 103, 221, 246, 57, 75, 103, 221, 231, 59, 223, 103, 221, 231, 61, 107, 103, 221, 231, 59, 223, 74, 28, 7, 187, 222, 119, 189, 246, 57, 194, 82, 132, 231, 57, 222, 82, 188, 231, 57, 194, 82, 132, 231
	}, {
		// Level 51
		40, 168, 122, 20, 240, 41, 94, 87, 148, 233, 41, 94, 87, 148, 240, 40, 168, 122, 20, 231, 187, 222, 247, 157, 246, 56, 90, 115, 242, 182, 123, 202, 247, 157, 246, 41, 110, 242, 149, 246, 43, 238, 242, 149, 246, 43, 238, 243, 149, 246, 61, 15, 83, 156, 246, 41, 74, 242, 149, 246, 44, 10, 242, 148, 165, 41, 75, 83, 148, 167
	}, {
		// Level 52
		185, 206, 34, 28, 246, 187, 222, 247, 189, 246, 188, 10, 210, 166, 22, 185, 202, 114, 156, 246, 185, 74, 114, 149, 246, 123, 206, 251, 189, 246, 181, 107, 83, 149, 246, 177, 206, 242, 149, 246, 177, 203, 82, 148, 246, 145, 202, 82, 149, 246, 179, 206, 247, 201, 246, 177, 78, 18, 149, 246, 177, 78, 242, 148, 246, 33, 79, 34, 137, 239
	}, {
		// Level 53
		41, 74, 82, 148, 167, 44, 142, 252, 97, 231, 41, 120, 82, 149, 231, 43, 206, 119, 225, 231, 41, 75, 178, 148, 167, 11, 222, 119, 189, 237, 173, 107, 90, 214, 169, 121, 222, 247, 157, 231, 41, 202, 82, 156, 167, 123, 222, 87, 133, 231, 123, 222, 89, 22, 71, 123, 222, 87, 133, 231, 40, 138, 82, 148, 167, 41, 74, 82, 148, 167
	}, {
		// Level 54
		123, 222, 82, 149, 247, 129, 222, 82, 149, 247, 73, 206, 82, 148, 231, 129, 222, 82, 149, 246, 123, 222, 82, 149, 246, 123, 222, 247, 189, 246, 173, 107, 90, 214, 182, 125, 158, 247, 190, 207, 41, 74, 82, 148, 165, 193, 74, 93, 148, 165, 40, 202, 82, 228, 165, 41, 74, 82, 148, 101, 125, 159, 103, 190, 207, 121, 206, 115, 180, 239
	}, {
		// Level 55
		129, 206, 247, 189, 239, 75, 79, 90, 156, 175, 129, 206, 247, 148, 175, 121, 222, 247, 148, 175, 121, 232, 42, 28, 252, 121, 222, 247, 188, 248, 121, 232, 114, 231, 7, 121, 223, 119, 188, 248, 124, 159, 119, 190, 88, 121, 192, 32, 28, 248, 120, 94, 247, 188, 56, 121, 206, 114, 148, 248, 121, 74, 82, 148, 253, 123, 222, 247, 189, 239
	}, {
		// Level 56
		41, 74, 82, 189, 239, 41, 76, 82, 200, 231, 41, 74, 82, 200, 227, 41, 74, 82, 200, 231, 123, 222, 86, 189, 239, 123, 222, 82, 189, 239, 123, 222, 247, 189, 239, 129, 207, 140, 99, 7, 129, 206, 247, 189, 231, 129, 206, 242, 148, 165, 129, 210, 242, 188, 165, 129, 206, 243, 20, 69, 129, 206, 242, 148, 165, 129, 206, 242, 148, 165
	}, {
		// Level 57
		41, 74, 90, 157, 237, 41, 74, 92, 159, 39, 57, 206, 119, 157, 229, 41, 74, 87, 157, 229, 147, 222, 247, 157, 242, 57, 74, 82, 156, 167, 179, 222, 247, 157, 247, 41, 74, 87, 157, 231, 57, 202, 82, 157, 229, 19, 238, 247, 157, 229, 59, 206, 87, 133, 231, 75, 202, 90, 158, 135, 59, 222, 247, 157, 231, 61, 41, 74, 29, 229
	}, {
		// Level 58
		57, 68, 87, 193, 48, 57, 78, 87, 156, 231, 57, 78, 87, 156, 231, 187, 236, 247, 190, 207, 104, 78, 122, 82, 207, 195, 236, 247, 156, 165, 195, 203, 90, 156, 165, 195, 202, 247, 156, 165, 195, 207, 91, 239, 151, 195, 228, 251, 235, 183, 57, 206, 243, 156, 231, 41, 79, 147, 148, 165, 41, 78, 243, 148, 165, 25, 79, 67, 148, 165
	}, {
		// Level 59
		41, 94, 82, 148, 165, 56, 222, 82, 148, 165, 203, 222, 242, 236, 165, 193, 222, 242, 148, 165, 201, 206, 115, 189, 231, 57, 218, 115, 156, 231, 57, 206, 119, 189, 231, 59, 222, 82, 148, 184, 59, 202, 82, 188, 184, 59, 202, 92, 20, 184, 59, 222, 82, 148, 184, 57, 233, 74, 82, 137, 121, 202, 82, 148, 111, 121, 202, 82, 148, 175
	}, {
		// Level 60
		41, 74, 82, 148, 165, 41, 74, 82, 148, 165, 123, 222, 82, 149, 239, 123, 222, 83, 21, 239, 123, 222, 82, 149, 239, 123, 222, 82, 149, 239, 41, 95, 163, 231, 135, 41, 94, 124, 31, 167, 41, 79, 174, 228, 231, 41, 94, 87, 189, 229, 41, 94, 87, 164, 165, 49, 94, 87, 180, 165, 41, 94, 87, 189, 229, 123, 222, 82, 148, 165
	}, {
		// Level 61
		41, 199, 119, 189, 239, 187, 197, 74, 82, 148, 59, 202, 119, 156, 231, 45, 78, 119, 156, 165, 60, 142, 119, 235, 28, 123, 206, 119, 159, 167, 121, 206, 125, 157, 231, 123, 78, 115, 189, 231, 123, 222, 247, 188, 165, 73, 206, 119, 188, 165, 123, 207, 163, 132, 231, 121, 246, 115, 188, 165, 121, 222, 247, 188, 165, 121, 206, 115, 156, 231
	}, {
		// Level 62
		57, 228, 82, 132, 240, 105, 228, 82, 132, 233, 57, 222, 247, 188, 240, 57, 223, 192, 156, 239, 57, 242, 119, 189, 239, 57, 222, 119, 148, 101, 40, 46, 7, 157, 231, 43, 206, 119, 157, 231, 21, 78, 122, 112, 231, 19, 206, 119, 190, 207, 21, 14, 114, 148, 175, 123, 206, 114, 148, 175, 120, 206, 114, 148, 175, 123, 222, 247, 189, 239
	}, {
		// Level 63
		41, 94, 151, 148, 165, 169, 222, 119, 148, 229, 41, 115, 156, 150, 197, 57, 94, 119, 148, 165, 182, 30, 119, 189, 247, 62, 14, 115, 156, 231, 62, 30, 247, 189, 246, 62, 202, 82, 148, 231, 43, 222, 247, 189, 167, 43, 206, 82, 148, 231, 61, 14, 119, 190, 207, 43, 207, 163, 156, 227, 43, 206, 119, 190, 239, 57, 206, 115, 156, 231
	}, {
		// Level 64
		57, 206, 115, 156, 246, 59, 223, 189, 111, 118, 160, 135, 188, 239, 150, 59, 223, 189, 239, 22, 57, 206, 23, 191, 86, 123, 222, 18, 151, 182, 130, 94, 87, 188, 165, 131, 94, 83, 21, 231, 129, 222, 247, 189, 231, 120, 94, 82, 189, 231, 57, 206, 82, 149, 231, 41, 74, 82, 149, 231, 41, 94, 242, 148, 231, 121, 76, 82, 189, 239
	}, {
		// Level 65
		62, 115, 156, 159, 3, 59, 222, 247, 157, 229, 59, 222, 247, 157, 231, 187, 222, 247, 157, 231, 61, 78, 87, 157, 231, 43, 202, 82, 157, 45, 43, 202, 87, 157, 231, 61, 10, 87, 157, 231, 187, 222, 247, 157, 231, 59, 222, 247, 157, 231, 43, 222, 247, 157, 231, 43, 222, 247, 157, 231, 43, 222, 247, 157, 229, 62, 115, 156, 159, 3
	}, {
		// Level 66
		123, 222, 247, 189, 239, 121, 235, 83, 210, 135, 121, 94, 243, 189, 231, 121, 94, 243, 188, 103, 121, 222, 243, 189, 231, 121, 223, 173, 239, 135, 121, 207, 222, 235, 103, 123, 79, 221, 239, 103, 121, 223, 190, 119, 167, 121, 222, 243, 189, 231, 121, 94, 243, 189, 229, 121, 74, 115, 156, 165, 123, 222, 115, 157, 239, 123, 223, 4, 193, 239
	}, {
		// Level 67
		41, 74, 90, 148, 165, 41, 68, 89, 20, 165, 41, 74, 87, 148, 165, 184, 94, 247, 156, 167, 57, 206, 122, 28, 231, 179, 223, 119, 191, 15, 57, 74, 119, 164, 237, 187, 223, 103, 191, 15, 57, 234, 114, 156, 231, 41, 74, 82, 189, 225, 41, 74, 34, 188, 167, 11, 222, 82, 200, 165, 41, 75, 39, 188, 165, 41, 74, 114, 148, 162
	}, {
		// Level 68
		41, 75, 34, 140, 175, 40, 203, 34, 148, 175, 198, 178, 126, 239, 103, 57, 206, 115, 156, 231, 123, 206, 247, 189, 239, 123, 207, 90, 149, 239, 123, 202, 247, 151, 175, 43, 78, 114, 148, 169, 123, 202, 247, 151, 79, 123, 207, 90, 149, 239, 57, 207, 39, 189, 239, 231, 112, 115, 148, 167, 41, 74, 242, 148, 182, 16, 202, 242, 140, 182
	}, {
		// Level 69
		132, 30, 122, 150, 162, 132, 30, 87, 190, 82, 123, 222, 119, 156, 231, 57, 206, 124, 156, 233, 187, 236, 247, 189, 231, 27, 236, 241, 21, 246, 147, 236, 242, 149, 226, 187, 236, 253, 241, 246, 57, 206, 82, 148, 167, 59, 223, 135, 221, 248, 61, 78, 119, 142, 173, 57, 74, 87, 217, 239, 59, 222, 247, 148, 175, 60, 138, 50, 148, 175
	}, {
		// Level 70
		17, 94, 87, 188, 167, 27, 246, 124, 105, 227, 59, 243, 188, 101, 249, 203, 251, 221, 101, 242, 217, 206, 115, 156, 231, 57, 222, 247, 189, 239, 62, 244, 125, 96, 250, 63, 123, 188, 239, 165, 59, 222, 119, 189, 239, 57, 206, 115, 156, 231, 57, 222, 251, 74, 7, 41, 74, 251, 22, 7, 40, 138, 251, 22, 13, 46, 11, 81, 202, 9
	}, {
		// Level 71
		57, 192, 112, 156, 101, 41, 94, 119, 148, 165, 41, 94, 119, 202, 82, 17, 94, 122, 4, 165, 57, 94, 119, 156, 231, 3, 222, 7, 189, 246, 57, 192, 208, 28, 231, 225, 222, 151, 189, 248, 195, 222, 7, 138, 167, 193, 234, 119, 216, 165, 16, 232, 124, 232, 165, 41, 94, 119, 156, 167, 41, 94, 119, 232, 184, 41, 206, 124, 159, 5
	}, {
		// Level 72
		189, 41, 74, 82, 148, 187, 222, 243, 189, 239, 187, 222, 82, 148, 111, 187, 222, 81, 148, 175, 185, 75, 146, 151, 5, 73, 74, 87, 188, 183, 121, 70, 87, 188, 183, 121, 75, 146, 151, 5, 123, 222, 81, 148, 175, 123, 222, 82, 148, 175, 123, 222, 243, 189, 239, 129, 206, 115, 148, 165, 131, 78, 115, 148, 101, 129, 206, 115, 148, 165
	}, {
		// Level 73
		57, 206, 119, 156, 231, 56, 218, 119, 157, 39, 57, 206, 119, 156, 231, 182, 245, 215, 192, 176, 182, 183, 183, 235, 156, 182, 185, 135, 239, 156, 182, 178, 119, 235, 189, 182, 52, 119, 227, 125, 182, 187, 183, 226, 239, 182, 52, 55, 226, 239, 183, 56, 125, 226, 239, 182, 183, 140, 118, 239, 181, 41, 74, 82, 143, 123, 222, 247, 189, 239
	}, {
		// Level 74
		59, 206, 82, 149, 233, 62, 78, 50, 231, 39, 59, 206, 82, 149, 231, 59, 238, 247, 189, 231, 59, 206, 90, 214, 167, 59, 236, 247, 189, 231, 59, 206, 82, 149, 237, 59, 202, 82, 235, 39, 59, 202, 82, 227, 39, 62, 78, 82, 149, 231, 59, 236, 251, 189, 231, 59, 202, 83, 188, 231, 57, 74, 50, 148, 239, 57, 74, 82, 189, 239
	}, {
		// Level 75
		45, 78, 18, 136, 39, 59, 206, 242, 149, 231, 59, 206, 242, 149, 231, 61, 15, 34, 138, 71, 43, 202, 247, 217, 231, 43, 202, 242, 148, 167, 21, 78, 82, 148, 169, 43, 202, 242, 148, 173, 43, 202, 247, 221, 231, 61, 15, 34, 136, 39, 59, 206, 242, 149, 231, 59, 206, 242, 149, 231, 59, 206, 242, 149, 231, 45, 78, 18, 138, 71
	}
};

#define MAP_WIDTH	14
#define MAP_HEIGHT	8
unsigned char currentmap[MAP_HEIGHT][MAP_WIDTH];
unsigned char compressedmap[70];

void readcustommap(unsigned char l) {
	EEPROM.get(CUSTOMLOCATION + l * 70, compressedmap);
}

void savecustommap(unsigned char l) {
	EEPROM.put(CUSTOMLOCATION + l * 70, compressedmap);
}

void compressmap() {
	unsigned char c = 0;
	for(unsigned char i = 0; i < 70; i += 5) {
 		compressedmap[i + 0] = (currentmap[0][c] << 0x3) | (currentmap[1][c] >> 0x2);
		compressedmap[i + 1] = (currentmap[1][c] << 0x6) | (currentmap[2][c] << 0x1) | (currentmap[3][c] >> 0x4);
		compressedmap[i + 2] = (currentmap[3][c] << 0x4) | (currentmap[4][c] >> 0x1);
		compressedmap[i + 3] = (currentmap[4][c] << 0x7) | (currentmap[5][c] << 0x2) | (currentmap[6][c] >> 0x3);
		compressedmap[i + 4] = (currentmap[6][c] << 0x5) | (currentmap[7][c]);
		c++;
	}
}

void clearcompressed() {
	for(unsigned char i = 0; i < 70; i += 5) {
		compressedmap[i + 0] = 57;
		compressedmap[i + 1] = 206;
		compressedmap[i + 2] = 115;
		compressedmap[i + 3] = 156;
		compressedmap[i + 4] = 231;
	}
}

void expandmap(unsigned char l, boolean iscustom) {
	unsigned char buffer[5];
	unsigned char c = 0;
	boolean isvalid = true;
	boolean isempty = true;
	for(unsigned char x = 0; x < 70; x += 5) {
		if(iscustom) {
			for(unsigned char i = 0; i < 5; i++) {
				buffer[i] = compressedmap[x + i];
			}
		} else {
			buffer[0] = pgm_read_byte(&maps[l][x + 0]);
			buffer[1] = pgm_read_byte(&maps[l][x + 1]);
			buffer[2] = pgm_read_byte(&maps[l][x + 2]);
			buffer[3] = pgm_read_byte(&maps[l][x + 3]);
			buffer[4] = pgm_read_byte(&maps[l][x + 4]);
		}
		currentmap[0][c] = (buffer[0] >> 0x3);
		currentmap[1][c] = ((buffer[0] << 0x2) & 0b00011111) | (buffer[1] >> 0x6);
		currentmap[2][c] = (buffer[1] >> 0x1) & 0b00011111;
		currentmap[3][c] = ((buffer[1] << 0x4) & 0b00011111) | (buffer[2] >> 0x4);
		currentmap[4][c] = ((buffer[2] << 0x1) & 0b00011111) | (buffer[3] >> 0x7);
		currentmap[5][c] = (buffer[3] >> 0x2) & 0b00011111;
		currentmap[6][c] = ((buffer[3] << 0x3) & 0b00011111) | (buffer[4] >> 0x5);
		currentmap[7][c] = (buffer[4] & 0b00011111);

		if(iscustom) {
			for(unsigned char i = 0; i < 8; i++) {
				if(currentmap[i][c] != 0) {
					isempty = false;
				}
				boolean validtile = false;
				for(unsigned char tile = 0; tile < EDITOR_TILES; tile++) {
					if(currentmap[i][c] == pgm_read_byte(&edittiles[tile])) {
						validtile = true;
						break;
					}
				}
				isvalid = (isvalid && validtile);
			}
		}
		c++;
	}

	if(iscustom && (isempty || !isvalid)) {
		clearcompressed();
		expandmap(l, iscustom);
	}
}

unsigned char findpiece(signed char x, signed char y, unsigned char direction) {
	if(direction == DIR_UP) {
		y--;
	}
	if(direction == DIR_DOWN) {
		y++;
	}
	if(direction == DIR_LEFT) {
		x--;
	}
	if(direction == DIR_RIGHT) {
		x++;
	}
	if(x < 0 || x >= MAP_WIDTH || y < 0 || y >= MAP_HEIGHT) {
		return BLOCK;
	}

	return currentmap[y][x];
}

boolean canenter(unsigned char direction) {
	unsigned char to = findpiece(posx / 8, posy / 8, direction);

	if(to < BLOCK) {
		return true;
	}
	if(to < CON_U) {
		return false;
	}

	if(to == CON_U && direction == DIR_DOWN) {
		return false;
	}
	if(to == CON_D && direction == DIR_UP) {
		return false;
	}
	if(to == CON_L && direction == DIR_RIGHT) {
		return false;
	}
	if(to == CON_R && direction == DIR_LEFT) {
		return false;
	}
	if(to == ROT_H && (direction == DIR_UP || direction == DIR_DOWN)) {
		return false;
	}
	if(to == ROT_V && (direction == DIR_LEFT || direction == DIR_RIGHT)) {
		return false;
	}
	if(to == ROT_TL && (direction == DIR_DOWN || direction == DIR_RIGHT)) {
		return false;
	}
	if(to == ROT_TR && (direction == DIR_DOWN || direction == DIR_LEFT)) {
		return false;
	}
	if(to == ROT_BL && (direction == DIR_UP || direction == DIR_RIGHT)) {
		return false;
	}
	if(to == ROT_BR && (direction == DIR_UP || direction == DIR_LEFT)) {
		return false;
	}

	return true;
}

boolean canleave(unsigned char direction) {
	unsigned char from = currentmap[posy / 8][posx / 8];

	if(from == CON_U && direction == DIR_DOWN) {
		return false;
	}
	if(from == CON_D && direction == DIR_UP) {
		return false;
	}
	if(from == CON_L && direction == DIR_RIGHT) {
		return false;
	}
	if(from == CON_R && direction == DIR_LEFT) {
		return false;
	}
	if(from == ROT_H && (direction == DIR_UP || direction == DIR_DOWN)) {
		return false;
	}
	if(from == ROT_V && (direction == DIR_LEFT || direction == DIR_RIGHT)) {
		return false;
	}
	if(from == ROT_TL && (direction == DIR_UP || direction == DIR_LEFT)) {
		return false;
	}
	if(from == ROT_TR && (direction == DIR_UP || direction == DIR_RIGHT)) {
		return false;
	}
	if(from == ROT_BL && (direction == DIR_DOWN || direction == DIR_LEFT)) {
		return false;
	}
	if(from == ROT_BR && (direction == DIR_DOWN || direction == DIR_RIGHT)) {
		return false;
	}

	return true;
}

void onenter() {
	unsigned char on = currentmap[posy / 8][posx / 8];
	if(on == TRAP_O) {
		state = DIR_FALL;
		movetimer = TIME_FALL;
	}
	if(on == CAP_B) {
		swapall(CAP_I, CAP_O);
		sound(SOUND_CAPB, SOUND_SHORT);
	}
	if(on == ROT_B) {
		swapall(ROT_V, ROT_H);
		
		change(ROT_BL, HOLD);
		change(ROT_BR, ROT_BL);
		change(ROT_TR, ROT_BR);
		change(ROT_TL, ROT_TR);
		change(HOLD, ROT_TL);

		sound(SOUND_ROTB, SOUND_SHORT);
	}
	if(on == CON_B) {
		swapall(CON_D, CON_U);
		swapall(CON_R, CON_L);

		sound(SOUND_CONB, SOUND_SHORT);
	}
	if(on == CHIP_O) {
		currentmap[posy / 8][posx / 8] = CHIP_I;
		checkcompletion();

		if(!levelcomplete) {
			sound(SOUND_CHIPO, SOUND_SHORT);
		}
	}
	if(on == TELE) {
		if(posx / 8 == tele[0][PROP_X] && posy / 8 == tele[0][PROP_Y]) {
			posx = tele[1][PROP_X] * 8;
			posy = tele[1][PROP_Y] * 8;
		} else {
			posx = tele[0][PROP_X] * 8;
			posy = tele[0][PROP_Y] * 8;
		}
		state = DIR_TELE;
		movetimer = TIME_TELE;
	}
	if(on == EXIT) {
		if(levelcomplete) {
			sound(SOUND_LEVELCOMPLETE, SOUND_LONG);
			if(menuindex == MENU_PLAY) {
				if(currentlevel + 1 >= LEVELS) {
					gamestate = STATE_ENDING_1;
				} else {
					if(currentlevel >= maxlevel) {
						currentlevel++;
						menulevel = currentlevel;
						maxlevel = currentlevel;
						EEPROM.put(SAVELOCATION, maxlevel);
						loadlevel(currentlevel, false);
						buttonblock = 10;
					} else {
						gamestate = STATE_SELECT;
					}
				}
			} else {
				gamestate = STATE_EDIT_LOAD;
			}
			levelcomplete = false;
		}
	}
	if(on == CON_U) {
		if(canenter(DIR_UP)) {
			state = DIR_UP;
			movetimer = TIME_MOVE;
			sound(SOUND_CON, SOUND_MED);
		}
	}
	if(on == CON_D) {
		if(canenter(DIR_DOWN)) {
			state = DIR_DOWN;
			movetimer = TIME_MOVE;
			sound(SOUND_CON, SOUND_MED);
		}
	}
	if(on == CON_L) {
		if(canenter(DIR_LEFT)) {
			state = DIR_LEFT;
			movetimer = TIME_MOVE;
			sound(SOUND_CON, SOUND_MED);
		}
	}
	if(on == CON_R) {
		if(canenter(DIR_RIGHT)) {
			state = DIR_RIGHT;
			movetimer = TIME_MOVE;
			sound(SOUND_CON, SOUND_MED);
		}
	}
}

void onleave() {
	unsigned char off = currentmap[posy / 8][posx / 8];
	if(off == TRAP_C) {
		currentmap[posy / 8][posx / 8] = TRAP_O;
		sound(SOUND_TRAPO, SOUND_SHORT);
	}
	if(off == ROT_H) {
		currentmap[posy / 8][posx / 8] = ROT_V;
		sound(SOUND_ROT, SOUND_SHORT);
	}
	if(off == ROT_V) {
		currentmap[posy / 8][posx / 8] = ROT_H;
		sound(SOUND_ROT, SOUND_SHORT);
	}
	if(off == ROT_TL) {
		currentmap[posy / 8][posx / 8] = ROT_TR;
		sound(SOUND_ROT, SOUND_SHORT);
	}
	if(off == ROT_TR) {
		currentmap[posy / 8][posx / 8] = ROT_BR;
		sound(SOUND_ROT, SOUND_SHORT);
	}
	if(off == ROT_BL) {
		currentmap[posy / 8][posx / 8] = ROT_TL;
		sound(SOUND_ROT, SOUND_SHORT);
	}
	if(off == ROT_BR) {
		currentmap[posy / 8][posx / 8] = ROT_BL;
		sound(SOUND_ROT, SOUND_SHORT);
	}
}

void tostate(uint8_t button, unsigned char state) {
	if(buttonblock == 0 && arduboy.justReleased(button)) {
		sound(SOUND_MENU_NEXT, SOUND_SHORT);
		gamestate = state;
	}
}

void drawbox() {
	arduboy.drawRect(5, 2, 116, 63 - 2 * 2, WHITE);
	arduboy.fillRect(5 + 1, (2 + 1), 116 - 2, 63 - (2 + 1) * 2, BLACK);
}

void editorinput() {
	unsigned char serialbuffer = 0;
	if(buttonblock > 0) {
		return;
	}
	if(arduboy.pressed(A_BUTTON) && arduboy.pressed(B_BUTTON)) {
		sound(SOUND_MENU_EXIT, SOUND_MED);
		gamestate = STATE_SELECT;
		buttonblock = 15;
		return;
	}
	switch(editstate) {
		case EDIT_TILE:
			if(arduboy.justReleased(B_BUTTON)) {
				sound(SOUND_MENU_BACK, SOUND_SHORT);
				editstate = EDIT_PICKING;
				return;
			}
			if(arduboy.justReleased(A_BUTTON)) {
				sound(SOUND_MENU_PICK, SOUND_SHORT);
				currentmap[edity][editx] = pgm_read_byte(&edittiles[edittile]);
				animation = 0;
				editstate = EDIT_PICKING;
				return;
			}
			if(arduboy.justReleased(UP_BUTTON) && edittile < EDITOR_TILES - 1) {
				sound(SOUND_MENU_SCROLL, SOUND_SHORT);
				edittile++;
			}
			if(arduboy.justReleased(DOWN_BUTTON) && edittile > 0) {
				sound(SOUND_MENU_SCROLL, SOUND_SHORT);
				edittile--;
			}
			break;
		case EDIT_PICKING:
			if(arduboy.justReleased(A_BUTTON)) {
				sound(SOUND_MENU_NEXT, SOUND_SHORT);
				editstate = EDIT_TILE;
				return;
			}
			if(arduboy.justReleased(B_BUTTON)) {
				sound(SOUND_MENU_BACK, SOUND_SHORT);
				editstate = EDIT_MENU;
				return;
			}
			if(arduboy.justReleased(UP_BUTTON) && edity > 0) {
				edity--;
			}
			if(arduboy.justReleased(DOWN_BUTTON) && edity < MAP_HEIGHT - 1) {
				edity++;
			}
			if(arduboy.justReleased(LEFT_BUTTON) && editx > 0) {
				editx--;
			}
			if(arduboy.justReleased(RIGHT_BUTTON) && editx < MAP_WIDTH - 1) {
				editx++;
			}
			break;
		case EDIT_SENDING:
			drawbox();
			arduboy.drawBitmap(24, 28, usb, 12, 8, WHITE);
			arduboy.drawBitmap(36, 28, transfering, 47, 8, WHITE);
			arduboy.drawBitmap(83, 28, to, 12, 8, WHITE);
			arduboy.drawBitmap(95, 28, pc, 9, 8, WHITE);
			arduboy.display();
			compressmap();
			editstate = EDIT_MENU;
			break;
		case EDIT_READING:
			drawbox();
			arduboy.drawBitmap(20, 28, usb, 12, 8, WHITE);
			arduboy.drawBitmap(32, 28, transfering, 47, 8, WHITE);
			arduboy.drawBitmap(79, 28, from, 20, 8, WHITE);
			arduboy.drawBitmap(99, 28, pc, 9, 8, WHITE);
			clearserialbuffer();
			while(serialbuffer < 70) {
				if(!arduboy.nextFrame()) {
					continue;
				}
				arduboy.drawFastHLine(29, 37, serialbuffer, WHITE);
				arduboy.display();
				beep.timer();
				arduboy.pollButtons();
				if(arduboy.justReleased(B_BUTTON)) {
					clearserialbuffer();
					sound(SOUND_MENU_BACK, SOUND_SHORT);
					editstate = EDIT_MENU;
					return;
				}
			}
			sound(SOUND_CHIPO, SOUND_SHORT);
			expandmap(currentlevel, true);
			editstate = EDIT_MENU;
			break;
		case EDIT_MENU:
			if(arduboy.justReleased(B_BUTTON)) {
				sound(SOUND_MENU_BACK, SOUND_SHORT);
				editstate = EDIT_PICKING;
				return;
			}
			if(arduboy.justReleased(A_BUTTON)) {
				if(editmenu == EDIT_EDIT) {
					editstate = EDIT_PICKING;
				}
				if(editmenu == EDIT_PLAY) {
					compressmap();
					loadlevel(currentlevel, true);
					gamestate = STATE_GAMEPLAY;
				}
				if(editmenu == EDIT_CLEAR) {
					clearcompressed();
					expandmap(currentlevel, true);
					editstate = EDIT_PICKING;
				}
				if(editmenu == EDIT_READ) {
					editstate = EDIT_READING;
				}
				if(editmenu == EDIT_SEND) {
					editstate = EDIT_SENDING;
				}
				if(editmenu == EDIT_SAVE) {
					compressmap();
					savecustommap(currentlevel);
					editstate = EDIT_PICKING;
				}
				if(editmenu == EDIT_EXIT) {
					sound(SOUND_MENU_BACK, SOUND_SHORT);
					editmenu = 0;
					gamestate = STATE_SELECT;
					return;
				}
				sound(SOUND_MENU_NEXT, SOUND_SHORT);
				return;
			}
			if(arduboy.justReleased(UP_BUTTON) && editmenu > 0) {
				sound(SOUND_MENU_SCROLL, SOUND_SHORT);
				editmenu--;
			}
			if(arduboy.justReleased(DOWN_BUTTON) && editmenu < 6) {
				sound(SOUND_MENU_SCROLL, SOUND_SHORT);
				editmenu++;
			}
			break;
	}
}

void die() {
	temperature = 0;
	levelcomplete = false;
	if(menuindex == MENU_PLAY) {
		loadlevel(currentlevel, false);
	} else {
		gamestate = STATE_EDIT_LOAD;
	}
}

void gameplayinput() {
	if(buttonblock > 0) {
		return;
	}
	if(arduboy.pressed(A_BUTTON) && arduboy.pressed(B_BUTTON)) {
		sound(SOUND_MENU_EXIT, SOUND_MED);
		if(menuindex == MENU_PLAY) {
			gamestate = STATE_SELECT;
		} else {
			gamestate = STATE_EDIT_LOAD;
		}
		buttonblock = 15;
		return;
	}
	if(movetimer > 0) {
		if(state == DIR_UP) {
			posy--;
		}
		if(state == DIR_DOWN) {
			posy++;
		}
		if(state == DIR_LEFT) {
			posx--;
		}
		if(state == DIR_RIGHT) {
			posx++;
		}
		movetimer--;
		if(movetimer == 0) {
			if(state == DIR_TELE) {
				state = DIR_STAY;
			} else if(state == DIR_FALL) {
				die();
			} else if(state != DIR_STAY) {
				state = DIR_STAY;
				onenter();
			}
		}
		return;
	}
	if(temperature == TEMP_MAX) {
		die();
		return;
	}
	if(arduboy.pressed(A_BUTTON) || arduboy.pressed(B_BUTTON)) {
		if(temperature < TEMP_MAX && state != DIR_SPAWNED) {
			sound(200 + temperature * 10, 10);
			temperature++;
		}
		if(temperature == TEMP_MAX) {
			state = DIR_STAY;
			movetimer = TIME_EXPLOSION;
			return;
		}
		return;
	} else {
		temperature = 0;
	}
	for(unsigned char d = 0; d < 4; d++) {
		if(arduboy.pressed(pgm_read_byte(&dirbuttons[d])) && canenter(d) && canleave(d)) {
			state = d;
			movetimer = 8;
			onleave();
			return;
		}
	}
}

void drawnumber(unsigned char x, unsigned char y, unsigned char value) {
	arduboy.fillRect(x, y, 9, 7);
	arduboy.drawBitmap(x + 1, y, numbers[value / 10], 3, 8, BLACK);
	arduboy.drawBitmap(x + 5, y, numbers[value % 10], 3, 8, BLACK);
}

void drawdude() {
	if(temperature > 0) {
		if(temperature >= TEMP_MAX) {
			arduboy.setRGBled(255, 0, 0);
			sound(65 + 100 * pgm_read_byte(&explosionsounds[(TIME_EXPLOSION - movetimer - 1) / (TIME_EXPLOSION / 4)]), SOUND_TINY);
			arduboy.drawBitmap(posx, posy, explosion[(TIME_EXPLOSION - movetimer - 1) / (TIME_EXPLOSION / 4) + 4], 8, 8, BLACK);
			arduboy.drawBitmap(posx, posy, explosion[(TIME_EXPLOSION - movetimer - 1) / (TIME_EXPLOSION / 4)], 8, 8, WHITE);
		} else {
			arduboy.setRGBled(temperature * 7, 0, 0);
			arduboy.drawBitmap(posx, posy, blocks[DUDE_BACK], 8, 8, BLACK);
			arduboy.drawBitmap(posx, posy, blocks[DUDE + animation % 2], 8, 8, WHITE);
		}
	} else {
		if(levelcomplete) {
			arduboy.setRGBled(0, 255, 0);
		} else {
			arduboy.setRGBled(0, 0, 0);
		}
		if(state == DIR_TELE) {
			sound(SOUND_TELE + (pgm_read_byte(&explosionsounds[(movetimer - 1) % (TIME_TELE / 4)])) * 100, SOUND_TINY);
			arduboy.drawBitmap(tele[0][PROP_X] * 8, tele[0][PROP_Y] * 8, blocks[DUDE_BACK], 8, 8, BLACK);
			arduboy.drawBitmap(tele[0][PROP_X] * 8, tele[0][PROP_Y] * 8, blocks[DUDE], 8, 8, (animation + 1) % 2);

			arduboy.drawBitmap(tele[1][PROP_X] * 8, tele[1][PROP_Y] * 8, blocks[DUDE_BACK], 8, 8, BLACK);
			arduboy.drawBitmap(tele[1][PROP_X] * 8, tele[1][PROP_Y] * 8, blocks[DUDE], 8, 8, animation % 2);
		} else if(state != DIR_FALL) {
			arduboy.drawBitmap(posx, posy, blocks[DUDE_BACK], 8, 8, BLACK);
			arduboy.drawBitmap(posx, posy, blocks[DUDE], 8, 8, WHITE);
		} else {
			arduboy.setRGBled(255, 0, 0);
			sound(SOUND_FALL - (TIME_FALL - movetimer) * 14, SOUND_TINY);
		}
	}
}

void draweditor() {
	arduboy.setRGBled(0, 0, 0);
	switch(editstate) {
		case EDIT_PICKING:
			if(animation / 6 == 1) {
				arduboy.fillRect(editx * 8 - 2, edity * 8 -2, 12, 12, WHITE);
			}
			break;
		case EDIT_MENU:
			drawbox();
			drawnumber(5 + 2, 2 + 2, currentlevel + 1);
			for(unsigned char i = 0; i < 7; i++) {
				arduboy.drawBitmap((56) - (editmenu == i) * 7, 4 + i * 8, menulabels[pgm_read_byte(&edititems[i])], 21, 8, WHITE);
			}
			if(editmenu == EDIT_READ || editmenu == EDIT_SEND) {
				arduboy.drawBitmap(56 - 19, 4 + editmenu * 8, usb, 12, 8, WHITE);
			}
			break;
		case EDIT_TILE:
			if(edittile < EDITOR_TILES - 1) {
				arduboy.drawBitmap(editx * 8, edity * 8 - 6 - arduboy.pressed(UP_BUTTON) - 1, arrowup, 7, 8, BLACK);
				arduboy.drawBitmap(editx * 8 + 1, edity * 8 - 6 - arduboy.pressed(UP_BUTTON) - 1, arrowup, 7, 8, BLACK);
				arduboy.drawBitmap(editx * 8, edity * 8 - 6 - arduboy.pressed(UP_BUTTON), arrowup, 7, 8, WHITE);
				arduboy.drawBitmap(editx * 8 + 1, edity * 8 - 6 - arduboy.pressed(UP_BUTTON), arrowup, 7, 8, WHITE);
			}
			if(edittile > 0) {
				arduboy.drawBitmap(editx * 8, edity * 8 + 10 + arduboy.pressed(DOWN_BUTTON) + 1, arrowdown, 7, 8, BLACK);
				arduboy.drawBitmap(editx * 8 + 1, edity * 8 + 10 + arduboy.pressed(DOWN_BUTTON) + 1, arrowdown, 7, 8, BLACK);
				arduboy.drawBitmap(editx * 8, edity * 8 + 10 + arduboy.pressed(DOWN_BUTTON), arrowdown, 7, 8, WHITE);
				arduboy.drawBitmap(editx * 8 + 1, edity * 8 + 10 + arduboy.pressed(DOWN_BUTTON), arrowdown, 7, 8, WHITE);
			}

			arduboy.fillRect(editx * 8 - 2, edity * 8 -2, 12, 12, BLACK);
			unsigned char e = pgm_read_byte(&edittiles[edittile]);
			if(e == BLANK) {
				e = HOLD;
			}
			arduboy.drawBitmap(editx * 8, edity * 8, blocks[e], 8, 8, WHITE);
			break;
	}
}

void drawui() {
	if(menuindex == MENU_PLAY) {
		arduboy.drawBitmap(112, 1, lv, 7, 8, WHITE);
		drawnumber(119, 1, currentlevel + 1);
	} else {
		arduboy.drawBitmap(112, 1, menulabels[1], 3, 8, WHITE);
		arduboy.drawBitmap(115, 1, menulabels[1] + 4, 13, 8, WHITE);
	}
	arduboy.drawBitmap(112, 8, sidebar, 16, 56, WHITE);
	if(temperature > 0) {
		arduboy.fillRect(113, 27, 14, 30, BLACK);
		arduboy.drawBitmap(116, 26, thermostat, 8, 32, WHITE);
		arduboy.fillRect(119, 26 + (TEMP_MAX - temperature), 2, temperature - 1, WHITE);
	} else {	
		if(levelcomplete) {
			arduboy.drawBitmap(112, 29, menulabels[5], 3, 8, WHITE);
			arduboy.drawBitmap(115, 29, menulabels[5] + 4, 13, 8, WHITE);
		} else {
			arduboy.drawBitmap(112, 29, wave + wavex, WAVE_WIDTH - wavex, 8, WHITE);
			arduboy.drawBitmap(112 + (WAVE_WIDTH - wavex), 29, wave, 15, 8, WHITE);
		}
	}
}

void drawmap() {
	signed char sx = random(temperature / 6) - (temperature / 12);
	signed char sy = random(temperature / 6) - (temperature / 12);
	for(unsigned char y = 0; y < MAP_HEIGHT; y++) {
		for(unsigned char x = 0; x < MAP_WIDTH; x++) {
			signed char bx = x * 8 + sx;
			signed char by = y * 8 + sy;
			unsigned char* tile = nullptr;
			switch(currentmap[y][x]) {
				default:
					tile = (unsigned char*)blocks[currentmap[y][x]];
					break;
				case BLANK:
					break;
				case LED:
					if(levelcomplete) {
						tile = (unsigned char*)blocks[LED_ON];
					} else {
						tile = (unsigned char*)blocks[LED];
					}
					break;
				case EXIT:
					if(levelcomplete) {
						tile = (unsigned char*)blocks[EXIT + animation / 4];
					} else {
						tile = (unsigned char*)blocks[EXIT];
					}
					break;
				case TELE:
					tile = (unsigned char*)blocks[TELE + animation / 4];
					break;
				case CON_U:
					tile = (unsigned char*)conveyors[DIR_UP * 4 + animation / 3];
					break;
				case CON_D:
					tile = (unsigned char*)conveyors[DIR_DOWN * 4 + animation / 3];
					break;
				case CON_L:
					tile = (unsigned char*)conveyors[DIR_LEFT * 4 + animation / 3];
					break;
				case CON_R:
					tile = (unsigned char*)conveyors[DIR_RIGHT * 4 + animation / 3];
					break;
				case BLOCK:
					for(signed char quad = 0; quad < 4; quad++) {
						signed char wall = 0;
						bool corner = (findpiece(corners[quad][PROP_X] + x, corners[quad][PROP_Y] + y, DIR_STAY) == BLOCK);
						bool wallx = (findpiece((quad % 2) * 2 - 1 + x, y, DIR_STAY) == BLOCK);
						bool wally = (findpiece(x, (quad / 2) * 2 - 1 + y, DIR_STAY) == BLOCK);
						if(wallx && wally && corner) {
							continue;
						} else if(wallx && wally) {
							wall = 3 - quad;
						} else if(!wallx && !wally) {
							wall = quad;
						} else if(wallx && !wally) {
							wall = WALL_H;
						} else if(!wallx && wally) {
							wall = WALL_V;
						}
						arduboy.drawBitmap(bx + (corners[quad][PROP_X] == 1) * 4, by + (corners[quad][PROP_Y] == 1) * 4, walls[wall], 4, 8, WHITE);
					}
					break;
			}
			if(tile != nullptr) {
				arduboy.drawBitmap(bx, by, tile, 8, 8, WHITE);
			}
		}
		if(state == DIR_FALL && posy / 8 == y) {
			arduboy.setRGBled(255, 0, 0);
			arduboy.drawBitmap(posx, posy + (TIME_FALL - movetimer) / 4, blocks[DUDE_BACK], 8, 8, BLACK);
			arduboy.drawBitmap(posx, posy + (TIME_FALL - movetimer) / 4, blocks[DUDE], 8, 8, WHITE);

			arduboy.fillRect(posx, posy + 8, 8, 8, BLACK);
		}
	}
}

void credits() {
	arduboy.drawBitmap(8, 8, me, 48, 48, WHITE);

	arduboy.drawBitmap(73, 8, jonathan, 47, 8, WHITE);
	arduboy.drawBitmap(85, 18, holmes, 35, 8, WHITE);
	arduboy.drawBitmap(85, 38, at, 5, 8, WHITE);
	arduboy.drawBitmap(91, 38, crait, 29, 8, WHITE);
	arduboy.drawBitmap(67, 49, crait, 29, 8, WHITE);
	arduboy.drawBitmap(99, 49, net, 21, 8, WHITE);
}

void systems() {
	arduboy.drawBitmap(30, 14, also, 69, 8, WHITE);
	for(unsigned char i = 0; i < 4; i++) {
		arduboy.drawBitmap(6 + 29 * i, 28, 	platforms[i], 24, 24, WHITE);
	}

}

void title() {
	arduboy.setRGBled(0, 0, 0);
	arduboy.drawBitmap(0 - MAIN_OFFSET, 41, rightarm, 8, 24, WHITE);
	arduboy.drawBitmap(8 - MAIN_OFFSET, 11, circuitdude, 48, 56, WHITE);
	arduboy.drawBitmap(56 - MAIN_OFFSET, 43, leftarm, 16, 16, WHITE);
	
	arduboy.drawBitmap(44, 3, circuit, 67, 16, WHITE);
	arduboy.drawBitmap(55, 19, dude, 44, 16, WHITE);
}

void menu() {
	if(arduboy.justReleased(UP_BUTTON) && menuindex > 0) {
		sound(SOUND_MENU_SCROLL, SOUND_SHORT);
		menuindex--;
	}
	if(arduboy.justReleased(DOWN_BUTTON) && menuindex < 3) {
		sound(SOUND_MENU_SCROLL, SOUND_SHORT);
		menuindex++;
	}

	for(unsigned char i = 0; i < 4; i++) {
		arduboy.drawBitmap(107 - (menuindex == i) * 7, 33 + i * 8, menulabels[i], 21, 8, WHITE);
		if(menuindex == i) {
			arduboy.fillRect(121, 33 + i * 8, 7, 7, WHITE);
			if(arduboy.justReleased(A_BUTTON)) {
				sound(SOUND_MENU_NEXT, SOUND_SHORT);
				gamestate = menudirection[i];
			}
			if(menuindex == 3) {
				arduboy.drawBitmap(121, 33 + i * 8, soundlabel, 2 + (arduboy.audio.enabled() * 4), 6, BLACK);
			}
		}
	}
}

void select() {
	arduboy.setRGBled(0, 0, 0);
	if(buttonblock == 0 && arduboy.justReleased(B_BUTTON)) {
		sound(SOUND_MENU_BACK, SOUND_SHORT);
		gamestate = STATE_TITLE;
		return;
	}

	if(menulevel > 0 && arduboy.justReleased(DOWN_BUTTON)) {
		menulevel--;
		sound(SOUND_MENU_SCROLL, SOUND_SHORT);
	}
	if(arduboy.justReleased(UP_BUTTON)) {
		menulevel++;
		sound(SOUND_MENU_SCROLL, SOUND_SHORT);
	}
	if(menulevel > 0) {
		arduboy.drawBitmap(109, 57 + arduboy.pressed(DOWN_BUTTON), arrowdown, 7, 8, WHITE);
	}
	if(menuindex == MENU_EDIT) {
		arduboy.drawBitmap(86, 41, saved, 21, 8, WHITE);
		if(menulevel >= CUSTOMLEVELS) {
			menulevel = CUSTOMLEVELS;
		} else {
			arduboy.drawBitmap(109, 44 - arduboy.pressed(UP_BUTTON), arrowup, 7, 8, WHITE);
		}
		tostate(A_BUTTON, STATE_EDIT_BUFFER);
	} else {
		if(menulevel >= LEVELS - 1) {
			menulevel = LEVELS - 1;
		} else {
			arduboy.drawBitmap(109, 44 - arduboy.pressed(UP_BUTTON), arrowup, 7, 8, WHITE);
		}
		if(menulevel > maxlevel) {
			arduboy.drawBitmap(118, 49, lock, 5, 8, WHITE);
		} else {
			tostate(A_BUTTON, STATE_GAME);
		}
	}
	arduboy.drawBitmap(86, 49, level, 21, 8, WHITE);

	drawnumber(108, 49, menulevel + 1);
}

void ending1() {
	arduboy.setRGBled(150, 0, 0);
	arduboy.drawBitmap(23, 48, ending_table, 80, 16, WHITE);
	arduboy.drawBitmap(27, 4, ending_laughing_face, 53, 32, WHITE);
	arduboy.drawBitmap(32, 36, ending_laughing_body, 58, 16, WHITE);
	arduboy.drawBitmap(90, 22, ending_laughing_left, 26, 24, WHITE);
	arduboy.drawBitmap(2, 32, ending_laughing_right, 24, 24, WHITE);
	arduboy.drawBitmap(21, 48, ending_laughing_arm, 23, 16, WHITE);
}

void ending2() {
	arduboy.setRGBled(255, 0, 0);
	arduboy.drawBitmap(23, 48, ending_table, 80, 16, WHITE);
	arduboy.drawBitmap(43, 48, ending_smile_body_back, 46, 8, BLACK);
	arduboy.drawBitmap(34, 41, ending_smile_body, 61, 16, WHITE);
	arduboy.drawBitmap(38, 9, ending_smile_face, 50, 32, WHITE);
}

void ending3() {
	arduboy.setRGBled(0, 0, 0);
	arduboy.drawBitmap(30, 0, ending_circle_1, 60, 64, WHITE);
}

void ending4() {
	arduboy.setRGBled(255, 0, 0);
	arduboy.drawBitmap(16, 0, ending_circle_2, 96, 64, WHITE);
}

void ending5() {
	arduboy.setRGBled(0, 0, 0);
	arduboy.drawBitmap(52, 28, ending_label, 25, 8, WHITE);
}

void checkcompletion() {
	levelcomplete = true;
	for(unsigned char x = 0; x < MAP_WIDTH; x++) {
		for(unsigned char y = 0; y < MAP_HEIGHT; y++) {
			if(currentmap[y][x] == CHIP_O) {
				levelcomplete = false;
			}
		}
	}

	if(levelcomplete) {
		sound(SOUND_LEVELCOMPLETE, SOUND_LONG);
	}
}

void change(unsigned char from, unsigned char to) {
	for(unsigned char x = 0; x < MAP_WIDTH; x++) {
		for(unsigned char y = 0; y < MAP_HEIGHT; y++) {
			if(currentmap[y][x] == from) {
				currentmap[y][x] = to;
			}
		}
	}
}

void swapall(unsigned char from, unsigned char to) {
	change(from, HOLD);
	change(to, from);
	change(HOLD, to);
}

void loadlevel(unsigned char l, boolean iscustom) {
	arduboy.setRGBled(0, 0, 0);
	posx = 0;
	posy = 0;
	if(l >= LEVELS) {
		gamestate = STATE_ENDING_1;
		return;
	}
	levelcomplete = false;
	temperature = 0;
	movetimer = 0;
	state = DIR_SPAWNED;
	expandmap(l, iscustom);
	tele[0][PROP_X] = 255;
	for(unsigned char x = 0; x < MAP_WIDTH; x++) {
		for(unsigned char y = 0; y < MAP_HEIGHT; y++) {
			if(currentmap[y][x] == START) {
				posx = x * 8;
				posy = y * 8;
				currentmap[y][x] = BLANK;
			}
			if(currentmap[y][x] == TELE) {
				if(tele[0][PROP_X] == 255) {
					tele[0][PROP_Y] = y;
					tele[0][PROP_X] = x;
				} else {
					tele[1][PROP_Y] = y;
					tele[1][PROP_X] = x;
				}
			}
		}
	}
}

void editor() {
	drawmap();
	drawui();
	draweditor();
	editorinput();
}

void gameplay() {
	drawmap();
	drawui();
	drawdude();
	gameplayinput();
}

void gameloop() {
	switch(gamestate) {
		case STATE_CREDITS:
			credits();
			tostate(A_BUTTON, STATE_SYSTEMS);
			break;
		case STATE_SYSTEMS:
			systems();
			tostate(A_BUTTON, STATE_TITLE);
			break;
		case STATE_SOUND:
			gamestate = STATE_TITLE;
			arduboy.audio.toggle();
			arduboy.audio.saveOnOff();
		case STATE_TITLE:
			title();
			menu();
			break;
		case STATE_EDIT_BUFFER:
			currentlevel = menulevel;
			readcustommap(currentlevel);
		case STATE_EDIT_LOAD:
			editstate = EDIT_MENU;
			editmenu = 0;
			temperature = 0;
			state = DIR_STAY;
			levelcomplete = false;
			expandmap(currentlevel, true);
			gamestate = STATE_EDITOR;
		case STATE_EDITOR:
			editor();
			break;
		case STATE_SELECT_GAME:
			gamestate = STATE_SELECT;
			menulevel = maxlevel;
			title();
			select();
			break;
		case STATE_SELECT_EDIT:
			gamestate = STATE_SELECT;
			menulevel = 0;
			title();
			select();
			break;
		case STATE_SELECT:
			title();
			select();
			break;
		case STATE_GAME:
			currentlevel = menulevel;
			loadlevel(currentlevel, menuindex != MENU_PLAY);
			gamestate = STATE_GAMEPLAY;
		case STATE_GAMEPLAY:
			gameplay();
			break;
		case STATE_ENDING_1:
			ending1();
			tostate(A_BUTTON, STATE_ENDING_2);
			break;
		case STATE_ENDING_2:
			ending2();
			tostate(A_BUTTON, STATE_ENDING_3);
			break;
		case STATE_ENDING_3:
			ending3();
			tostate(A_BUTTON, STATE_ENDING_4);
			break;
		case STATE_ENDING_4:
			ending4();
			tostate(A_BUTTON, STATE_ENDING_5);
			break;
		case STATE_ENDING_5:
			ending5();
			tostate(A_BUTTON, STATE_CREDITS);
			break;
	}
}

void setup() {
    arduboy.begin();
	arduboy.setFrameRate(FRAMERATE);
	beep.begin();
	arduboy.setRGBled(0, 0, 0);

	EEPROM.get(SAVELOCATION, maxlevel);
	if(maxlevel >= LEVELS) {
		maxlevel = 0;
		EEPROM.put(SAVELOCATION, maxlevel);
	}
	menulevel = maxlevel;
}

void loop() {
	if(!arduboy.nextFrame()) {
		return;
	}

	beep.timer();

	animation = (animation + 1) % 12;
	if(animation % 4 == 0) {
		wavex = (wavex + 1) % WAVE_WIDTH;
	}
	if(buttonblock > 0) {
		buttonblock--;
	}
	arduboy.pollButtons();
	arduboy.clear();

	gameloop();

	arduboy.display();
}